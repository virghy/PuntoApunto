*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="tsbase.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*

*
DEFINE CLASS anular AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="anular" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cancelar" UniqueID="" Timestamp="" />

	AutoCenter = .T.
	Caption = "Form"
	DoCreate = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "anular"
	WindowType = 1

	ADD OBJECT 'anular' AS tscommandbutton WITH ;
		Caption = "Confirmar", ;
		Height = 24, ;
		Left = 84, ;
		Name = "anular", ;
		Top = 192, ;
		Width = 96
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cancelar' AS tscommandbutton WITH ;
		Caption = "Cancelar", ;
		Height = 24, ;
		Left = 204, ;
		Name = "Cancelar", ;
		Top = 192, ;
		Width = 96
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	PROCEDURE Cancelar.Click
		THISFORM.RELEASE
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS asiento AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtNúmero" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtDescripción" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNro_asiento" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSucursal" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNúmero" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFecha" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescripción" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales.TotalDebe" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales.TotalHaber" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales.Saldo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales.Tslabel7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="totales.SaldoCuenta" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Cuenta.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Cuenta.Campo_clave1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Descripcion.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Descripcion.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Debe.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Debe.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Haber.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Haber.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Centro.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Centro.Cbocentro1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Concepto.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Concepto.Cboconcepto1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Documento.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Documento.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Detalle.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdVdetalle.Detalle.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Bifurcar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Enlazar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cbosucursal1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFecha" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cotiza" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tslabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="IdDescripcion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tscommandbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tscommandbutton2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDetalleProvision" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *asentar
		*m: *enlazardatos
		*m: *traerdatos
		*m: *validar
		*p: controlsource		&& Especifica el campo al que esta enlazado el control.
		*p: recordsource		&& Especifica el origen de datos al que esta enlazado el control Asiento.
		*p: sufijotabla		&& Sufijo utilizado para las tablas cuando exista mas de una instancia.
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	controlsource = 		&& Especifica el campo al que esta enlazado el control.
	Height = 323
	Name = "asiento"
	recordsource = Datos!cnt_Asientos		&& Especifica el origen de datos al que esta enlazado el control Asiento.
	Style = 3
	sufijotabla = 		&& Sufijo utilizado para las tablas cuando exista mas de una instancia.
	Width = 602

	ADD OBJECT 'Bifurcar' AS tscommandbutton WITH ;
		Caption = "\<Bifurcar", ;
		editable = .T., ;
		FontBold = .F., ;
		Height = 28, ;
		Left = 455, ;
		Name = "Bifurcar", ;
		SpecialEffect = 2, ;
		TabIndex = 9, ;
		ToolTipText = "Bifurca esta operación del asiento actual.", ;
		Top = 9, ;
		Width = 48
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Cbosucursal1' AS cbosucursal WITH ;
		cursor = cboSucursal, ;
		Left = 76, ;
		Name = "Cbosucursal1", ;
		TabIndex = 4, ;
		Top = 47, ;
		Width = 185
		*< END OBJECT: ClassLib="futura.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdDetalleProvision' AS tscommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Detalle Provision", ;
		editable = .T., ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 228, ;
		Name = "cmdDetalleProvision", ;
		TabIndex = 15, ;
		Top = 9, ;
		Width = 96
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cotiza' AS tstextbox WITH ;
		Comment = "", ;
		ControlSource = "", ;
		editable = .T., ;
		Height = 22, ;
		InputMask = "9,999.99", ;
		Left = 502, ;
		Name = "cotiza", ;
		TabIndex = 5, ;
		Top = 49, ;
		Width = 99
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'Enlazar' AS tscommandbutton WITH ;
		Caption = "\<Enlazar", ;
		editable = .T., ;
		FontBold = .F., ;
		Height = 28, ;
		Left = 503, ;
		Name = "Enlazar", ;
		SpecialEffect = 2, ;
		TabIndex = 10, ;
		ToolTipText = "Enlaza esta operación con un Asiento ya existente.", ;
		Top = 9, ;
		Width = 48
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdVdetalle' AS tsgrid WITH ;
		campo = IdEmpresa, Ejercicio, idAsiento, ;
		cfieldtosum = debe,haber, ;
		ColumnCount = 8, ;
		editable = .T., ;
		FontSize = 8, ;
		GridLines = 0, ;
		Height = 164, ;
		Left = 2, ;
		Name = "grdVdetalle", ;
		Panel = 1, ;
		RecordMark = .T., ;
		RecordSourceType = 1, ;
		RowHeight = 22, ;
		ScrollBars = 3, ;
		TabIndex = 8, ;
		Top = 108, ;
		valor = oApp.Empresa, oApp.Ejercicio, vxAsientos2.idAsiento, ;
		Width = 600, ;
		Column1.ControlSource = "", ;
		Column1.FontSize = 8, ;
		Column1.Name = "Cuenta", ;
		Column1.Visible = .T., ;
		Column1.Width = 58, ;
		Column2.BackColor = 228,228,228, ;
		Column2.ControlSource = "", ;
		Column2.FontSize = 8, ;
		Column2.Name = "Descripcion", ;
		Column2.Visible = .T., ;
		Column2.Width = 176, ;
		Column3.ControlSource = "", ;
		Column3.FontSize = 8, ;
		Column3.InputMask = "999,999,999,999", ;
		Column3.Name = "Debe", ;
		Column3.Visible = .T., ;
		Column3.Width = 92, ;
		Column4.ControlSource = "", ;
		Column4.FontSize = 8, ;
		Column4.InputMask = "999,999,999,999", ;
		Column4.Name = "Haber", ;
		Column4.Visible = .T., ;
		Column4.Width = 90, ;
		Column5.Bound = .T., ;
		Column5.ControlSource = "", ;
		Column5.CurrentControl = "Cbocentro1", ;
		Column5.FontSize = 8, ;
		Column5.Name = "Centro", ;
		Column5.ReadOnly = .F., ;
		Column5.Sparse = .T., ;
		Column5.Visible = .T., ;
		Column5.Width = 34, ;
		Column6.ControlSource = "", ;
		Column6.CurrentControl = "Cboconcepto1", ;
		Column6.FontSize = 8, ;
		Column6.Name = "Concepto", ;
		Column6.Visible = .T., ;
		Column6.Width = 47, ;
		Column7.ControlSource = "", ;
		Column7.FontSize = 8, ;
		Column7.Name = "Documento", ;
		Column7.Visible = .T., ;
		Column7.Width = 79, ;
		Column8.ControlSource = "", ;
		Column8.FontSize = 8, ;
		Column8.Name = "Detalle", ;
		Column8.Visible = .T., ;
		Column8.Width = 234
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="grid" />

	ADD OBJECT 'grdVdetalle.Centro.Cbocentro1' AS cbocentro WITH ;
		ControlSource = "", ;
		Left = 17, ;
		Name = "Cbocentro1", ;
		Style = 0, ;
		Top = 21
		*< END OBJECT: ClassLib="futura.vcx" BaseClass="combobox" />

	ADD OBJECT 'grdVdetalle.Centro.Header1' AS header WITH ;
		Caption = "Centro Costo", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Concepto.Cboconcepto1' AS cboconcepto WITH ;
		ControlSource = "", ;
		Left = 27, ;
		Name = "Cboconcepto1", ;
		Style = 0, ;
		Top = 31
		*< END OBJECT: ClassLib="futura.vcx" BaseClass="combobox" />

	ADD OBJECT 'grdVdetalle.Concepto.Header1' AS header WITH ;
		Caption = "Concepto", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Cuenta.Campo_clave1' AS campo_clave WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		condicionextra = asentable=1 and IdEmpresa=?oApp.Empresa and Ejercicio = ?oApp.Ejercicio, ;
		condicion_en_edicion = Vigente=1, ;
		datoayuda = Cuentas Contables, ;
		indice = cuenta, ;
		indice1 = abreviatura, ;
		Left = 359, ;
		mensajeerror = El codigo de la cuenta no es válido o no es asentable., ;
		Name = "Campo_clave1", ;
		objeto = this.parent.parent.descripcion.text1, ;
		objeto2 = This.Parent.Parent.Parent.totales.SaldoCuenta, ;
		origen = R, ;
		resulrepe = .T., ;
		retorna = descripción, ;
		retorna2 = cuenta, ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		tabla = cn_cuentas, ;
		Top = 46, ;
		Visible = .T.
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'grdVdetalle.Cuenta.Header1' AS header WITH ;
		Caption = "Cuenta", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Debe.Header1' AS header WITH ;
		Caption = "Debe", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Debe.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		InputMask = "999,999,999,999", ;
		Margin = 0, ;
		Name = "Text1", ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdVdetalle.Descripcion.Header1' AS header WITH ;
		Caption = "Descripción", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Descripcion.Text1' AS textbox WITH ;
		BackColor = 228,228,228, ;
		BorderStyle = 0, ;
		DisabledBackColor = 228,228,228, ;
		Enabled = .F., ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdVdetalle.Detalle.Header1' AS header WITH ;
		Caption = "Detalle", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Detalle.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdVdetalle.Documento.Header1' AS header WITH ;
		Caption = "Documento", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Documento.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "vdetalle.detalle", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1", ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'grdVdetalle.Haber.Header1' AS header WITH ;
		Caption = "Haber", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdVdetalle.Haber.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		InputMask = "999,999,999,999", ;
		Margin = 0, ;
		Name = "Text1", ;
		SelectedBackColor = 247,223,187, ;
		SelectedForeColor = 0,64,128, ;
		Visible = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'IdDescripcion' AS campo_clave WITH ;
		actualizar = .F., ;
		condicionextra = IdEmpresa=?oApp.Empresa, ;
		datoayuda = Descripcion Asiento, ;
		Height = 22, ;
		indice = IdDescripcion, ;
		Left = 76, ;
		mensajeerror = No se encuentra la Descripcion., ;
		Name = "IdDescripcion", ;
		objeto = this.parent.txtDescripción, ;
		OLEDropEffects = 0, ;
		origen = R, ;
		retorna = Descripcion, ;
		TabIndex = 6, ;
		tabla = cn_Descripciones, ;
		Top = 72, ;
		Width = 51
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'lblDescripción' AS tslabel WITH ;
		Caption = "Descripción", ;
		Height = 16, ;
		Left = 0, ;
		Name = "lblDescripción", ;
		TabIndex = 17, ;
		Top = 72, ;
		Width = 67
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'lblFecha' AS tslabel WITH ;
		Caption = "Fecha", ;
		Height = 16, ;
		Left = 0, ;
		Name = "lblFecha", ;
		TabIndex = 13, ;
		Top = 24, ;
		Width = 34
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'lblNúmero' AS tslabel WITH ;
		Caption = "Número", ;
		Height = 16, ;
		Left = 0, ;
		Name = "lblNúmero", ;
		TabIndex = 11, ;
		Top = 0, ;
		Width = 46
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'lblSucursal' AS tslabel WITH ;
		Caption = "Sucursal", ;
		Height = 16, ;
		Left = 0, ;
		Name = "lblSucursal", ;
		TabIndex = 14, ;
		Top = 48, ;
		Width = 50
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'totales' AS container WITH ;
		Height = 34, ;
		Left = 2, ;
		Name = "totales", ;
		SpecialEffect = 1, ;
		TabIndex = 18, ;
		Top = 289, ;
		Width = 600, ;
		ZOrderSet = 22
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'totales.Saldo' AS tstextbox WITH ;
		Alignment = 3, ;
		BackColor = 0,128,255, ;
		Comment = "", ;
		ControlSource = "", ;
		DisabledForeColor = 0,128,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Height = 24, ;
		InputMask = "999,999,999,999", ;
		Left = 430, ;
		Name = "Saldo", ;
		TabIndex = 4, ;
		Top = 5, ;
		Value = 0, ;
		Width = 89
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'totales.SaldoCuenta' AS tstextbox WITH ;
		BackColor = 192,192,192, ;
		ControlSource = "", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .F., ;
		Height = 24, ;
		InputMask = "999,999,999,999", ;
		Left = 72, ;
		Name = "SaldoCuenta", ;
		TabIndex = 1, ;
		Top = 5, ;
		Visible = .F., ;
		Width = 94
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'totales.TotalDebe' AS tstextbox WITH ;
		BackColor = 192,192,192, ;
		ControlSource = "", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Height = 24, ;
		InputMask = "999,999,999,999", ;
		Left = 245, ;
		Name = "TotalDebe", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 94
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'totales.TotalHaber' AS tstextbox WITH ;
		BackColor = 192,192,192, ;
		ControlSource = "", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		FontBold = .T., ;
		Height = 24, ;
		InputMask = "999,999,999,999", ;
		Left = 340, ;
		Name = "TotalHaber", ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 89
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'totales.Tslabel7' AS tslabel WITH ;
		BackColor = 0,0,0, ;
		Caption = "Totales", ;
		Height = 12, ;
		Left = 130, ;
		Name = "Tslabel7", ;
		TabIndex = 8, ;
		Top = 5, ;
		Width = 96
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'Tscommandbutton1' AS tscommandbutton WITH ;
		Caption = "E\<liminar", ;
		editable = .T., ;
		FontBold = .F., ;
		Height = 28, ;
		Left = 551, ;
		Name = "Tscommandbutton1", ;
		SpecialEffect = 2, ;
		TabIndex = 12, ;
		ToolTipText = "Elimina el asiento actual.", ;
		Top = 9, ;
		Width = 48
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tscommandbutton2' AS tscommandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Crear desde una Plantilla", ;
		editable = .T., ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 326, ;
		Name = "Tscommandbutton2", ;
		TabIndex = 19, ;
		Top = 9, ;
		Width = 128
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Tslabel2' AS tslabel WITH ;
		Caption = "Cotizacion Moneda Extranjera", ;
		Height = 16, ;
		Left = 330, ;
		Name = "Tslabel2", ;
		TabIndex = 16, ;
		Top = 50, ;
		Width = 165
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'txtDescripción' AS tstextbox WITH ;
		Comment = "", ;
		editable = .T., ;
		Height = 22, ;
		Left = 128, ;
		Name = "txtDescripción", ;
		TabIndex = 7, ;
		Top = 72, ;
		Width = 473
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtFecha' AS tstextbox WITH ;
		Comment = "", ;
		editable = .T., ;
		Height = 22, ;
		Left = 76, ;
		Name = "txtFecha", ;
		TabIndex = 3, ;
		Top = 23, ;
		Width = 99
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNro_asiento' AS tstextbox WITH ;
		Comment = "", ;
		editable = .F., ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 126, ;
		Name = "txtNro_asiento", ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtNúmero' AS tstextbox WITH ;
		Comment = "", ;
		ControlSource = "", ;
		datoayuda = Asientos, ;
		editable = .F., ;
		Enabled = .F., ;
		Height = 22, ;
		Left = 76, ;
		Name = "txtNúmero", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />
	
	PROCEDURE asentar
		LPARAMETERS LCIDASIENTO
		LOCAL LCCAMPONRO, LNCAMPOTAM, LCALIAS, LDFECHA, LCDESCRIPCION, LCSUCURSAL, LCNROASIENTO, LCCUENTA, LCTIPO, LNIMPORTE, LCCAMPO, CCOMANDOSQL, LCCONDICION, LNCOTIZACION
		LCALIAS = ALIAS()
		WAIT WINDOW NOCLEAR NOWAIT 'Confeccionando el Asiento...'
		SELECT * FROM Datos!sysAsientos WHERE LCIDASIENTO=IDASIENTO INTO CURSOR cxAsentar
		
		*SELECT cxAsentar
		*BROWSE 
		
		LCCAMPONRO = THISFORM.CAMPONRO
		LNCAMPOTAM = THISFORM.CAMPOTAM
		
		*--- Obtenemos el ID del origen del asiento
		LCORIGENASIENTO = cxAsentar.IdAsiento
			  
		
		IF !EMPTY(ALLTRIM(cxAsentar.campoid)) THEN 
			lcIdMovimiento = EVALUATE(cxAsentar.campoid)
		ELSE 
			lcIdMovimiento = ""
		ENDIF 
		
		**Convertimos a char, si es de otro tipo
		IF VARTYPE(lcIdMovimiento )<>'C'
			lcIdMovimiento = ALLTRIM(STR(lcIdMovimiento))
		ENDIF
		
		IF USED('asientos_Base')
			USE IN ASIENTOS_BASE
		ENDIF
		LCTIPO = EVALUATE(cxAsentar.TIPO)
		
		IF LCTIPO<>"D" .and. LCTIPO<>"C"
			LCTIPO = 'D'
		ENDIF
		
		
		LDFECHA = EVALUATE(cxAsentar.FECHA)
		
		IF  .NOT. EMPTY(ALLTRIM(cxAsentar.DESCRIPCION))
			LCDESCRIPCION = EVALUATE(cxAsentar.DESCRIPCION)
		ELSE
			LCDESCRIPCION = ''
		ENDIF
		
		IF  .NOT. EMPTY(cxAsentar.SUCURSAL)
			LCSUCURSAL = EVALUATE(cxAsentar.SUCURSAL)
		ELSE
			LCSUCURSAL = '01'
		ENDIF
		
		IF  .NOT. EMPTY(ALLTRIM(cxAsentar.COTIZACION))
			LNCOTIZACION = EVALUATE(cxAsentar.COTIZACION)
		ELSE
			LNCOTIZACION = COTIZACION('U$S', 'V', LDFECHA)
		ENDIF
		
		SELECT *, IIF(LCTIPO='D', IIF(INVERTIDO, 'H', 'D'), IIF(INVERTIDO, 'D', 'H')) AS ORDEN FROM cxAsentar ORDER BY ORDEN INTO CURSOR _lcAsentar
		
		SELECT _lcAsentar
		
		*BROWSE 
		*SET STEP ON
		
		THIS.PARENT.PARENT.ACTIVEPAGE = THIS.PARENT.PAGEORDER
		SELECT _lcAsentar
		INSERT INTO ('vxAsientos'+THIS.SUFIJOTABLA) (IDEMPRESA, IDASIENTO, EJERCICIO, FECHA, DESCRIPCIÓN, SUCURSAL, COTIZACION, IdOrigen, IdOrigenRelacion);
		 VALUES (OAPP.EMPRESA, NEWID('CNT_ASIENTOS'), YEAR(LDFECHA), LDFECHA, LCDESCRIPCION, LCSUCURSAL, LNCOTIZACION, lcOrigenAsiento, lcIdMovimiento )
		
		REPLACE (THIS.CONTROLSOURCE) WITH EVALUATE("vxAsientos"+RTRIM(THIS.SUFIJOTABLA)+".idasiento")
		
		GOTO TOP IN _lcAsentar
		WAIT WINDOW NOCLEAR NOWAIT 'Asentando...'
		DO WHILE  .NOT. EOF('_lcAsentar')
			IF  .NOT. EMPTY(_lcAsentar.ORIGENSQL)
				CCOMANDOSQL = 'Select '+_lcAsentar.CUENTA+' as cuenta, '+'('+_lcAsentar.IMPORTE+') as importe'
				IF  .NOT. EMPTY(ALLTRIM(_lcAsentar.DETALLE))
					CCOMANDOSQL = CCOMANDOSQL+", "+_lcAsentar.DETALLE+' as detalle'
				ELSE
					CCOMANDOSQL = CCOMANDOSQL+', SPACE(20) as detalle'
				ENDIF
		
				IF  .NOT. EMPTY(_lcAsentar.CENTRO)
					CCOMANDOSQL = CCOMANDOSQL+", "+_lcAsentar.CENTRO+' as Centro'
				ELSE
					CCOMANDOSQL = CCOMANDOSQL+', SPACE(3)  as Centro'
				ENDIF
		
				IF  .NOT. EMPTY(_lcAsentar.IDCONCEPTO)
					CCOMANDOSQL = CCOMANDOSQL+', '+_lcAsentar.IDCONCEPTO+' as IdConcepto'
				ELSE
					CCOMANDOSQL = CCOMANDOSQL+', SPACE(2)  as IdConcepto'
				ENDIF
		
				IF  .NOT. EMPTY(_lcAsentar.DOCUMENTO)
					CCOMANDOSQL = CCOMANDOSQL+', '+_lcAsentar.DOCUMENTO+' as Documento'
				ELSE
					CCOMANDOSQL = CCOMANDOSQL+', SPACE(20) as Documento'
				ENDIF
		
				CCOMANDOSQL = CCOMANDOSQL+' From '+_lcAsentar.ORIGENSQL
				IF  .NOT. EMPTY(_lcAsentar.CONDICION)
					CCOMANDOSQL = CCOMANDOSQL+' Where '+_lcAsentar.CONDICION
				ENDIF
		
				SQL(CCOMANDOSQL, 'cDet')
				SELECT CUENTA, SUM(IMPORTE) AS IMPORTE, DETALLE, CENTRO, IDCONCEPTO, DOCUMENTO FROM cDet GROUP BY CUENTA, DETALLE, CENTRO, IDCONCEPTO, DOCUMENTO INTO CURSOR cAsentarDet
		
				IF RECCOUNT('cAsentarDet')>0
					DO WHILE  .NOT. EOF('cAsentarDet')
						IF cAsentarDet.IMPORTE=0
							SKIP IN cAsentarDet
							LOOP
						ENDIF
						LCCUENTA = cAsentarDet.CUENTA
						LCDOCUMENTO = cAsentarDet.DOCUMENTO
						LNIMPORTE = ABS(cAsentarDet.IMPORTE)
						
						IF NOT ISNULL(lcCuenta)				            
							lcDescripcion=LeerParam("Descripción","cn_Cuentas","IdEmpresa=?oApp.Empresa and Ejercicio=?oApp.Ejercicio and cuenta='" + LCCUENTA +"'") 
						ELSE
							lcDescripcion=''
						endif
							
		
						THIS.GRDVDETALLE.AGREGARITEM()
						REPLACE CUENTA WITH NVL(LCCUENTA, ''), Descripción WITH lcDescripcion, DOCUMENTO WITH LCDOCUMENTO, DETALLE WITH cAsentarDet.DETALLE, CENTRO WITH cAsentarDet.CENTRO IN ("vxDetalle"+RTRIM(THIS.SUFIJOTABLA))
						DO CASE
						CASE LCTIPO='D'
							IF _lcAsentar.INVERTIDO
								LCCAMPO = 'Haber'
							ELSE
								LCCAMPO = 'Debe'
							ENDIF
						CASE LCTIPO='C'
							IF _lcAsentar.INVERTIDO
								LCCAMPO = 'Debe'
							ELSE
								LCCAMPO = 'Haber'
							ENDIF
						ENDCASE
						REPLACE &LCCAMPO WITH NVL(LNIMPORTE,0), EJERCICIO WITH YEAR(LDFECHA) IN ("vxDetalle" + RTRIM(THIS.SUFIJOTABLA))
						SKIP IN cAsentarDet
					ENDDO
				ENDIF
			ELSE
				*VG 22/02/13
				*Evaluamos la condicion para utilizar el registro
				IF .NOT. EMPTY(_lcAsentar.Condicion)
					IF !EVALUATE(_lcAsentar.Condicion)
						SKIP IN _lcAsentar
						LOOP 
					ENDIF
				ENDIF
				
				IF  .NOT. EMPTY(_lcAsentar.CUENTA)
					LCCUENTA = EVALUATE(_lcAsentar.CUENTA)
				ELSE
					LCCUENTA = ''
				ENDIF
				IF  .NOT. EMPTY(_lcAsentar.DOCUMENTO)
					LCDOCUMENTO = EVALUATE(_lcAsentar.DOCUMENTO)
				ELSE
					LCDOCUMENTO = ''
				ENDIF
				IF  .NOT. EMPTY(ALLTRIM(_lcAsentar.DETALLE))
					LCDetalle = EVALUATE(_lcAsentar.DETALLE)
				ELSE
					LCDetalle = ''
				ENDIF
		
				IF  .NOT. EMPTY(_lcAsentar.IMPORTE)
					LNIMPORTE = ABS(EVALUATE(_lcAsentar.IMPORTE))
				ELSE
					LNIMPORTE = 0
				ENDIF
		
				IF LNIMPORTE<>0
					lcDescripcion=LeerParam("Descripción","cn_Cuentas","IdEmpresa=?oApp.Empresa and Ejercicio=?oApp.Ejercicio and cuenta='" + LCCUENTA +"'") 
		
					THIS.GRDVDETALLE.AGREGARITEM()
					REPLACE CUENTA WITH NVL(LCCUENTA, ''), Descripción WITH lcDescripcion, DOCUMENTO WITH LCDOCUMENTO, DETALLE WITH LCDetalle  IN ("vxDetalle"+RTRIM(THIS.SUFIJOTABLA))
					DO CASE
					CASE LCTIPO='D'
						IF _lcAsentar.INVERTIDO
							LCCAMPO = 'Haber'
						ELSE
							LCCAMPO = 'Debe'
						ENDIF
					CASE LCTIPO='C'
						IF _lcAsentar.INVERTIDO
							LCCAMPO = 'Debe'
						ELSE
							LCCAMPO = 'Haber'
						ENDIF
					ENDCASE
					REPLACE &LCCAMPO WITH NVL(LNIMPORTE,0),EJERCICIO WITH YEAR(LDFECHA)  IN ("vxDetalle" + RTRIM(THIS.SUFIJOTABLA))
				ENDIF
			ENDIF
			SKIP IN _lcAsentar
		ENDDO
		SELECT (LCALIAS)
		
		IF THIS.PARENT.PARENT.PAGECOUNT>2
			THIS.PARENT.PARENT.ACTIVEPAGE = 3
		ENDIF
		
		
		THIS.REFRESH()
		THISFORM.CAMPONRO = LCCAMPONRO
		THISFORM.CAMPOTAM = LNCAMPOTAM
		WAIT CLEAR
	ENDPROC

	PROCEDURE enlazardatos
		THIS.TXTNÚMERO.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.número'
		THIS.TXTNRO_ASIENTO.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.nro_asiento'
		THIS.TXTFECHA.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.Fecha'
		THIS.CBOSUCURSAL1.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.Sucursal'
		THIS.TXTDESCRIPCIÓN.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.Descripción'
		THIS.COTIZA.CONTROLSOURCE = 'vxAsientos'+RTRIM(THIS.SUFIJOTABLA)+'.Cotizacion'
		WITH THIS.GRDVDETALLE
		.RECORDSOURCE = 'vxdetalle'+RTRIM(THIS.SUFIJOTABLA)
		.CUENTA.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.cuenta'
		.DESCRIPCION.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Descripción'
		.DEBE.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Debe'
		.HABER.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Haber'
		.CENTRO.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Centro'
		.CONCEPTO.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.IdConcepto'
		.DOCUMENTO.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Documento'
		.DETALLE.CONTROLSOURCE = 'vxDetalle'+RTRIM(THIS.SUFIJOTABLA)+'.Detalle'
		.COLUMN0.WIDTH = 0
		ENDWITH
	ENDPROC

	PROCEDURE Init
		LPARAMETERS LCSUFIJO
		THIS.SUFIJOTABLA = LCSUFIJO
		THIS.TRAERDATOS()
		THIS.GRDVDETALLE.VALOR = "oApp.Empresa, oApp.Ejercicio, vxAsientos"+RTRIM(THIS.SUFIJOTABLA)+".idAsiento"
		DO CASE
		CASE EMPTY(THISFORM.TABLA2)
		THISFORM.TABLA2 = 'vxAsientos'+THIS.SUFIJOTABLA
		THISFORM.TABLA3 = 'vxDetalle'+THIS.SUFIJOTABLA
		CASE EMPTY(THISFORM.TABLA3)
		THISFORM.TABLA3 = 'vxAsientos'+THIS.SUFIJOTABLA
		THISFORM.TABLA4 = 'vxDetalle'+THIS.SUFIJOTABLA
		CASE EMPTY(THISFORM.TABLA4)
		THISFORM.TABLA4 = 'vxAsientos'+THIS.SUFIJOTABLA
		THISFORM.TABLA5 = 'vxDetalle'+THIS.SUFIJOTABLA
		CASE EMPTY(THISFORM.TABLA5)
		THISFORM.TABLA5 = 'vxAsientos'+THIS.SUFIJOTABLA
		THISFORM.TABLA6 = 'vxDetalle'+THIS.SUFIJOTABLA
		OTHERWISE
		MESSAGEBOX('No se pudo registrar las tablas de asientos', 16, "Futura Software")
		ENDCASE
		IF THIS.WIDTH>THIS.PARENT.PARENT.WIDTH
		THIS.PARENT.PARENT.WIDTH = THIS.WIDTH+25
		THISFORM.WIDTH = THIS.WIDTH+25
		ENDIF
	ENDPROC

	PROCEDURE Refresh
		THISFORM.LOCKSCREEN = .T.
		IF  .NOT. THISFORM.EDITMODE .OR.  .NOT. THISFORM.DATACHANGED("vxAsientos"+THIS.SUFIJOTABLA)
		M.IDASIENTO = EVALUATE(THIS.CONTROLSOURCE)
		THIS.TRAERDATOS()
		ENDIF
		THISFORM.LOCKSCREEN = .F.
	ENDPROC

	PROCEDURE traerdatos
		HNDCONN = CURSORGETPROP("ConnectHandle", THISFORM.TABLA1)
		IF EMPTY(THIS.CONTROLSOURCE)
			M.IDASIENTO = 0
		ELSE
			M.IDASIENTO = EVALUATE(THIS.CONTROLSOURCE)
		ENDIF
		
		THIS.GRDVDETALLE.RECORDSOURCE = ''
		
		*Filtrar solo por el IdAsiento
		
		TEXT TO CMDSQL NOSHOW
			SELECT Cn_asientos.idempresa, Cn_asientos.idasiento,
			  Cn_asientos.ejercicio, Cn_asientos.número, Cn_asientos.fecha,
			  Cn_asientos.descripción, Cn_asientos.tipo, Cn_asientos.procesado,
			  Cn_asientos.sucursal, Cn_asientos.nro_asiento, Cn_asientos.cotizacion,
			  Cn_asientos.idmoneda, Cn_asientos.IdOrigen, Cn_asientos.IdOrigenRelacion
			 FROM dbo.cn_asientos Cn_asientos
			 WHERE Cn_asientos.idasiento = ?m.idasiento
		ENDTEXT
		
		
		= SQLEXEC(HNDCONN, CMDSQL, 'vxAsientos'+THIS.SUFIJOTABLA)
		
		SELECT ('vxAsientos'+THIS.SUFIJOTABLA)
		= CURSORSETPROP("KeyFieldList", 'IdEmpresa,IdAsiento')
		= CURSORSETPROP("UpdatableFieldList", "idempresa, idasiento, ejercicio, número, fecha, descripción, tipo, procesado, sucursal, nro_asiento, idmoneda, cotizacion, idorigen,idorigenrelacion")
		= CURSORSETPROP("UpdateNameList", "idempresa dbo.cn_asientos.idempresa, idasiento dbo.cn_asientos.idasiento, ejercicio dbo.cn_asientos.ejercicio, número dbo.cn_asientos.número, fecha dbo.cn_asientos.fecha, descripción dbo.cn_asientos.descripción, tipo dbo.cn_asientos.tipo,"+" procesado dbo.cn_asientos.procesado, sucursal dbo.cn_asientos.sucursal, nro_asiento dbo.cn_asientos.nro_asiento, idmoneda dbo.cn_asientos.idmoneda, cotizacion dbo.cn_asientos.cotizacion, " ; 
						+"idorigen dbo.cn_asientos.idorigen, idorigenrelacion dbo.cn_asientos.idorigenrelacion")
		= CURSORSETPROP("Tables", 'dbo.cn_asientos')
		= CURSORSETPROP("SendUpdates", .T.)
		TEXT TO CMDSQL NOSHOW
		
		SELECT Cn_detalle.iddetalle, Cn_detalle.idempresa, 
		  Cn_detalle.idasiento, Cn_detalle.ejercicio, Cn_detalle.cuenta,
		  Cn_detalle.debe, Cn_detalle.haber, Cn_detalle.moneda_extr,
		  Cn_detalle.cotiza, Cn_detalle.detalle, Cn_detalle.centro,
		  Cn_detalle.documento, Cn_detalle.idconcepto, Cn_cuentas.Descripción
		 FROM dbo.cn_detalle Cn_detalle left join dbo.cn_cuentas Cn_cuentas 
		 ON Cn_detalle.idempresa = Cn_cuentas.IdEmpresa 
		   AND Cn_detalle.cuenta = Cn_cuentas.Cuenta 
		   AND Cn_detalle.ejercicio = Cn_cuentas.Ejercicio
		 WHERE 
		  Cn_detalle.idasiento = ?m.idasiento
		  order by IdDetalle
		
		
		ENDTEXT
		= SQLEXEC(HNDCONN, CMDSQL, 'vxdetalle'+THIS.SUFIJOTABLA)
		SELECT ('vxDetalle'+THIS.SUFIJOTABLA)
		RESULT = CURSORSETPROP("KeyFieldList", 'IdDetalle')
		RESULT = CURSORSETPROP("UpdatableFieldList", "idempresa, idasiento, ejercicio, cuenta, debe, haber, moneda_extr, cotiza, detalle, centro, documento, idconcepto")
		RESULT = CURSORSETPROP("UpdateNameList", "IdDetalle dbo.cn_detalle.IdDetalle, idempresa dbo.cn_detalle.idempresa, idasiento dbo.cn_detalle.idasiento, ejercicio dbo.cn_detalle.ejercicio, "+" cuenta dbo.cn_detalle.cuenta, debe dbo.cn_detalle.debe, haber dbo.cn_detalle.haber, moneda_extr dbo.cn_detalle.moneda_extr, cotiza dbo.cn_detalle.cotiza, detalle dbo.cn_detalle.detalle, "+" centro dbo.cn_detalle.centro, documento dbo.cn_detalle.documento, idconcepto dbo.cn_detalle.idconcepto")
		RESULT = CURSORSETPROP("Tables", 'dbo.cn_detalle')
		RESULT = CURSORSETPROP("SendUpdates", .T.)
		= CURSORSETPROP('BUFFERING', 5, 'vxDetalle'+THIS.SUFIJOTABLA)
		= CURSORSETPROP('BUFFERING', 5, 'vxAsientos'+THIS.SUFIJOTABLA)
		this.enlazardatos()
		
		
	ENDPROC

	PROCEDURE UIEnable
		LPARAMETERS LENABLE
		IF LENABLE
		THIS.REFRESH()
		ENDIF
	ENDPROC

	PROCEDURE validar
		this.totales.Refresh()
		IF This.totales.TotalDebe.Value<>This.totales.TotalHaber.Value
			MESSAGEBOX("El asiento no balancea. Verifique y vuelva a intentarlo",64,"Futura Software")
			RETURN .f.
		ENDIF
			
		
		
	ENDPROC

	PROCEDURE Bifurcar.Click
		LOCAL LCALIAS
		LCALIAS = SUBSTR(THIS.PARENT.CONTROLSOURCE, 1, AT('.', THIS.PARENT.CONTROLSOURCE, 1)-1)
		REPLACE (THIS.PARENT.CONTROLSOURCE) WITH 0 IN (LCALIAS)
		THIS.PARENT.REFRESH()
		
	ENDPROC

	PROCEDURE cmdDetalleProvision.Click
		Do Form "cn_Asientos" WITH EVALUATE('vxAsientos'+RTRIM(THIS.Parent.SUFIJOTABLA)+'.IdAsiento')
		
		
	ENDPROC

	PROCEDURE Enlazar.Click
		THIS.PARENT.TXTNÚMERO.COMMENT = THIS.PARENT.TXTNÚMERO.CONTROLSOURCE
		THIS.PARENT.TXTNÚMERO.CONTROLSOURCE = ""
		THIS.PARENT.TXTNÚMERO.ENABLED = .T.
		THIS.PARENT.TXTNÚMERO.SETFOCUS()
		
	ENDPROC

	PROCEDURE grdVdetalle.Cuenta.Campo_clave1.GotFocus
		DODEFAULT()
		WAIT CLEAR
	ENDPROC

	PROCEDURE grdVdetalle.Debe.Text1.GotFocus
		THIS.TAG = STR(THIS.VALUE)
	ENDPROC

	PROCEDURE grdVdetalle.Debe.Text1.LostFocus
		IF THIS.TAG<>STR(THIS.VALUE)
		THIS.PARENT.PARENT.PARENT.TOTALES.REFRESH()
		ENDIF
	ENDPROC

	PROCEDURE grdVdetalle.Debe.Text1.When
		RETURN EVALUATE('vxDetalle'+THIS.PARENT.PARENT.PARENT.SUFIJOTABLA+'.haber ')=0
	ENDPROC

	PROCEDURE grdVdetalle.Haber.Text1.GotFocus
		THIS.TAG = STR(THIS.VALUE)
	ENDPROC

	PROCEDURE grdVdetalle.Haber.Text1.LostFocus
		IF THIS.TAG<>STR(THIS.VALUE)
		THIS.PARENT.PARENT.PARENT.TOTALES.REFRESH()
		ENDIF
	ENDPROC

	PROCEDURE grdVdetalle.Haber.Text1.When
		RETURN EVALUATE('vxDetalle'+THIS.PARENT.PARENT.PARENT.SUFIJOTABLA+'.Debe ')=0
	ENDPROC

	PROCEDURE grdVdetalle.Refresh
		DODEFAULT()
		THIS.DESCRIPCION.ENABLED = .F.
		*THIS.SUMCOLUMN()
		THIS.PARENT.TOTALES.REFRESH()
	ENDPROC

	PROCEDURE totales.Refresh
		THIS.PARENT.GRDVDETALLE.SUMCOLUMN()
		THIS.TOTALDEBE.VALUE = THIS.PARENT.GRDVDETALLE.TOTALES(1)
		THIS.TOTALHABER.VALUE = THIS.PARENT.GRDVDETALLE.TOTALES(2)
		THIS.SALDO.VALUE = THIS.TOTALDEBE.VALUE-THIS.TOTALHABER.VALUE
	ENDPROC

	PROCEDURE totales.Saldo.Refresh
		DO CASE
		CASE THIS.VALUE>0
		THIS.DISABLEDFORECOLOR = RGB(0, 128, 0)
		CASE THIS.VALUE<0
		THIS.DISABLEDFORECOLOR = RGB(255, 0, 0)
		CASE THIS.VALUE=0
		THIS.DISABLEDFORECOLOR = RGB(0, 0, 0)
		ENDCASE
	ENDPROC

	PROCEDURE totales.SaldoCuenta.ProgrammaticChange
		LOCAL CUENTA, SALDO
		IF  .NOT. EMPTY(THIS.VALUE)
		M.CUENTA = THIS.VALUE
		TEXT TO CMDSQL TEXTMERGE NOSHOW
			     Exec cn_saldoCuentas ?<<"vxDetalle" + RTRIM(This.parent.parent.sufijotabla)>>.Cuenta, ?oApp.Empresa, ?oApp.Ejercicio
		ENDTEXT
		IF SQL(CMDSQL, 'saldo')>0
		M.SALDO = SALDO.DEBE-SALDO.HABER
		ELSE
		M.SALDO = 0
		ENDIF
		M.SALDO = TRANSFORM(M.SALDO, '999,999,999,999')
		WAIT WINDOW NOWAIT "Saldo actual : "+M.SALDO
		ENDIF
	ENDPROC

	PROCEDURE Tscommandbutton1.Click
		LOCAL M.IDASIENTO
		M.IDASIENTO = 0
		IF  .NOT. EMPTY(NVL(EVALUATE(THISFORM.ASIENTORECORDSOURCE), 0))
		M.IDASIENTO = STR(EVALUATE(THISFORM.ASIENTORECORDSOURCE), 10, 0)
		ENDIF
		IF  .NOT. EMPTY(M.IDASIENTO)
		IF MESSAGEBOX('Esta seguro de que desea eliminar el asiento de esta operación?', 0292, "Futura Software")=6
		IF THISFORM.RUNSQL("Delete cn_Asientos where idAsiento = "+M.IDASIENTO, 'cn_Borrar')>0
		THIS.PARENT.BIFURCAR.CLICK()
		ENDIF
		ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Tscommandbutton1.Refresh
		this.Enabled=!thisform.editmode
		
	ENDPROC

	PROCEDURE Tscommandbutton2.Click
		Local M.IDPLANTILLA, M.CRETORNO, M.IMPORTE, M.VALOR
		*SET STEP ON
		lcAlias=ALIAS()
		*lnRecno=RECNO()
		SELECT ('vxDetalle'+RTRIM(THIS.Parent.sufijotabla))
			m.Importe=Debe+Haber
		SELECT (lcAlias)	
		*ELSE
		*	m.Importe=0
		*ENDIF
		
			Do Form "cn_PlantillaAsiento" To M.CRETORNO WITH  m.Importe
		
		If  .Not. Empty(M.CRETORNO)
			m.IDPLANTILLA = Substr(M.CRETORNO, 1, At(",", M.CRETORNO)-1)
			m.IMPORTE = Val(Substr(M.CRETORNO, At(",", M.CRETORNO)+1))
			CMDSQL = "Select a.*,b.Descripción From cn_planDet a inner join cn_Cuentas b on a.Cuenta = b.Cuenta "+" where b.IdEmpresa = ?oApp.Empresa and b.Ejercicio = ?oApp.Ejercicio and IdPlantilla="+M.IDPLANTILLA
			If Sql(CMDSQL, "cPlantilla")>0
				If Reccount("cPlantilla")>0
					*This.SetFocus()
					This.parent.grdVdetalle.SetFocus()
					IF This.parent.grdVdetalle.ActiveRow>0
						DELETE
					ENDIF 	
					
					Select CPLANTILLA
					Scan
						If CPLANTILLA.TIPOAPLICACION="P"
							m.VALOR = IMPORTE*CPLANTILLA.VALOR/100
						Else
							If Empty(Nvl(CPLANTILLA.VALOR, 0))
								m.VALOR = M.IMPORTE
							Else
								m.VALOR = CPLANTILLA.VALOR
							Endif
						Endif
						Select ("vxDetalle"+RTRIM(THIS.parent.SUFIJOTABLA))
						Thisform.AGREGARITEM()
						If CPLANTILLA.TIPOCUENTA='D'
							Replace CUENTA With CPLANTILLA.CUENTA, DESCRIPCIÓN With CPLANTILLA.DESCRIPCIÓN, DEBE With M.VALOR, Centro WITH NVL(CPLANTILLA.Centro,'') In ("vxDetalle"+RTRIM(THIS.parent.SUFIJOTABLA))
						Else
							Replace CUENTA With CPLANTILLA.CUENTA, DESCRIPCIÓN With CPLANTILLA.DESCRIPCIÓN, HABER With M.VALOR,Centro WITH NVL(CPLANTILLA.Centro,'') In ("vxDetalle"+RTRIM(THIS.parent.SUFIJOTABLA))
						Endif
						Select CPLANTILLA
					Endscan
				Endif
			Endif
		ENDIF
		
	ENDPROC

	PROCEDURE Tscommandbutton2.Refresh
		DODEFAULT()
		*THIS.ENABLED = THISFORM.ESNUEVO
	ENDPROC

	PROCEDURE txtFecha.LostFocus
		IF THIS.TAG<>DTOC(THIS.VALUE)
		THIS.PARENT.COTIZA.VALUE = COTIZACION('U$S', 'V', THIS.VALUE)
		ENDIF
	ENDPROC

	PROCEDURE txtNúmero.Init
		DODEFAULT()
		IF EMPTY(THIS.CONTROLSOURCE)
		THIS.CONTROLSOURCE = THIS.PARENT.CONTROLSOURCE
		ENDIF
	ENDPROC

	PROCEDURE txtNúmero.LostFocus
		IF  .NOT. EMPTY(THIS.VALUE)
		THIS.ENABLED = .F.
		THIS.PARENT.REFRESH()
		ENDIF
		IF EMPTY(THIS.CONTROLSOURCE)
		THIS.CONTROLSOURCE = THIS.COMMENT
		ENDIF
	ENDPROC

	PROCEDURE txtNúmero.Valid
		IF  .NOT. EMPTY(THIS.VALUE)
		IF THISFORM.RUNSQL("Select IdAsiento from cn_Asientos where IdEmpresa=?oApp.Empresa and Ejercicio = ?oApp.Ejercicio and Número = "+STR(THIS.VALUE), 'cAsiento')>0
		IF RECCOUNT('cAsiento')>0
		REPLACE (THIS.PARENT.CONTROLSOURCE) WITH CASIENTO.IDASIENTO IN (THISFORM.TABLA1)
		ELSE
		MESSAGEBOX('No se encuentra el Asiento.', 64, "Futura Software")
		RETURN 0
		ENDIF
		ENDIF
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS busqueda AS form 		&& Formulario de busqueda para ayuda.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="buscar" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: archivo		&& Nombre del archivo para origen de los datos
		*p: campos		&& Lista de campos a seleccionar
		*p: devuelve		&& Nombre del campo a retornar
		*p: orden		&& Nombre de campo por el cual se va a ordenar
	*</DefinedPropArrayMethod>

	archivo = cta_cte		&& Nombre del archivo para origen de los datos
	AutoCenter = .T.
	campos = descripcion,idcta_cte		&& Lista de campos a seleccionar
	Caption = "Búsqueda"
	devuelve = idcta_cte		&& Nombre del campo a retornar
	DoCreate = .T.
	Height = 128
	LockScreen = .F.
	MaxButton = .F.
	MinButton = .F.
	Name = "busqueda"
	orden = descripcion		&& Nombre de campo por el cual se va a ordenar
	Width = 399
	WindowType = 1

	ADD OBJECT 'buscar' AS tsifcombo WITH ;
		Height = 21, ;
		Left = 24, ;
		Name = "buscar", ;
		RowSource = "", ;
		Top = 24, ;
		Width = 360
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Caption = "\<Aceptar", ;
		Default = .T., ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 192, ;
		Name = "Command1", ;
		Top = 84, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancelar", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 276, ;
		Name = "Command2", ;
		Top = 84, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .F., ;
		Caption = "1  \<Escriba las primeras letras de la palabra que está buscando.", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 12, ;
		Name = "Label1", ;
		Top = 12, ;
		Width = 375
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .F., ;
		Caption = '2  \<Haga click en "Aceptar" cuando termine.', ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 12, ;
		Name = "Label2", ;
		Top = 56, ;
		Width = 375
		*< END OBJECT: BaseClass="label" />

ENDDEFINE

DEFINE CLASS caja AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lista" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="etiq" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="texto" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="texto2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmdcal1" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*p: cambio
		*p: nombvar		&& Nombre de la variable asignada.
		*p: nombvar2		&& Si se utiliza contiene el nombre de la segunda variable asignada.
		*p: requery		&& Indica si se ejecuta el evento requery del control cuando recibe el enfoque.
	*</DefinedPropArrayMethod>

	BackStyle = 1
	cambio = .F.
	Height = 37
	Name = "caja"
	nombvar = 		&& Nombre de la variable asignada.
	nombvar2 = 		&& Si se utiliza contiene el nombre de la segunda variable asignada.
	SpecialEffect = 0
	Width = 269

	ADD OBJECT 'Cmdcal1' AS cmdcal WITH ;
		Left = 243, ;
		Name = "Cmdcal1", ;
		Top = 13, ;
		txtnombre = texto, ;
		Visible = .F.
		*< END OBJECT: ClassLib="lmcal.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'etiq' AS tslabel WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Etiqueta", ;
		FontBold = .F., ;
		Height = 13, ;
		Left = 6, ;
		Name = "etiq", ;
		Top = 0, ;
		Width = 259
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'Lista' AS tscombobox WITH ;
		BoundColumn = 2, ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "250,0", ;
		editable = .F., ;
		FontSize = 8, ;
		Height = 20, ;
		Left = 3, ;
		Name = "Lista", ;
		Style = 2, ;
		Top = 14, ;
		Visible = .F., ;
		Width = 264
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="combobox" />

	ADD OBJECT 'texto' AS tstextbox WITH ;
		Alignment = 0, ;
		BackStyle = 1, ;
		Height = 20, ;
		Left = 3, ;
		Name = "texto", ;
		Style = 0, ;
		Top = 14, ;
		Width = 262
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />

	ADD OBJECT 'texto2' AS tstextbox WITH ;
		Alignment = 0, ;
		BackStyle = 1, ;
		Height = 20, ;
		Left = 150, ;
		Name = "texto2", ;
		Style = 0, ;
		Top = 14, ;
		Visible = .F., ;
		Width = 116
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="textbox" />
	
	PROCEDURE GotFocus
		IF THIS.REQUERY
			IF THIS.LISTA.VISIBLE
				THIS.LISTA.REQUERY()
			ENDIF
		ENDIF
		*This.cmdcal1.Visible= !THIS.LISTA.VISIBLE
		
	ENDPROC

	PROCEDURE LostFocus
		If This.Visible=.F.
			Return
		Endif
		
		VARIABLE = This.NOMBVAR
		VARIABLE2 = This.NOMBVAR2
		If This.TEXTO.Visible
			If Type('THIS.texto.VALUE')='C'
				&VARIABLE=Alltrim(This.TEXTO.Value)
			Else
				&VARIABLE=This.TEXTO.Value
			Endif
			If This.TEXTO2.Visible
				If Type('THIS.texto2.VALUE')='C'
					&VARIABLE2=Alltrim(This.TEXTO2.Value)
				Else
					&VARIABLE2=This.TEXTO2.Value
				Endif
			Endif
		Else
			If Type('THIS.Lista.VALUE')='C'
				&VARIABLE=Alltrim(This.LISTA.Value)
			Else
				&VARIABLE=This.LISTA.Value
			Endif
		Endif
	ENDPROC

	PROCEDURE Cmdcal1.Refresh
		IF varTYPE(this.Parent.texto.Value)='D'
			This.Visible= .T.
			This.Parent.texto.Width=240
		ELSE
			This.Visible= .F.
		ENDIF
	ENDPROC

	PROCEDURE texto.Init
		DODEFAULT()
		IF varTYPE(this.Value)='D'
			This.Parent.cmdcal1.Visible= .T.
			This.Width=240
		ELSE
			This.Parent.cmdcal1.Visible= .F.
		ENDIF
				
	ENDPROC

ENDDEFINE

DEFINE CLASS campo_busca AS tstextbox OF "tsbase.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: busquedaavanzada
		*p: condicionbusqueda		&& Condicion adicional que debe cumplir la busqueda.
		*p: controlsourceoriginal
	*</DefinedPropArrayMethod>

	PROTECTED controlsourceoriginal
	BorderColor = 250,170,5
	condicionbusqueda = 		&& Condicion adicional que debe cumplir la busqueda.
	controlsourceoriginal = 
	Name = "campo_busca"
	SpecialEffect = 1
	Style = 0
	Themes = .F.
	
	PROCEDURE GotFocus
		DODEFAULT()
		IF  .NOT. EMPTY(THIS.VAL_POS)
		THIS.VALUE = THIS.VAL_POS
		THIS.VAL_POS = ''
		ENDIF
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		IF  .NOT. EMPTY(THIS.CONTROLSOURCE)
		THIS.CONTROLSOURCEORIGINAL = THIS.CONTROLSOURCE
		THIS.CONTROLSOURCE = ''
		ENDIF
	ENDPROC

	PROCEDURE LostFocus
		If Thisform.EDITMODE .Or. Empty(This.Value)
			Return
		Endif
		Local CVALUE
		If Lastkey()=-4
			This.Comment = 'A'
		Endif
		Do Case
		Case Type('this.value')="C"
			CVALUE = Iif(Isnull(This.Value), '', This.Value)
		Case Type('this.value')="N" .Or. Type('this.value')="Y"
			CVALUE = Str(Iif(Isnull(This.Value), 0, This.Value))
		Case Type('this.value')="D"
			CVALUE = Dtoc(Iif(Isnull(This.Value), {}, This.Value))
		ENDCASE
		
		If This.Tag<>CVALUE .And. Empty(This.Comment)
			Local FRM As Form, LCCAMPO
			Set Classlib To buscar Additive
			LCCAMPO = Substr(This.CONTROLSOURCEORIGINAL, At('.', This.CONTROLSOURCEORIGINAL)+1)
			FRM = Createobject('SearchForm', Thisform.TABLACONSULTA, LCCAMPO, This.Value)
			CSQL = FRM.FULLSQL
			FRM.Release()
			Thisform.CONSULTAR(CSQL)
			Thisform.REFRESHFORM()
			If  .Not. Empty(Thisform.CTOOLBAR) .And. Type("oApp.oToolbar")=="O"
				OAPP.OTOOLBAR.Refresh()
			Endif
		Endif
	ENDPROC

	PROCEDURE Refresh
		IF THISFORM.EDITMODE
		THIS.CONTROLSOURCE = THIS.CONTROLSOURCEORIGINAL
		ELSE
		THIS.CONTROLSOURCE = ''
		ENDIF
		IF  .NOT. EMPTY(THIS.CONTROLSOURCEORIGINAL)
		THIS.VALUE = EVALUATE(THIS.CONTROLSOURCEORIGINAL)
		ENDIF
		DODEFAULT()
		THIS.ENABLED = .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS campo_clave AS tstextbox OF "tsbase.vcx" 		&& Permite cargar campos para claves principales y validar.
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *condicionvalor_access
		*m: *novalido_event		&& Ocurre cuando el valid() devuelve falso
		*m: *valido_evento		&& Ocurre cuando el valid() devuelve verdadero.
		*p: actualizar		&& Indica si actualiza el control dependiente.
		*p: condicionextra		&& (Validar) Una condicion adicional que debe cumplir el registro a ser devuelto.
		*p: condicionvalor
		*p: condicion_en_edicion		&& (Validar) Una condicion adicional que debe cumplir el registro a ser devuelto cuando esta en modo de edicion.
		*p: copiarcampos		&& Indica los campos a ser copiados para luego pegar.
		*p: indice		&& (Validar) Indice de la tabla en donde va a buscar.
		*p: indice1		&& Indice alternativo en donde se busca cuando utiliza el prefijo.
		*p: mensajeerror		&& (Validar) Mensaje que se va a mostrar si no se encuentra.
		*p: objeto		&& (Validar) El nombre del objeto que va a actualizar si encuentra.
		*p: objeto2		&& (Validar) El nombre del segundo objeto que va a actualizar si encuentra.
		*p: objeto3		&& (Validar) El nombre del tercer objeto que va a actualizar si encuentra.
		*p: objeto4		&& (Validar) El nombre del cuarto objeto que va a actualizar si encuentra.
		*p: objeto5		&& (Validar) El nombre del quinto objeto que va a actualizar si encuentra.
		*p: origen		&& Indica si la consulta se realiza en datos locales (L) o remotos (R)
		*p: pegarcampos		&& (Validar) Indica los campos a pegar desde la validacion.
		*p: prefijo		&& Simbolo que se utiliza para validar sobre el indice alternativo.
		*p: resulrepe		&& Para poder buscar en caso de que devuelva valor repetido
		*p: retorna		&& (validar) Indica el valor que va a retornar si encuentra.
		*p: retorna2		&& (validar) Indica el segundo valor que va a retornar si encuentra.
		*p: retorna3
		*p: retorna4		&& (validar) Indica el cuarto valor que va a retornar si encuentra.
		*p: retorna5		&& (validar) Indica el quinto valor que va a retornar si encuentra.
		*p: tabla		&& (Validar) Tabla en donde va a buscar.
	*</DefinedPropArrayMethod>

	actualizar = .T.		&& Indica si actualiza el control dependiente.
	BackStyle = 1
	BorderStyle = 1
	condicionextra = 		&& (Validar) Una condicion adicional que debe cumplir el registro a ser devuelto.
	condicion_en_edicion = 		&& (Validar) Una condicion adicional que debe cumplir el registro a ser devuelto cuando esta en modo de edicion.
	ControlSource = ""
	copiarcampos = 		&& Indica los campos a ser copiados para luego pegar.
	Format = ""
	Height = 23
	indice = 		&& (Validar) Indice de la tabla en donde va a buscar.
	indice1 = 		&& Indice alternativo en donde se busca cuando utiliza el prefijo.
	inputmaskdinamico = 
	mensajeerror = No se encuentra el valor.		&& (Validar) Mensaje que se va a mostrar si no se encuentra.
	Name = "campo_clave"
	objeto = 		&& (Validar) El nombre del objeto que va a actualizar si encuentra.
	objeto2 = 		&& (Validar) El nombre del segundo objeto que va a actualizar si encuentra.
	objeto3 = 		&& (Validar) El nombre del tercer objeto que va a actualizar si encuentra.
	objeto4 = 		&& (Validar) El nombre del cuarto objeto que va a actualizar si encuentra.
	objeto5 = 		&& (Validar) El nombre del quinto objeto que va a actualizar si encuentra.
	origen = L		&& Indica si la consulta se realiza en datos locales (L) o remotos (R)
	pegarcampos = 		&& (Validar) Indica los campos a pegar desde la validacion.
	prefijo = *		&& Simbolo que se utiliza para validar sobre el indice alternativo.
	retorna = 		&& (validar) Indica el valor que va a retornar si encuentra.
	retorna2 = 		&& (validar) Indica el segundo valor que va a retornar si encuentra.
	retorna3 = 
	retorna4 = 		&& (validar) Indica el cuarto valor que va a retornar si encuentra.
	retorna5 = 		&& (validar) Indica el quinto valor que va a retornar si encuentra.
	SelectedBackColor = 0,128,255
	SelectedForeColor = 255,255,255
	SelectOnEntry = .T.
	TabIndex = 1
	Width = 100
	
	PROCEDURE condicionvalor_access
		Local LCPARAMETRO
		If  .Not. Empty(This.CODICIONEXTRA)
			LCPARAMETRO = Evaluate(This.CONDICIONVALOR)
		Else
			LCPARAMETRO = ' '
		Endif
		
		Return LCPARAMETRO
		
	ENDPROC

	PROCEDURE GotFocus
		Do Case
		Case Type('this.value')="C"
			This.Tag = Iif(Isnull(This.Value), '', This.Value)
		Case Type('this.value')="N" .Or. Type('this.value')="Y"
			This.Tag = Str(Iif(Isnull(This.Value), 0, This.Value))
		Case Type('this.value')="D"
			This.Tag = Dtoc(Iif(Isnull(This.Value), {}, This.Value))
		Endcase
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		IF THIS.PARENT.BASECLASS='Column'
		THIS.BORDERSTYLE = 0
		THIS.SPECIALEFFECT = 1
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS NKEYCODE, NSHIFTALTCTRL
		TSTEXTBOX::KEYPRESS()
	ENDPROC

	PROCEDURE LostFocus
		
		if EMPTY(THIS.VALUE) AND !EMPTY(this.Objeto) AND THIS.ACTUALIZAR
		        cObjeto = this.Objeto
				&cObjeto..value=''
				&cObjeto..refresh()
		
				IF !EMPTY(this.objeto2)
			        cObjeto = this.Objeto2
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF
				IF !EMPTY(this.objeto3)
			        cObjeto = this.Objeto3
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF
			
			***************  08/junio/06
			IF !EMPTY(this.objeto4)
			        cObjeto = this.Objeto4
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF	
		
			**************
		
		endif	
		
		
		
		RETURN
		
		*******Codigo Anterior****
		
		This.CAMBIO = .F.
		If Empty(This.Value) .And.  .Not. Empty(This.OBJETO) .And. This.ACTUALIZAR
			COBJETO = This.OBJETO
			&COBJETO..Value=''
			&COBJETO..Refresh()
		Endif
	ENDPROC

	PROCEDURE novalido_event		&& Ocurre cuando el valid() devuelve falso
	ENDPROC

	PROCEDURE Refresh
		dodefault()
				
		
		if this.actualizar AND !THISFORM.EDITMODE
			this.valid()
		endif	
		
		if (EMPTY(THIS.VALUE) OR ISNULL(this.Value)) AND !EMPTY(this.Objeto) AND THIS.ACTUALIZAR
		        cObjeto = this.Objeto
				&cObjeto..value=''
				&cObjeto..refresh()
		
				IF !EMPTY(this.objeto2)
			        cObjeto = this.Objeto2
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF
				IF !EMPTY(this.objeto3)
			        cObjeto = this.Objeto3
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF
					
				**** 08/junio/06 ***
				IF !EMPTY(this.objeto4)
			        cObjeto = this.Objeto4
					&cObjeto..value=''
					&cObjeto..refresh()
				ENDIF
				*********************	
				
		endif	
	ENDPROC

	PROCEDURE Valid
		local ctabla,cindice,;
			cvalor,cretorna,;
			OldAlias,xAux,;
			cCondicion, cCodigo,;
			lcTag, lcSQL,lnHndConn, LCALIAS, LCPEGARCAMPOS
		
		**07-06-2008 
		**Tener en cuenta cuand no tiene controlsource o cuando no es una tabla su controlsource
		
		
		***Para que no pueda usar la barra de herramienta cuando el valid retorna .f.
		***11/11/2003	11:06		VG
		thisform.valido=.t.
		thisform.mensajeNoValido = ''	
		
		lnResultado=1
			
		*(1) Modificado para que pueda validar solamente sin traer ningun valor	18/10/2001 18:14 (VG)
		**DEBUGOUT IIF(EMPTY(this.Comment),"Comment Vacio","Comment " + this.Comment)
		LOCAL cCampo
		cCampo = this.ControlSource
		
		
		IF !EMPTY(cCampo) AND USED(SUBSTR(cCampo ,AT(".",cCampo )+1)) AND ALLTRIM(STR(GETFLDSTATE(SUBSTR(cCampo ,AT(".",cCampo )+1),SUBSTR(cCampo ,1,AT(".",cCampo )-1)))) $ "13" ;
			AND NOT THIS.ACTualizar
			RETURN 1
		ENDIF
		
		DEBUGOUT THIS.Tag
		DEBUGOUT THIS.Text
		IF ALLTRIM(THIS.Tag) = ALLTRIM(THIS.Text)
			RETURN 1
		ENDIF
		
		
		
		
		IF THIS.validar = .F. && Para obligarle a validar
			IF TYPE('this.value')="C"
		**		IF (EMPTY(THIS.VALUE) OR THIS.TAG=THIS.VALUE OR ISNULL(THIS.VALUE))  **** VG 09-11-2004 para que valide siempre
				IF (EMPTY(THIS.VALUE) OR ISNULL(THIS.VALUE)) 
					IF EMPTY(THIS.VALUE) OR ISNULL(THIS.VALUE)
					*	cObjeto = THIS.Objeto
					*	&cObjeto..VALUE=''
					*	&cObjeto..REFRESH()
					ENDIF
					RETURN 1
				ENDIF
			ELSE
		**		IF EMPTY(THIS.VALUE) OR THIS.TAG=STR(THIS.VALUE) OR ISNULL(THIS.VALUE)
				IF EMPTY(THIS.VALUE) OR ISNULL(THIS.VALUE)
					IF EMPTY(THIS.VALUE) OR ISNULL(THIS.VALUE)
					*	cObjeto = THIS.Objeto
					*	&cObjeto..VALUE=''
					*	&cObjeto..REFRESH()
					ENDIF
					RETURN 1
				ENDIF
			ENDIF
		ENDIF
		THIS.validar = .F.
		
		*go recno()
		
		
		if !empty(this.indice1) and left(this.value,1)=this.prefijo && Utilizo el prefijo
		
			cindice=this.indice1
			cvalor=substr(this.value,2)
		
		else
		
			cindice=this.indice
			cvalor=this.value
		
		endif
			
		ctabla=this.tabla
		cCodigo = this.indice
		
		
		if !empty(this.retorna)				&& (1)
			cretorna=this.retorna
		else
			cRetorna = "space(1)"
		endif		
		
		cObjeto=this.objeto
		
		cretorna2=this.retorna2
		cObjeto2=this.objeto2
		
		cretorna3=this.retorna3
		cObjeto3=this.objeto3
		
		***** 08/junio/06 ******
		cretorna4=this.retorna4
		cObjeto4=this.objeto4
		************************
		
		
		OldAlias=Alias()
		
		*!*	if !empty(this.CondicionExtra)
		*!*	*	cCondicion=this.CondicionExtra+this.CodicionValor
		cCondicion=this.CondicionExtra
		*!*	else
		*!*		cCondicion='.t.'
		*!*	endif		
		
		
		*** Modificado para que pueda ejecutar en Servidores Remotos	(VG) 03/12/2002 08:48
			lcSQL = 'Select '+;
				cCodigo +' as codigo,'+;
				cretorna +' as resultado '
		
		
		if ! empty(this.retorna2)
			lcSQL = lcSQL + ','+ cretorna2 +' as resultado2 '
		endif
		
		if ! empty(this.retorna3)
			lcSQL = lcSQL + ','+ cretorna3 +' as resultado3 '
		endif
		
		******* 08/junio/06***
		if ! empty(this.retorna4)
			lcSQL = lcSQL + ','+ cretorna4 +' as resultado4 '
		ENDIF
		**********************
		IF  .NOT. EMPTY(THIS.RETORNA5)
			LCSQL = LCSQL+','+CRETORNA5+' as resultado5 '
		ENDIF
		IF  .NOT. EMPTY(THIS.COPIARCAMPOS)
			LCSQL = LCSQL+','+THIS.COPIARCAMPOS
		ENDIF
		
		IF THISFORM.EDITMODE
			IF EMPTY(CCONDICION)
				CCONDICION = THIS.CONDICION_EN_EDICION
			ELSE
				IF  .NOT. EMPTY(THIS.CONDICION_EN_EDICION)
					CCONDICION = CCONDICION+" AND "+THIS.CONDICION_EN_EDICION
				ENDIF
			ENDIF
		ENDIF
		
		
		
		lcSQL = lcSQL +	' from ' + cTabla +;
				' where ' + cindice +' = ?cvalor '++IIF(EMPTY(CCONDICION), '', ' and '+CCONDICION)
		
		*!*		select &cCodigo as codigo, &cretorna as resultado, &cRetorna2 as resultado2 ;
		*!*		from &cTabla;
		*!*		where &cindice=cvalor and &cCondicion;
		*!*		into cursor xclave
		*endif
		
		
		*** Indica si es un Origen Remoto
		IF this.origen='R'
		
			lnHndConn = SQLCONNECT(oApp.Sistema)
			IF lnHndConn > 0
				IF SQLEXEC(lnHndConn,lcSQL,'xClave')<0
					thisform.Error()
				ENDIF
				SQLMORERESULTS(lnHndConn)
				SQLCANCEL(lnHndConn)
				SQLDISCONNECT(lnHndConn)
			ENDIF
			
		ELSE
			lcSQL = lcSQL + ' into cursor xClave'
			&lcSQL
		ENDIF
		
			
		
		
		if not empty(oldalias)
			select &OldAlias
		endif
		
		if RECCOUNT('xClave')>0
		
			if !empty(this.indice1) AND left(this.value,1)=this.prefijo && Utilizo el prefijo
				this.value = xclave.codigo
			endif
				
			if Empty(this.retorna)			&& (1)
				
				return 1
			endif	
			
			&cObjeto..value=xclave.resultado
		
			
			**Para no actualizar el 2º Objeto Si tiene ControlSource y no se modificó el campo Clave (VG 14/05/2002 16:25)
			** Ojo: funciona solamente para caracter y numerico
		
			if TYPE('THIS.VALUE') = 'C'
				lcTag = this.value
			else
				lcTag = str(this.value)
			endif
		
			DEBUGOUT "This.value en Validar:" + lctag
			DEBUGOUT "this.tag en Validar:" + this.Tag
						
			
		
			** Para no cargar objetos que tengan ControlSource si no está editando
			if !empty(this.objeto2)	;
				and (empty(&cObjeto2..ControlSource) or (thisform.editmode and lcTag <> this.tag))
				&cObjeto2..value=xclave.resultado2
			    &cObjeto2..refresh()			
			endif	
		
			if !empty(this.objeto3)	;
				and (empty(&cObjeto3..ControlSource) or (thisform.editmode and lcTag <> this.tag))
				&cObjeto3..value=xclave.resultado3
			    &cObjeto3..refresh()			
			endif	
			
			******	08/junio/06 ***
			if !empty(this.objeto4)	;
				and (empty(&cObjeto4..ControlSource) or (thisform.editmode and lcTag <> this.tag))
				&cObjeto4..value=xclave.resultado4
			    &cObjeto4..refresh()			
			endif	
			***********************
			IF  .NOT. EMPTY(THIS.OBJETO5)
				IF  (THISFORM.EDITMODE) AND !EMPTY(THIS.RETORNA5)   AND (&COBJETO5..VALUE <> XCLAVE.RESULTADO5 ) OR THIS.RESULREPE=.T.
					&COBJETO5..VALUE=XCLAVE.RESULTADO5
					&COBJETO5..REFRESH()
				ENDIF
			ENDIF
			IF THISFORM.EDITMODE .AND.  .NOT. EMPTY(THIS.PEGARCAMPOS)
				LCPEGARCAMPOS = THIS.PEGARCAMPOS
				SELECT XCLAVE
				SCATTER MEMVAR MEMO FIELDS &LCPEGARCAMPOS
				LCALIAS = SUBSTR(THIS.CONTROLSOURCE, 1, AT(".", THIS.CONTROLSOURCE)-1)
				IF  .NOT. EMPTY(LCALIAS)
					SELECT (LCALIAS)
				ENDIF
				GATHER MEMVAR MEMO FIELDS &LCPEGARCAMPOS
			ENDIF
			THIS.RETAYUDA = '0'	
			
		*	go recno(ctabla) in &ctabla
			&cObjeto..refresh()
		
			if used('xclave')
				use in xclave
			endif
			return 1
		else
			if used('xclave')
				use in xclave
			endif
			Messagebox(this.mensajeError,64,TASTRADE_LOC)
			THIS.NOVALIDO_EVENT()
			***Para que no pueda usar la barra de herramienta cuando el valid retorna .f.
			***11/11/2003	11:06		VG
			thisform.valido=.f.
			thisform.mensajeNoValido=this.mensajeerror
			return 0
		endif		
		
		
		********************
		RETURN
		********************
		* Codigo Anterior
		********************
		
		LOCAL CTABLA, CINDICE, CVALOR, CRETORNA, OLDALIAS, XAUX, CCONDICION, CCODIGO, LCTAG, LCSQL, LNHNDCONN, LCALIAS, LCPEGARCAMPOS
		THISFORM.VALIDO = .T.
		THISFORM.MENSAJENOVALIDO = ''
		
		*this.actualizar=.t.
		
		IF  (.NOT. THIS.CAMBIO) .AND. THISFORM.EDITMODE
			this.actualizar=.f.
			RETURN 1
		ENDIF
		
		DEBUGOUT this.ControlSource
		IF THIS.CAMBIO 
			IF TYPE('this.value')="C"
				IF THIS.TAG=THIS.VALUE
					RETURN 1
				ENDIF
			ELSE
				IF THIS.TAG=STR(THIS.VALUE)
					RETURN 1
				ENDIF
			ENDIF
		ENDIF
		
		DEBUGOUT "Ingreso2"
		COBJETO = THIS.OBJETO
		CRETORNA2 = THIS.RETORNA2
		COBJETO2 = THIS.OBJETO2
		CRETORNA3 = THIS.RETORNA3
		COBJETO3 = THIS.OBJETO3
		CRETORNA4 = THIS.RETORNA4
		COBJETO4 = THIS.OBJETO4
		CRETORNA5 = THIS.RETORNA5
		COBJETO5 = THIS.OBJETO5
		OLDALIAS = ALIAS()
		CCONDICION = THIS.CONDICIONEXTRA
		*IF THIS.VALIDAR=.F.
		*IF THIS.CAMBIO 
		*!*		IF TYPE('this.value')="C"
		*!*			IF EMPTY(THIS.VALUE) .OR. ISNULL(THIS.VALUE)
		*!*				RETURN 1
		*!*				
		*!*			ENDIF
		*!*		ELSE
				IF EMPTY(THIS.VALUE) OR ISNULL(THIS.VALUE)
					DEBUGOUT EMPTY(THIS.VALUE)
					DEBUGOUT ISNULL(THIS.VALUE)
					DEBUGOUT this.Value
					DEBUGOUT "Salir"
					&COBJETO..VALUE=""
					&COBJETO..REFRESH()
					RETURN 1
					
				ENDIF
		*	ENDIF
		*ENDIF
		
		DEBUGOUT "Ingreso3"
		*THIS.VALIDAR = .F.
		
		CCADENAERROR = ''
		IF EMPTY(THIS.INDICE) .OR. EMPTY(THIS.TABLA)
			CCADENAERROR = 'Debe indicar el valor a las propiedades: Indice y Tabla del Campo Clave'
			ERROR CCADENAERROR
			RETURN 0
		ENDIF
		IF  .NOT. EMPTY(THIS.INDICE1) .AND. LEFT(THIS.VALUE, 1)=THIS.PREFIJO
			CINDICE = THIS.INDICE1
			CVALOR = SUBSTR(THIS.VALUE, 2)
		ELSE
			CINDICE = THIS.INDICE
			CVALOR = THIS.VALUE
		ENDIF
		
		CTABLA = THIS.TABLA
		CCODIGO = THIS.INDICE
		IF  .NOT. EMPTY(THIS.RETORNA)
			CRETORNA = THIS.RETORNA
		ELSE
			CRETORNA = "space(1)"
		ENDIF
		
		IF THISFORM.EDITMODE
			IF EMPTY(CCONDICION)
				CCONDICION = THIS.CONDICION_EN_EDICION
			ELSE
				IF  .NOT. EMPTY(THIS.CONDICION_EN_EDICION)
					CCONDICION = CCONDICION+" AND "+THIS.CONDICION_EN_EDICION
				ENDIF
			ENDIF
		ENDIF
		
		LCSQL = 'Select '+CCODIGO+' as codigo,'+CRETORNA+' as resultado '
		IF  .NOT. EMPTY(THIS.RETORNA2)
			LCSQL = LCSQL+','+CRETORNA2+' as resultado2 '
		ENDIF
		IF  .NOT. EMPTY(THIS.RETORNA3)
			LCSQL = LCSQL+','+CRETORNA3+' as resultado3 '
		ENDIF
		IF  .NOT. EMPTY(THIS.RETORNA4)
			LCSQL = LCSQL+','+CRETORNA4+' as resultado4 '
		ENDIF
		IF  .NOT. EMPTY(THIS.RETORNA5)
			LCSQL = LCSQL+','+CRETORNA5+' as resultado5 '
		ENDIF
		IF  .NOT. EMPTY(THIS.COPIARCAMPOS)
			LCSQL = LCSQL+','+THIS.COPIARCAMPOS
		ENDIF
		LCSQL = LCSQL+' from '+CTABLA+' where '+CINDICE+' = ?cvalor '+IIF(EMPTY(CCONDICION), '', ' and '+CCONDICION)
		IF THIS.ORIGEN='R'
			LNHNDCONN = SQLCONNECT(OAPP.SISTEMA)
			IF LNHNDCONN>0
				IF SQLEXEC(LNHNDCONN, LCSQL, 'xClave')<0
					THISFORM.ERROR()
				ENDIF
				SQLMORERESULTS(LNHNDCONN)
				SQLCANCEL(LNHNDCONN)
				SQLDISCONNECT(LNHNDCONN)
			ENDIF
		ELSE
			LCSQL = LCSQL+' into cursor xClave'
			&LCSQL
		ENDIF
		IF  .NOT. EMPTY(OLDALIAS)
			SELECT &OLDALIAS
		ENDIF
		
		DEBUGOUT "Buscando"
		
		IF RECCOUNT('xClave')>0
			IF  .NOT. EMPTY(THIS.INDICE1) .AND. LEFT(THIS.VALUE, 1)=THIS.PREFIJO
				THIS.VALUE = XCLAVE.CODIGO
			ENDIF
			IF EMPTY(THIS.RETORNA)
				RETURN 1
			ENDIF
		
		*!*		IF &COBJETO..VALUE = XCLAVE.RESULTADO AND THIS.RESULREPE=.F.
		*!*			RETURN 1
		*!*		ENDIF
			
			&COBJETO..VALUE=XCLAVE.RESULTADO
			&COBJETO..REFRESH()
			IF TYPE('THIS.VALUE')='C'
				LCTAG = THIS.VALUE
			ELSE
				LCTAG = STR(THIS.VALUE)
			ENDIF
			IF  .NOT. EMPTY(THIS.OBJETO2)
				IF  THISFORM.EDITMODE AND !EMPTY(THIS.RETORNA2) AND (&COBJETO2..VALUE <> XCLAVE.RESULTADO2 ) OR THIS.RESULREPE=.T.
					&COBJETO2..VALUE=XCLAVE.RESULTADO2
					&COBJETO2..REFRESH()
				ENDIF
			ENDIF
			IF  .NOT. EMPTY(THIS.OBJETO3)
				IF  (THISFORM.EDITMODE) AND !EMPTY(THIS.RETORNA3)   AND (&COBJETO3..VALUE <> XCLAVE.RESULTADO3 ) OR THIS.RESULREPE=.T.
					&COBJETO3..VALUE=XCLAVE.RESULTADO3
					&COBJETO3..REFRESH()
				ENDIF
			ENDIF
			IF  .NOT. EMPTY(THIS.OBJETO4)
				IF  (THISFORM.EDITMODE) AND !EMPTY(THIS.RETORNA4)   AND (&COBJETO4..VALUE <> XCLAVE.RESULTADO4 ) OR THIS.RESULREPE=.T.
					&COBJETO4..VALUE=XCLAVE.RESULTADO4
					&COBJETO4..REFRESH()
				ENDIF
			ENDIF
			IF  .NOT. EMPTY(THIS.OBJETO5)
				IF  (THISFORM.EDITMODE) AND !EMPTY(THIS.RETORNA5)   AND (&COBJETO5..VALUE <> XCLAVE.RESULTADO5 ) OR THIS.RESULREPE=.T.
					&COBJETO5..VALUE=XCLAVE.RESULTADO5
					&COBJETO5..REFRESH()
				ENDIF
			ENDIF
			IF THISFORM.EDITMODE .AND.  .NOT. EMPTY(THIS.PEGARCAMPOS)
				LCPEGARCAMPOS = THIS.PEGARCAMPOS
				SELECT XCLAVE
				SCATTER MEMVAR MEMO FIELDS &LCPEGARCAMPOS
				LCALIAS = SUBSTR(THIS.CONTROLSOURCE, 1, AT(".", THIS.CONTROLSOURCE)-1)
				IF  .NOT. EMPTY(LCALIAS)
					SELECT (LCALIAS)
				ENDIF
				GATHER MEMVAR MEMO FIELDS &LCPEGARCAMPOS
			ENDIF
			THIS.RETAYUDA = '0'
		*	&COBJETO..REFRESH()
			IF USED('xclave')
				USE IN XCLAVE
			ENDIF
			DEBUGOUT "Fin"
			RETURN 1
		ELSE
			IF USED('xclave')
				USE IN XCLAVE
			ENDIF
			MESSAGEBOX(THIS.MENSAJEERROR, 64, "Futura Software")
			THIS.NOVALIDO_EVENT()
			THISFORM.VALIDO = .F.
			THISFORM.MENSAJENOVALIDO = THIS.MENSAJEERROR
			RETURN 0
		ENDIF
	ENDPROC

	PROCEDURE valido_evento		&& Ocurre cuando el valid() devuelve verdadero.
	ENDPROC

ENDDEFINE

DEFINE CLASS debase AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="Pixels" Uniqueid="" />

	DataSource = DRIVER=SQL Native Client;SERVER=vgo\sqlexpress;APP=Gestion Comercial;DATABASE=FUTURA;LANGUAGE=Español;UID=FuturaApp;PWD=AppFutura;Trusted_Connection=No
	DataSourceType = "ODBC"
	Name = "debase"

ENDDEFINE

DEFINE CLASS detalle AS commandgroup 
 	*< CLASSDATA: Baseclass="commandgroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\strings.h"
	*<DefinedPropArrayMethod>
		*p: campo		&& Indica los campos que se agregan en el nuevo registro.
		*p: codigo		&& Representa el campo clave de la tabla en donde se inserta el nuevo registro.
		*p: editable
		*p: enlace		&& Es el objeto enlazado al control.
		*p: foco		&& El foco que tendra despue del agregar
		*p: tabla		&& Indica la tabla en donde se agrega el nuevo registro.
		*p: valor		&& Indica los valores con los que se actualiza los nuevos campos agregados.
	*</DefinedPropArrayMethod>

	AutoSize = .F.
	ButtonCount = 2
	foco = 		&& El foco que tendra despue del agregar
	Height = 41
	Name = "detalle"
	SpecialEffect = 0
	tabla = ""		&& Indica la tabla en donde se agrega el nuevo registro.
	Value = 1
	Width = 71
	Command1.AutoSize = .F.
	Command1.Caption = ""
	Command1.Height = 31
	Command1.Left = 5
	Command1.Name = "additem"
	Command1.Picture = ..\bitmaps\wzplus.bmp
	Command1.SpecialEffect = 0
	Command1.ToolTipText = "Agrega una linea en la cuadrícula"
	Command1.Top = 5
	Command1.Width = 31
	Command2.AutoSize = .F.
	Command2.Caption = ""
	Command2.Height = 31
	Command2.Left = 36
	Command2.Name = "removeitem"
	Command2.Picture = ..\bitmaps\wzdelete.bmp
	Command2.ToolTipText = "Elimina una linea en la cuadrícula"
	Command2.Top = 5
	Command2.Width = 30
	
	PROCEDURE additem.Click
		LOCAL TABLA, OBJETO, CTABLA, CVALOR, CCAMPO, CCODIGO, LCFOCO
		LCFOCO = "This.parent.parent."+THIS.PARENT.FOCO
		CCAMPO = THIS.PARENT.CAMPO
		CTABLA = THIS.PARENT.TABLA
		CVALOR = THIS.PARENT.VALOR
		CCODIGO = THIS.PARENT.CODIGO
		TABLA = THIS.PARENT.TABLA
		OBJETO = "This.parent.parent."+THIS.PARENT.ENLACE
		IF  .NOT. EMPTY(CCODIGO)
		DELETE ALL FOR EMPTY(&CCODIGO)IN &CTABLA
		&OBJETO..REFRESH()
		ENDIF
		INSERT INTO &CTABLA(&CCAMPO) VALUE(&CVALOR)
		&OBJETO..ENABLED = .t.
		&OBJETO..REFRESH()
		&OBJETO..SETFOCUS()
		&OBJETO..ACTIVATECELL(&OBJETO..ACTIVEROW+1, 1)
		
		
	ENDPROC

	PROCEDURE additem.Refresh
		IF THIS.PARENT.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE Init
		**
		** ReFox - este procedimiento es vacío **
		**
	ENDPROC

	PROCEDURE Refresh
		IF THIS.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE removeitem.Click
		LOCAL TABLA, OBJETO
		TABLA = THIS.PARENT.TABLA
		DELETE IN &TABLA
		GO RECNO(TABLA) IN &TABLA
		OBJETO = "This.parent.parent."+THIS.PARENT.ENLACE
		&OBJETO..REFRESH()
		&OBJETO..SETFOCUS()
	ENDPROC

	PROCEDURE removeitem.Refresh
		IF THIS.PARENT.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS label_boton AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BackStyle = 0
	Caption = "Etiqueta Botpón"
	FontBold = .T.
	FontName = "Times New Roman"
	ForeColor = 0,0,128
	Height = 18
	Name = "label_boton"
	Width = 86
	
	PROCEDURE MouseEnter
		LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
		THIS.FORECOLOR = 16711680
		THIS.FONTSIZE = THIS.FONTSIZE+1
		THIS.FONTBOLD = .T.
		THIS.FONTUNDERLINE = .T.
		
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
		THIS.FORECOLOR = 8388608
		THIS.FONTSIZE = THIS.FONTSIZE-1
		THIS.FONTBOLD = .F.
		THIS.FONTUNDERLINE = .F.
	ENDPROC

ENDDEFINE

DEFINE CLASS opcionesimpresion AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Ts3dshape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tslabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tslabel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Margen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tslabel3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tslabel4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="MargenTOP" UniqueID="" Timestamp="" />

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Opciones de Impresion"
	DoCreate = .T.
	HalfHeightCaption = .T.
	Height = 155
	Icon = ..\bitmaps\default.ico
	MaxButton = .F.
	MinButton = .F.
	Name = "opcionesimpresion"
	WhatsThisButton = .T.
	Width = 375
	WindowType = 1

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Caption = "Aceptar", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 192, ;
		Name = "Command1", ;
		Top = 125, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancelar", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 288, ;
		Name = "Command2", ;
		Top = 125, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Margen' AS spinner WITH ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99.99", ;
		KeyboardHighValue = 50, ;
		KeyboardLowValue = 0, ;
		Left = 144, ;
		Name = "Margen", ;
		SpinnerHighValue = 50.00, ;
		SpinnerLowValue = 0.00, ;
		Top = 24, ;
		Value = 0.00, ;
		Width = 60
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'MargenTOP' AS spinner WITH ;
		FontSize = 8, ;
		Height = 20, ;
		InputMask = "99.99", ;
		KeyboardHighValue = 50, ;
		KeyboardLowValue = 0, ;
		Left = 144, ;
		Name = "MargenTOP", ;
		SpinnerHighValue = 50.00, ;
		SpinnerLowValue = 0.00, ;
		Top = 48, ;
		Value = 0.00, ;
		Width = 60
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'Ts3dshape1' AS ts3dshape WITH ;
		Height = 96, ;
		Left = 13, ;
		Name = "Ts3dshape1", ;
		Top = 14, ;
		Width = 348
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="shape" />

	ADD OBJECT 'Tslabel1' AS tslabel WITH ;
		BackStyle = 1, ;
		Caption = "Opciones de Impresión", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 25, ;
		Name = "Tslabel1", ;
		Top = 8, ;
		Width = 113
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'Tslabel2' AS tslabel WITH ;
		Alignment = 0, ;
		BackStyle = 1, ;
		Caption = "Márgen Izquierdo (mm)", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 21, ;
		Name = "Tslabel2", ;
		Top = 33, ;
		Width = 113
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'Tslabel3' AS tslabel WITH ;
		BackStyle = 1, ;
		Caption = "Para impresoras LASER utilize 25, para otras impresoras utilize 5", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 25, ;
		Name = "Tslabel3", ;
		Top = 80, ;
		Width = 315
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />

	ADD OBJECT 'Tslabel4' AS tslabel WITH ;
		Alignment = 0, ;
		BackStyle = 1, ;
		Caption = "Márgen Superior (mm)", ;
		FontBold = .F., ;
		Height = 16, ;
		Left = 21, ;
		Name = "Tslabel4", ;
		Top = 57, ;
		Width = 113
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />
	
	PROCEDURE Init
		THISFORM.MARGEN.VALUE = VAL(LEERINI('Margen', 'System'))
		THISFORM.MARGENTOP.VALUE = VAL(LEERINI('MargenTOP', 'System'))
		
	ENDPROC

	PROCEDURE Command1.Click
		= ESCRIBIRINI(STR(THISFORM.MARGEN.VALUE, 5, 2), 'Margen', 'System')
		= ESCRIBIRINI(STR(THISFORM.MARGENTOP.VALUE, 5, 2), 'MargenTOP', 'System')
		THISFORM.RELEASE()
	ENDPROC

	PROCEDURE Command2.Click
		THISFORM.RELEASE()
	ENDPROC

ENDDEFINE

DEFINE CLASS statusbar AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="statusbar" Parent="" ObjName="statusbar" OLEObject="C:\Windows\SysWOW64\comct332.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIArK2HFY88BAwAAAMADAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAIAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABGAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAJQAAAAAAAAABAAAAAIAAAD+////CwAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAA0AAAAMAAAA/v///wjAN0BEEFZk7IAAGQCAAADAAgAC/JXRyAAAABfAGUAeAB0AGUAbgB0AHgAlSoAAAMACAAK8ldHRgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlaG1pb2txaXJpb2ZmZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACACgAAAEZvcmVDb2xvcgAJAAAASQoAAAASAACACgAAAEJhY2tDb2xvcgAJAAAASQoAAAAPAACAEAAAAEVtIAAAAF8AZQB4AHQAZQBuAHQAeQB7AgAAAwAJAD4VJtokAAAAYgBhAG4AZABjAG8AdQBuAHQABAAAAAAABAAIAC90Zm8gAAAAXwBjAGIAdwBpAGQAdABoAAAgwUUEAAkAJutFgiQAAABfAGMAYgBoAGUAaQBnAGgAdAAAALRDAAAIAAgAJ1kwWzAAAABfAHYAZQByAHMAaQBvAG4ACAAAADYALgA3AC4AOAA5ADgAOAAIAAgAU7RVozAAAABjAGEAcAB0AGkAbwBuADEACAAAAFUAcwB1AGEAcgBpAG8AOgAEAAoAedok2yQAAABtAGkAbgBoAGUAaQBnAGgAdAAxAAAAwEEEAAYA3jKd1hwAAAB3AGkAZAB0AGgAMQAAAEBDCwAHAPpZZbscAAAAbgBlAHcAcgBvAHcAMQAAAAQACgB62iTbJAAAAG0AaQBuAGgAZQBpAGcAaAB0ADIAAADAQQsABwD5WWW7HAAAAG4AZQB3AHIAbwB3ADIAAAAEAAoAe9ok2yQAAABtAGkAbgBoAGUAaQBnAGgAdAAzAAAAwEEEAAYA3DKd1hwAAAB3AGkAZAB0AGgAMwAAAMBCCwAHAGJvc3NIaWdobGlnaHQACQAAAEkKAAAAFAAAgA0AAABFbWJvc3NTaGFkb3cACQAAAEkKAAAADwAAgA4AAABFbWJvc3NQaWN0dXJlAAUAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+FlluxwAAABuAGUAdwByAG8AdwAzAAAABAAKAHzaJNskAAAAbQBpAG4AaABlAGkAZwBoAHQANAAAAMBBBAAGANsyndYcAAAAdwBpAGQAdABoADQAAADAQgsABwD/WWW7wP3//24AZQB3AHIAbwB3ADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" />

	#INCLUDE "..\include\strings.h"
	Height = 61
	Name = "statusbar"
	Width = 412
	
	PROCEDURE Init
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS ts3dshape AS shape 		&& Shape de base
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\shape.bmp" ClassIcon="..\bitmaps\shape.bmp" />

	BackStyle = 0
	Height = 73
	Name = "ts3dshape"
	SpecialEffect = 0
	Width = 234

ENDDEFINE

DEFINE CLASS tsbaseform AS form 		&& Form de base
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\form.bmp" ClassIcon="..\bitmaps\form.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblRequerido" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *addnew		&& Prepara el formulario para la entrada de un registro nuevo y anexa un registro al alias actual.
		*m: *addtomenu		&& Agrega el título del formulario al menú Ventana.
		*m: *afteraddnew
		*m: *afterdelete		&& Occurs after a delete command is executed.
		*m: *afterupdate		&& Ocurre despues de grabar correctamente.
		*m: *afterupdatetabla1
		*m: *afterupdatetabla2
		*m: *afterupdatetabla3
		*m: *afterupdatetabla4
		*m: *afterupdatetabla5
		*m: *afterupdatetabla6
		*m: *afterupdatetabla7
		*m: *afterupdatetabla8
		*m: *agregaritem		&& Agrega un item al detalle.
		*m: *anular
		*m: *asktosave		&& Pide al usuario que guarde los cambios si es necesario.
		*m: *beforedelete		&& Occurs just before a delete command is executed.
		*m: *borraritem		&& Elimina un Item del Detalle
		*m: *consultar
		*m: *controlerror
		*m: *datachanged		&& Devuelve .T. si se han cambiado datos en el formulario actual.
		*m: *delete		&& Elimina el registro actual.
		*m: *devuelvenro		&& Devuelve el ultimo disponible para el campo especificado de la tabla correspondiente.
		*m: *editar		&& Poner en modo de edición.
		*m: *esnuevo_access
		*m: *first		&& Mueve el puntero de registro del alias actual al primer registro.
		*m: *gridactivo_access
		*m: *hndconn_access
		*m: *imprimir		&& Imprime informes relacionados al formulario.
		*m: *isnewandempty		&& Devuelve .T. si el usuario ha agregado un nuevo registro pero no ha hecho ningún cambio.
		*m: *lallowdelete_access
		*m: *lallowedits_access
		*m: *last		&& Mueve el puntero de registro del alias actual al último registro.
		*m: *marcarrequerido
		*m: *next		&& Mueve el puntero de registro del alias actual al siguiente registro.
		*m: *prior		&& Mueve el puntero de registro del alias actual al registro anterior.
		*m: *refreshform		&& Método Refresh personalizado.
		*m: *removefrommenu		&& Quita el título del formulario del menú Ventana.
		*m: *restore		&& Restaura todos los cambios realizados al formulario actual. (También cancela la anterior operación Nuevo, si es aplicable.)
		*m: *restorewindowpos		&& Lee del archivo INI la última posición de la ventana y establece las propiedades adecuadas de la ventana.
		*m: *runsql		&& Ejecuta sentencia SQL
		*m: *save		&& Guarda la información del formulario en el alias actual.
		*m: *savewindowpos		&& Guarda la posición de la ventana en el archivo INI.
		*m: *seleccionargrid
		*m: *ultimonro_access
		*m: *validar		&& Función para valiadar los datos del formularios
		*m: *validarauto
		*m: *versiones		&& En este lugar se describe el historico de versiones del objeto
		*m: *waitmode		&& Activa y desactiva el cursor de espera para todos los controles de la pantalla.
		*m: *writebuffer		&& Se llama cuando necesitamos escribir el contenido del control actual desde el búfer a disco.
		*p: areaprincipal		&& Area de Trabajo Principal
		*p: auditmarcahora		&& Nombre del campo para almacenar la fecha y hora en que se modificó el registro.
		*p: auditusuario		&& Nombre del campo para almacenar el usuario que modificó el registro.
		*p: campoempresa		&& Contiene el campo en donde se guarda el codigo de la empresa
		*p: camponro		&& Indica en campo de donde se obtendrá el Ultimo Nro.
		*p: camponroorden		&& Indica en que momento asigna el nuevo valor. S=Al Grabar, N= Al Agregar.
		*p: campos
		*p: campotam		&& Tamaño del campo que el nro devuelto se va a rellenar con ceros iniciales.
		*p: colderror
		*p: ctoolbar		&& El nombre de la barra de herramientas que se va a crear cuando se ejecute el formulario.
		*p: detalle		&& Indica si contiene un Grid de Detalle
		*p: editmode		&& Indica el estado de edición del formulario activo.
		*p: enlaces		&& Indica los enlaces que posee el formulario actual.
		*p: esnuevo		&& Indica si un registro es nuevo.
		*p: etiquetamenu
		*p: gridactivo		&& Contiene el Grid activo del formulario.
		*p: grupoimpresion		&& Indica el grupo de impresion que va a mostrar.
		*p: hndconn
		*p: idobjeto
		*p: lallowanular		&& Indica si puede anular
		*p: lallowconsultar
		*p: lallowdelete		&& Es True si se permite eliminar en el formulario actual.
		*p: lallowedits		&& Es True si se permiten modificaciones al formulario actual.
		*p: lallownew		&& Es True si se permiten agregar registros nuevos al formulario actual.
		*p: lhaderror		&& Ocurrió un error mientras estaba deshabilitado el tratamiento de errores.
		*p: lseterroroff		&& Deshabilita el tratamiento de errores
		*p: mensajenovalido
		*p: navegador		&& Indica si se usa los botones de desplazamiento.
		*p: registroborrado		&& Indica si hay un registro borrado.
		*p: repetirvalores		&& Indica los campos que se repiten el valor en el registro agregado.
		*p: tabla1
		*p: tabla2
		*p: tabla3
		*p: tabla4
		*p: tabla5
		*p: tabla6
		*p: tabla7
		*p: tabla8
		*p: ultimonro		&& Contiene el Ultimo Nro disponible del campo indicado en la tabla solicitada.
		*p: valido
		*p: valores
		*a: ^aerrormsg[3,0]		&& Contiene mensajes de error. Se usa en el método de evento Error.
		*a: ^grids[4,0]		&& Es una matriz que contiene los Grids Activos.
		*a: ^permisos[5,0]		&& Contiene los permisos del usuario para el objeto, (1) Ejecutar, (2) Nuevo, (3) Modificar, (4) Borrar, (5) Consultar
		*a: ^validarcontroles[1,0]
	*</DefinedPropArrayMethod>

	areaprincipal = 		&& Area de Trabajo Principal
	auditmarcahora = 		&& Nombre del campo para almacenar la fecha y hora en que se modificó el registro.
	auditusuario = 		&& Nombre del campo para almacenar el usuario que modificó el registro.
	AutoCenter = .T.
	BindControls = .T.
	BorderStyle = 3
	BufferMode = 2
	camponro = 		&& Indica en campo de donde se obtendrá el Ultimo Nro.
	camponroorden = N		&& Indica en que momento asigna el nuevo valor. S=Al Grabar, N= Al Agregar.
	campos = 
	Caption = "Formulario1"
	ctoolbar = tstoolbar		&& El nombre de la barra de herramientas que se va a crear cuando se ejecute el formulario.
	DataSession = 2
	DoCreate = .T.
	DrawStyle = 5
	enlaces = 		&& Indica los enlaces que posee el formulario actual.
	FillColor = 255,0,0
	FillStyle = 0
	FontSize = 8
	gridactivo = 		&& Contiene el Grid activo del formulario.
	grupoimpresion = 		&& Indica el grupo de impresion que va a mostrar.
	Height = 300
	idobjeto = 
	lallowconsultar = .T.
	lallowdelete = .T.		&& Es True si se permite eliminar en el formulario actual.
	lallowedits = .T.		&& Es True si se permiten modificaciones al formulario actual.
	lallownew = .T.		&& Es True si se permiten agregar registros nuevos al formulario actual.
	MDIForm = .T.
	mensajenovalido = 
	MinButton = .T.
	Name = "tsbaseform"
	navegador = .T.		&& Indica si se usa los botones de desplazamiento.
	repetirvalores = 		&& Indica los campos que se repiten el valor en el registro agregado.
	ScrollBars = 0
	ShowTips = .T.
	ShowWindow = 0
	tabla1 = 
	tabla2 = 
	tabla3 = 
	tabla4 = 
	tabla5 = 
	tabla6 = 
	tabla7 = .F.
	tabla8 = .F.
	ultimonro = 		&& Contiene el Ultimo Nro disponible del campo indicado en la tabla solicitada.
	valido = .T.
	valores = 
	Width = 633
	WindowState = 0

	ADD OBJECT 'lblRequerido' AS tslabel WITH ;
		AutoSize = .F., ;
		Caption = "* Requerido", ;
		FontBold = .F., ;
		ForeColor = 255,0,0, ;
		Height = 16, ;
		Left = 1500, ;
		Name = "lblRequerido", ;
		Top = 108, ;
		Width = 58
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="label" />
	
	PROCEDURE Activate
		Local LCALIAS
		LCALIAS = This.TABLA1
		If  .Not. Empty(LCALIAS)
			Select (LCALIAS)
		Endif
		If  .Not. Empty(Thisform.CTOOLBAR) .And. Type("oApp.oToolbar")=="O"
			OAPP.OTOOLBAR.Refresh()
		ENDIF
		
		
		**VG 11/03/2010
		**Se debe activar el menu si el form esta en _screen
		IF this.ShowWindow= 0
			ACTIVATE MENU _MSYSMENU NOWAIT
		ENDIF
		
		Set Message To Thisform.Caption
		If Deleted()
			Goto Top
		Endif
	ENDPROC

	PROCEDURE addnew		&& Prepara el formulario para la entrada de un registro nuevo y anexa un registro al alias actual.
		Local LCALIAS, GRILLA, LCREPETIRVALORES, LLCONREGISTROS
		LCALIAS = Iif(Empty(This.TABLA1), Thisform.DataEnvironment.InitialSelectedAlias, This.TABLA1)
		LCREPETIRVALORES = This.REPETIRVALORES
		If Thisform.WRITEBUFFER()
			If Thisform.ISNEWANDEMPTY()
				Thisform.Restore()
			ENDIF
		
			IF  .NOT. EMPTY(THISFORM.CTOOLBAR) .AND. TYPE("oApp.oToolbar")=="O"
				OAPP.OTOOLBAR.CMDNEW.Enabled = .F.
			ENDIF	
		
		
		**VG 11/03/2010
		**Se debe activar el menu si el form esta en _screen
			If This.ShowWindow= 0
				Activate Menu _Msysmenu Nowait
			Endif
		
		
			Select (LCALIAS)
			LLCONREGISTROS = (Reccount()>0)
			If  .Not. Empty(LCREPETIRVALORES)
				Scatter Memvar Memo Fields &LCREPETIRVALORES
			Endif
			If  .Not. Empty(This.CAMPOS) .And.  .Not. Empty(This.VALORES)
				LCCOMANDO = 'Insert into '+LCALIAS+' ('+This.CAMPOS+') VALUES('+This.VALORES+')'
				&LCCOMANDO
			Else
				Append Blank
			Endif
			If  .Not. Empty(LCREPETIRVALORES) .And. LLCONREGISTROS
				Gather Memvar Memo Fields &LCREPETIRVALORES
			Endif
			If This.CAMPONROORDEN="N"
				If  .Not. Empty(This.CAMPONRO)
					If At(",", This.CAMPONRO, 1)>0
						LCAUX = Substr(This.CAMPONRO, 1, At(",", This.CAMPONRO, 1)-1)
					Else
						LCAUX = This.CAMPONRO
					Endif
					Replace &LCAUX With This.ULTIMONRO
				Endif
			Endif
			If This.DETALLE
				For I = 1 To 4
					If Type('this.grids(i)')='O'
						GRILLA = This.GridS(I)
						If  .Not. Empty(GRILLA.VARIABLEVISTA)
							CVARIABLE = GRILLA.VARIABLEVISTA
							Local &CVARIABLE,LCVALOR
							LCVALOR = GRILLA.VALORVARIABLE
							&CVARIABLE=&LCVALOR
							If  .Not. Empty(GRILLA.VALORVARIABLE2)
								CVARIABLE2 = GRILLA.VARIABLEVISTA2
								Local &CVARIABLE2,LCVALOR2
								LCVALOR2 = GRILLA.VALORVARIABLE2
								&CVARIABLE2=&LCVALOR2
							Endif
							CVISTA = GRILLA.RecordSource
							= Requery(CVISTA)
						Endif
					Else
						Exit
					Endif
				Endfor
			Endif
			This.AFTERADDNEW()
			This.EDITAR()
		Endif
	ENDPROC

	PROCEDURE addtomenu		&& Agrega el título del formulario al menú Ventana.
		LOCAL LNBAR
		*SET COVERAGE TO c:\sistemas\futura.log ADDITIVE 
		*SET COVERAGE TO futura.log ADDITIVE 
		IF TYPE("oApp")=="O"
			IF  .NOT. POPUP("Window")
				DO MENUS\WINDOW.mpr
			ENDIF
			IF  .NOT. POPUP("Detalle") .AND. THIS.DETALLE
				DO MENUS\DETALLE.mpr
			ENDIF
			IF CNTBAR("Window")=0 .OR. GETBAR("Window", CNTBAR("Window"))<0
				LNBAR = CNTBAR("Window")+1
			ELSE
				LNBAR = GETBAR("Window", CNTBAR("Window"))+1
			ENDIF
			DEFINE BAR LNBAR OF WINDOW PROMPT THISFORM.CAPTION
			LCFORMNAME = THISFORM.NAME
			ON SELECTION BAR LNBAR OF WINDOW ACTIVATE WINDOW &LCFORMNAME
		ENDIF
		
		*SET COVERAGE TO
	ENDPROC

	PROCEDURE afteraddnew
	ENDPROC

	PROCEDURE afterdelete		&& Occurs after a delete command is executed.
	ENDPROC

	PROCEDURE afterupdate		&& Ocurre despues de grabar correctamente.
	ENDPROC

	PROCEDURE afterupdatetabla1
	ENDPROC

	PROCEDURE afterupdatetabla2
	ENDPROC

	PROCEDURE afterupdatetabla3
	ENDPROC

	PROCEDURE afterupdatetabla4
	ENDPROC

	PROCEDURE afterupdatetabla5
	ENDPROC

	PROCEDURE afterupdatetabla6
	ENDPROC

	PROCEDURE afterupdatetabla7
	ENDPROC

	PROCEDURE afterupdatetabla8
	ENDPROC

	PROCEDURE agregaritem		&& Agrega un item al detalle.
		LPARAMETERS LLINSERTAR
		LOCAL LCGRIDACTIVO
		LCGRIDACTIVO = THIS.GRIDACTIVO
		IF TYPE('lcGridActivo')='O'
		LCGRIDACTIVO.AGREGARITEM(LLINSERTAR)
		ENDIF
	ENDPROC

	PROCEDURE anular
	ENDPROC

	PROCEDURE asktosave		&& Pide al usuario que guarde los cambios si es necesario.
		LOCAL LNANSWER
		LNANSWER = MESSAGEBOX("¿Desea guardar primero sus cambios?", 035, "Futura Software")
		DO CASE
		CASE LNANSWER=6
		IF  .NOT. THISFORM.SAVE()
		LNANSWER = 2
		ENDIF
		CASE LNANSWER=7
		THISFORM.RESTORE()
		ENDCASE
		RETURN LNANSWER
	ENDPROC

	PROCEDURE beforedelete		&& Occurs just before a delete command is executed.
	ENDPROC

	PROCEDURE borraritem		&& Elimina un Item del Detalle
		THIS.GRIDACTIVO.BORRARITEM()
	ENDPROC

	PROCEDURE consultar
	ENDPROC

	PROCEDURE controlerror
		LPARAMETERS NERROR
		LOCAL LLHANDLEDERROR, LAERROR[7], LCMESSAGE, LNANSWER
		IF THISFORM.LSETERROROFF
		THIS.LHADERROR = .T.
		RETURN
		ENDIF
		= AERROR(LAERROR)
		DO CASE
		CASE NERROR=1539
		?? CHR(7)
		= MESSAGEBOX(THISFORM.AERRORMSG(LAERROR(5)), 48, "Futura Software")
		IF LAERROR(5)=3
		THISFORM.RESTORE()
		ENDIF
		LLHANDLEDERROR = .T.
		CASE NERROR=1583
		IF .F.
		WAIT WINDOW NOWAIT "Falló la regla de la tabla."
		ENDIF
		LLHANDLEDERROR = .T.
		CASE NERROR=1582
		?? CHR(7)
		LCMESSAGE = DBGETPROP(ALIAS()+"."+LAERROR(3), "Field", "RuleText")
		LCMESSAGE = STRTRAN(LCMESSAGE, '"', '')
		= MESSAGEBOX(LCMESSAGE, 48, "Futura Software")
		OTHERWISE
		?? CHR(7)
		LCMESSAGE = MESSAGE()+CHR(13)+"Método: "+CMETHOD+CHR(13)+"Línea: "+ALLTRIM(STR(NLINE))
		LNANSWER = MESSAGEBOX(LCMESSAGE, 018, "Ha ocurrido un error")
		DO CASE
		CASE LNANSWER=3
		IF .F.
		SUSPEND
		ELSE
		OAPP.CLEANUP
		CANCEL
		RETURN
		ENDIF
		CASE LNANSWER=4
		RETRY
		OTHERWISE
		RETURN
		ENDCASE
		ENDCASE
		RETURN LLHANDLEDERROR
	ENDPROC

	PROCEDURE datachanged		&& Devuelve .T. si se han cambiado datos en el formulario actual.
		PARAMETER LCTABLA
		LOCAL LLDATACHANGED, LCALIAS
		LLDATACHANGED = .F.
		LCALIAS = ALIAS()
		IF PARAMETERS()>0
		LTABLA = LCTABLA
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		RETURN LLDATACHANGED
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA1) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA1
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA2) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA2
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA3) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA3
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA4) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA4
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA5) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA5
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA6) .AND.  .NOT. LLDATACHANGED
		LTABLA = THIS.TABLA6
		SELECT (LTABLA)
		IF ISNULL(GETFLDSTATE(-1))
		LLDATACHANGED = .F.
		ELSE
		LLDATACHANGED = ("2"$GETFLDSTATE(-1) .OR. "4"$GETFLDSTATE(-1))
		ENDIF
		ENDIF
		SELECT (LCALIAS)
		RETURN LLDATACHANGED
	ENDPROC

	PROCEDURE delete		&& Elimina el registro actual.
		Local LNRECNO, LLRETVAL, LCALIAS, HNDCONN, LAERROR[7]
		LCALIAS = This.TABLA1
		LLRETVAL = .T.
		HNDCONN = 0
		If Messagebox("¿Realmente desea eliminar este registro?", 036, "Eliminar advertencia")=7
			Return .F.
		Endif
		Select (LCALIAS)
		If "3"$Getfldstate(-1) .Or. "4"$Getfldstate(-1)
			Thisform.Restore()
			Return .T.
		Endif
		If CursorGetProp('SourceType', LCALIAS)=2
			HNDCONN = CursorGetProp('ConnectHandle', LCALIAS)
		Endif
		LNRECNO = Recno()
		Begin Transaction
		
		*Notificamos antes de borrar
		this.beforeDelete()
		Delete
		If  .Not. Tableupdate(.T., .T.)
			Aerror(LAERROR)
			If HNDCONN>0
				= Sqlrollback(HNDCONN)
			Endif
			Rollback
			Messagebox('No se pudo borrar.'+Chr(13)+LAERROR(2), 048, "Futura Software")
		ELSE
		
			*Notificamos de que se realizo correctamente el borrado
			this.afterDelete()	
			End Transaction
			If HNDCONN>0
				= Sqlcommit(HNDCONN)
			Endif
			Skip
			If Eof()
				Skip -1
				Thisform.REFRESHFORM()
			Else
				If LNRECNO=Recno()
					LLRETVAL = .F.
				Else
					Thisform.REFRESHFORM()
				Endif
			Endif
		Endif
		Return LLRETVAL
	ENDPROC

	PROCEDURE Destroy
		Thisform.Visible = .F.
		If Type('oApp')=="O"
			If Type("this.ctoolbar")<>"U" .And.  .Not. Empty(This.CTOOLBAR)
				This.REMOVEFROMMENU()
				OAPP.RELEASENAVTOOLBAR()
			Endif
		Endif
		Thisform.SAVEWINDOWPOS()
	ENDPROC

	PROCEDURE devuelvenro		&& Devuelve el ultimo disponible para el campo especificado de la tabla correspondiente.
	ENDPROC

	PROCEDURE editar		&& Poner en modo de edición.
		
		IF  .NOT. THIS.EDITMODE
			THIS.EDITMODE = .T.
		ELSE
			THIS.EDITMODE = .F.
		ENDIF
		IF  .NOT. EMPTY(THISFORM.CTOOLBAR) .AND. TYPE("oApp.oToolbar")=="O"
			OAPP.OTOOLBAR.REFRESH()
		ENDIF
		
		THIS.REFRESHFORM()
	ENDPROC

	PROCEDURE Error
		LPARAMETERS NERROR, CMETHOD, NLINE
		IF TYPE('gaError(1)')<>"U"
			AERROR(GAERROR)
			RETURN
		ENDIF
		
			lcMENSAJE = "ATENCION : "+MESSAGE()+CHR(13)
			lcMENSAJE = lcMENSAJE+"ERROR: "+ALLTRIM(STR(NERROR))+CHR(13)
			lcMENSAJE = lcMENSAJE+"METODO: "+CMETHOD+CHR(13)
			lcMENSAJE = lcMENSAJE+"LINEA: ("+ALLTRIM(STR(NLINE))+") "+MESSAGE(1)
		
		
		IF _VFP.STARTMODE<>4
			MENSAJE = "ATENCION : "+MESSAGE()+CHR(13)
			MENSAJE = MENSAJE+"ERROR: "+ALLTRIM(STR(NERROR))+CHR(13)
			MENSAJE = MENSAJE+"METODO: "+CMETHOD+CHR(13)
			MENSAJE = MENSAJE+"LINEA: ("+ALLTRIM(STR(NLINE))+") "+MESSAGE(1)
		ELSE
			MENSAJE = "ATENCION: "+MESSAGE()
		ENDIF
		
		=RegistrarError(lcMENSAJE)
		MESSAGEBOX(MENSAJE, 48, "Futura Software")
	ENDPROC

	PROCEDURE esnuevo_access
		RETURN IIF(ISNULL(GETFLDSTATE(-1, THISFORM.TABLA1)), .F., ("3"$GETFLDSTATE(-1, THISFORM.TABLA1) .OR. "4"$GETFLDSTATE(-1, THISFORM.TABLA1)))
	ENDPROC

	PROCEDURE first		&& Mueve el puntero de registro del alias actual al primer registro.
		LOCAL LNRECNO, LNRETVAL, LCTABLA
		IF  .NOT. THISFORM.WRITEBUFFER()
		RETURN 3
		ENDIF
		LCTABLA = THIS.AREAPRINCIPAL
		SELECT &LCTABLA 
		IF THISFORM.ISNEWANDEMPTY()
		THISFORM.RESTORE()
		ELSE
		ENDIF
		LNRECNO = RECNO()
		LOCATE
		IF LNRECNO=RECNO()
		RETURN 3
		ENDIF
		IF EOF()
		RETURN 2
		ENDIF
		THISFORM.REFRESHFORM()
		RETURN 1
	ENDPROC

	PROCEDURE gridactivo_access
		LOCAL LOCONTROL, LNCONTROLES, I
		LOCONTROL = THISFORM.ACTIVECONTROL
		LNCONTROLES = 0
		THIS.GRIDACTIVO = ''
		IF LOCONTROL.CLASS='Tsgrid' .AND.  .NOT. LOCONTROL.READONLY .AND.  .NOT. EMPTY(LOCONTROL.CAMPO)
		THIS.GRIDACTIVO = LOCONTROL
		ELSE
		ENDIF
		IF TYPE('THIS.GRIDACTIVO')<>'O'
		IF TYPE('THIS.GRIDS(1)')='O' .AND. TYPE('THIS.GRIDS(2)')='O'
		DEFINE POPUP _POPSHORTCUTMENU FROM MROW(), MCOL() MARGIN RELATIVE SHORTCUT
		FOR I = 1 TO 4
		IF TYPE('THIS.GRIDS(i)')='O'
		DEFINE BAR I OF _POPSHORTCUTMENU PROMPT THIS.GRIDS(I).TITULO
		ENDIF
		ENDFOR
		ON SELECTION POPUP _POPSHORTCUTMENU DEACTIVATE POPUP _POPSHORTCUTMENU
		ACTIVATE POPUP _POPSHORTCUTMENU
		RELEASE POPUPS _POPSHORTCUTMENU
		IF BAR()=0
		RETURN .NULL.
		ELSE
		THIS.GRIDACTIVO = THIS.GRIDS(BAR())
		ENDIF
		ELSE
		THIS.GRIDACTIVO = THIS.GRIDS(1)
		ENDIF
		ENDIF
		RETURN THIS.GRIDACTIVO
	ENDPROC

	PROCEDURE hndconn_access
		*To do: Modify this routine for the Access method
		IF  .NOT. EMPTY(THIS.TABLA1) .AND. CURSORGETPROP("SourceType", THIS.TABLA1)=2
			THIS.HNDCONN = CURSORGETPROP('ConnectHandle', THIS.TABLA1)
		ENDIF
		RETURN THIS.hndconn
		
	ENDPROC

	PROCEDURE imprimir		&& Imprime informes relacionados al formulario.
		IF EMPTY(THIS.GRUPOIMPRESION)
		DO FORM arbol
		ELSE
		DO FORM arbol WITH THIS.GRUPOIMPRESION
		ENDIF
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		LOCAL LCFILE, LNMENUNUM, LCFORMNAME, LCUSUARIO, LCFORMNAME
		THIS.ADDOBJECT('ToWRITEBUFFER', 'COMMANDBUTTON')
		THIS.TOWRITEBUFFER.LEFT = 3000
		THISFORM.RESTOREWINDOWPOS()
		IF  .NOT. EMPTY(THISFORM.CTOOLBAR) .AND. TYPE("oApp")=="O"
			THISFORM.ADDTOMENU()
			OAPP.SHOWNAVTOOLBAR(THISFORM.CTOOLBAR)
		ENDIF
		IF EMPTY(THIS.ICON)
			THIS.ICON = "DEFAULT.ICO"
		ENDIF
		IF  .NOT. EMPTY(THIS.TABLA1) .AND. CURSORGETPROP("SourceType", THIS.TABLA1)=2
			THIS.HNDCONN = CURSORGETPROP('ConnectHandle', THIS.TABLA1)
		ENDIF
		IF TYPE('THISFORM.DATAENVIRONMENT')='O'
			IF EMPTY(THIS.TABLA1) .AND.  .NOT. EMPTY(THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS)
				THIS.TABLA1 = THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS
			ENDIF
			IF  .NOT. EMPTY(THIS.TABLA1) .AND. EMPTY(THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS)
				THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS = THIS.TABLA1
			ENDIF
			IF EMPTY(THIS.AREAPRINCIPAL)
				THIS.AREAPRINCIPAL = THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS
			ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.IDOBJETO)
			LNPOSICION = ASCAN(OAPP.ARRAYPERMISOS, THIS.IDOBJETO)
			IF LNPOSICION>0
				THIS.PERMISOS(1) = OAPP.ARRAYPERMISOS(LNPOSICION+1)
				THIS.PERMISOS(2) = OAPP.ARRAYPERMISOS(LNPOSICION+2)
				THIS.PERMISOS(3) = OAPP.ARRAYPERMISOS(LNPOSICION+3)
				THIS.PERMISOS(4) = OAPP.ARRAYPERMISOS(LNPOSICION+4)
				THIS.PERMISOS(5) = OAPP.ARRAYPERMISOS(LNPOSICION+5)
			ENDIF
			THIS.LALLOWNEW = THIS.LALLOWNEW .AND. THIS.PERMISOS(2)
			THIS.LALLOWEDITS = THIS.LALLOWEDITS .AND. THIS.PERMISOS(3)
			THIS.LALLOWDELETE = THIS.LALLOWDELETE .AND. THIS.PERMISOS(4)
			THIS.LALLOWANULAR = THIS.LALLOWANULAR .AND. THIS.PERMISOS(4)
			THIS.NAVEGADOR = THIS.NAVEGADOR .AND. THIS.PERMISOS(5)
		ENDIF
		THISFORM.AERRORMSG[1] = "Falló el desencadenante Insert."
		THISFORM.AERRORMSG[2] = "Falló el desencadenante Update."
		THISFORM.AERRORMSG[3] = "Falló el desencadenante Delete."
		SET DATABASE TO datos
		SET SYSFORMATS ON
		SET DATE short
		SET DELETED ON
		SET POINT TO ','
		SET SEPARATOR TO '.'
		SET CENTURY ON
		SET NULLDISPLAY TO ' '
		SET TALK OFF
		SET SAFETY OFF
		
	ENDPROC

	PROCEDURE isnewandempty		&& Devuelve .T. si el usuario ha agregado un nuevo registro pero no ha hecho ningún cambio.
		RETURN (MOD(VAL(GETFLDSTATE(-1)), VAL(REPLICATE("3", LEN(GETFLDSTATE(-1))))))=0
	ENDPROC

	PROCEDURE lallowdelete_access
		RETURN THIS.LALLOWDELETE
	ENDPROC

	PROCEDURE lallowedits_access
		RETURN THIS.LALLOWEDITS
	ENDPROC

	PROCEDURE last		&& Mueve el puntero de registro del alias actual al último registro.
		LOCAL LNRECNO, LNRETVAL, LLNEWANDEMPTY, LCTABLA
		IF  .NOT. THISFORM.WRITEBUFFER()
		RETURN 3
		ENDIF
		LCTABLA = THIS.AREAPRINCIPAL
		SELECT &LCTABLA 
		IF THISFORM.ISNEWANDEMPTY()
		THISFORM.RESTORE()
		LLNEWANDEMPTY = .T.
		ELSE
		ENDIF
		LNRECNO = RECNO()
		GOTO BOTTOM
		IF  .NOT. LLNEWANDEMPTY .AND. LNRECNO=RECNO()
		RETURN 3
		ENDIF
		IF  .NOT. EOF()
		THISFORM.REFRESHFORM()
		ENDIF
		RETURN 2
	ENDPROC

	PROCEDURE Load
		DO SETEO
		
	ENDPROC

	PROCEDURE marcarrequerido
		LPARAMETERS CTRL AS OBJECT
		X = CTRL.LEFT+10
		Y = CTRL.TOP+CTRL.HEIGHT/2
		IF UPPER(CTRL.PARENT.BASECLASS)='PAGE'
		Y = Y+CTRL.PARENT.PARENT.TOP+25
		ENDIF
		THISFORM.FILLCOLOR = 255
		THIS.CIRCLE(4, X, Y)
	ENDPROC

	PROCEDURE next		&& Mueve el puntero de registro del alias actual al siguiente registro.
		LOCAL LNRECNO, LNRETVAL, LCTABLA
		IF  .NOT. THISFORM.WRITEBUFFER()
			RETURN 3
		ENDIF
		LCTABLA = THIS.AREAPRINCIPAL
		SELECT &LCTABLA
		IF  .NOT. EOF()
			IF THISFORM.ISNEWANDEMPTY()
				THISFORM.RESTORE()
			ELSE
			ENDIF
			LNRECNO = RECNO()
			SKIP
			IF EOF()
				SKIP -1
				RETURN 2
			ENDIF
			IF LNRECNO=RECNO()
				RETURN 3
			ENDIF
			THISFORM.REFRESHFORM()
			RETURN 0
		ELSE
			RETURN 2
		ENDIF
	ENDPROC

	PROCEDURE prior		&& Mueve el puntero de registro del alias actual al registro anterior.
		LOCAL LNRECNO, LNRETVAL, LCTABLA
		IF  .NOT. THISFORM.WRITEBUFFER()
		RETURN 3
		ENDIF
		LCTABLA = THIS.AREAPRINCIPAL
		SELECT &LCTABLA 
		IF  .NOT. BOF()
		IF THISFORM.ISNEWANDEMPTY()
		THISFORM.RESTORE()
		ELSE
		ENDIF
		LNRECNO = RECNO()
		SKIP -1
		IF BOF()
		RETURN 1
		ENDIF
		IF LNRECNO=RECNO()
		RETURN 3
		ENDIF
		THISFORM.REFRESHFORM()
		RETURN 0
		ELSE
		RETURN 1
		ENDIF
	ENDPROC

	PROCEDURE QueryUnload
		If Empty(Thisform.CTOOLBAR)
			Return .T.
		Endif
		If  .Not. Thisform.WRITEBUFFER()
			Nodefault
			Return .F.
		Endif
		If Empty(Alias())
			Set DataSession To (This.DataSessionId)
			If Empty(Alias()) .And.  .Not. Empty(This.DataEnvironment.InitialSelectedAlias) .And. Used(This.DataEnvironment.InitialSelectedAlias)
				Select (This.DataEnvironment.InitialSelectedAlias)
			Endif
		Endif
		If  .Not. Empty(Alias())
			If Thisform.ISNEWANDEMPTY()
				Thisform.Restore()
			Else
				If Thisform.DATACHANGED() .And. Thisform.ASKTOSAVE()=2
					Nodefault
					Return .F.
				Endif
			Endif
		Endif
		Return .T.
	ENDPROC

	PROCEDURE refreshform		&& Método Refresh personalizado.
		THISFORM.LOCKSCREEN = .T.
		THISFORM.REFRESH()
		THISFORM.LOCKSCREEN = .F.
	ENDPROC

	PROCEDURE removefrommenu		&& Quita el título del formulario del menú Ventana.
		LPARAMETERS TCCAPTION
		LOCAL LNBAR, LCCAPTION
		IF PCOUNT()=0
			LCCAPTION = THISFORM.CAPTION
		ELSE
			LCCAPTION = TCCAPTION
		ENDIF
		IF TYPE('oApp')=="O"
			FOR LNBAR = CNTBAR("Window") TO 1 STEP -1
				IF PRMBAR("Window", GETBAR("Window", LNBAR))=LCCAPTION
					RELEASE BAR GETBAR("Window", LNBAR) OF WINDOW
					EXIT
				ENDIF
			ENDFOR
		
			IF CNTBAR("Window")=0
				RELEASE POPUPS EXTENDED WINDOW
				RELEASE PAD WINDOW OF _MSYSMENU
				RELEASE POPUPS EXTENDED DETALLE
				RELEASE PAD DETALLE OF _MSYSMENU
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE restore		&& Restaura todos los cambios realizados al formulario actual. (También cancela la anterior operación Nuevo, si es aplicable.)
		This.REGISTROBORRADO = .F.
		If  .Not. Empty(This.TABLA1)
			LTABLA = This.TABLA1
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		If  .Not. Empty(This.TABLA2)
			LTABLA = This.TABLA2
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		If  .Not. Empty(This.TABLA3)
			LTABLA = This.TABLA3
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		If  .Not. Empty(This.TABLA4)
			LTABLA = This.TABLA4
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		If  .Not. Empty(This.TABLA5)
			LTABLA = This.TABLA5
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		If  .Not. Empty(This.TABLA6)
			LTABLA = This.TABLA6
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		
		If  .Not. Empty(This.TABLA7)
			LTABLA = This.TABLA7
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		
		If  .Not. Empty(This.TABLA8)
			LTABLA = This.TABLA8
			Select (LTABLA)
			LNRECORD = Tablerevert(.T., LTABLA)
		Endif
		
		
		LTABLA = This.TABLA1
		Select (LTABLA)
		If Eof()
			Skip -1
			If Bof()
			Endif
		ENDIF
		
		This.EDITAR()
		**VG 11/03/2010
		**Se debe activar el menu si el form esta en _screen
		If This.ShowWindow= 0
			Activate Menu _Msysmenu Nowait
		Endif
		
		Thisform.REFRESHFORM()
		
	ENDPROC

	PROCEDURE restorewindowpos		&& Lee del archivo INI la última posición de la ventana y establece las propiedades adecuadas de la ventana.
		LPARAMETERS TCENTRY
		LOCAL LCBUFFER, LCOLDERROR, LNTOP, LNLEFT, LLERROR, LNCOMMAPOS, LCENTRY
		IF PCOUNT()=0
		LCENTRY = THISFORM.CAPTION
		ELSE
		LCENTRY = TCENTRY
		ENDIF
		LCBUFFER = SPACE(10)+CHR(0)
		LCOLDERROR = ON('ERROR')
		IF GETPRIVSTR("WindowPositions", LCENTRY, "", @LCBUFFER, LEN(LCBUFFER), CURDIR()+"FUTURA.INI")>0
		ON ERROR LLERROR = .T.
		LNCOMMAPOS = AT(",", LCBUFFER)
		LNTOP = VAL(LEFT(LCBUFFER, LNCOMMAPOS-1))
		LNLEFT = VAL(SUBSTR(LCBUFFER, LNCOMMAPOS+1))
		ON ERROR &LCOLDERROR
		IF  .NOT. LLERROR
		THISFORM.TOP = LNTOP
		THISFORM.LEFT = LNLEFT
		ENDIF
		ENDIF
	ENDPROC

	PROCEDURE runsql		&& Ejecuta sentencia SQL
		LPARAMETERS cmdsql, lccursor,  ;
		            lnconn
		LOCAL _hndconn, _lnresultado,  ;
		      _lcalias
		_lcalias = ALIAS()
		IF TYPE('lnConn') = 'N'
		     _hndconn = lnconn
		ELSE
		     lnconn = 0
		     IF TYPE('oApp') <> 'O'
		          sistema = 'ND'
		          _hndconn = SQLCONNECT('datos_Sql')
		     ELSE
		          sistema = oapp.sistema
		          _hndconn = SQLCONNECT(oapp.sistema)
		     ENDIF
		     = SQLSETPROP(_hndconn, "Transactions", 1)
		     
		ENDIF
		IF _hndconn <= 0
		     MESSAGEBOX( ;
		               'No se pudo conectar al Servidor' +  ;
		               CHR(13) +  ;
		               'Sistema: ' +  ;
		               sistema + CHR(13) +  ;
		               'BD: ' + DBC())
		     RETURN -1
		ENDIF
		*!*	DO WHILE SQLGETPROP(_hndconn,    'ConnectBusy')
		*!*	     WAIT WINDOW NOCLEAR NOWAIT            'Conexion Ocupada...'
		*!*	ENDDO
		
		= SQLSETPROP(_hndconn, 'BatchMode', .T.)
		*= SQLSETPROP(_hndconn, 'Asynchronous', .T.)
		*= SQLSETPROP(_hndconn, "Transactions", 1)
		IF TYPE('lcCursor') = 'C'
		     _lnresultado = SQLEXEC(_hndconn,  ;
		                    cmdsql,  ;
		                    lccursor)
		ELSE
		     _lnresultado = SQLEXEC(_hndconn,  ;
		                    cmdsql)
		ENDIF
		IF _lnresultado < 0
		     lnelemento = AERROR(laerror)
		     lcerror = ''
		     FOR i = 1 TO lnelemento
		          lcerror = lcerror +  ;
		                    TRANSFORM(i) +  ;
		                    ') ' +  ;
		                    laerror(i,3) +  ;
		                    CHR(13)
		     ENDFOR
		     MESSAGEBOX(lcerror)
		ENDIF
		
		IF lnconn = 0
		     SQLCANCEL(_hndconn)
		     SQLDISCONNECT(_hndconn)
		ENDIF
		IF  .NOT. EMPTY(_lcalias)
		     SELECT (_lcalias)
		ENDIF
		RETURN _lnresultado
		
		*!*	LPARAMETERS CMDSQL, LCCURSOR, LNCONN
		*!*	LOCAL _HNDCONN, _LNRESULTADO, _LCALIAS
		*!*	_LCALIAS = ALIAS()
		*!*	IF TYPE('lnConn')='N'
		*!*	_HNDCONN = LNCONN
		*!*	ELSE
		*!*	LNCONN = 0
		*!*	IF TYPE('oApp')<>'O'
		*!*	_HNDCONN = SQLCONNECT('datos_Sql')
		*!*	ELSE
		*!*	_HNDCONN = SQLCONNECT(OAPP.SISTEMA)
		*!*	ENDIF
		*!*	ENDIF
		*!*	IF _HNDCONN<=0
		*!*	MESSAGEBOX('No se pudo conectar al Servidor')
		*!*	RETURN -1
		*!*	ENDIF
		*!*	WAIT WINDOW NOCLEAR NOWAIT 'Procesando...'
		*!*	DO WHILE SQLGETPROP(_HNDCONN, 'ConnectBusy')
		*!*	ENDDO
		*!*	= SQLSETPROP(_HNDCONN, 'BatchMode', .T.)
		*!*	= SQLSETPROP(_HNDCONN, "Transactions", 1)
		*!*	WAIT CLEAR
		*!*	IF TYPE('lcCursor')='C'
		*!*	_LNRESULTADO = SQLEXEC(_HNDCONN, CMDSQL, LCCURSOR)
		*!*	ELSE
		*!*	_LNRESULTADO = SQLEXEC(_HNDCONN, CMDSQL)
		*!*	ENDIF
		*!*	IF _LNRESULTADO<0
		*!*	LNELEMENTO = AERROR(LAERROR)
		*!*	LCERROR = ''
		*!*	LCSQLERROR = '[Microsoft][ODBC SQL Server Driver][SQL Server]'
		*!*	FOR I = 1 TO LNELEMENTO
		*!*	LCERROR = LCERROR+'('+TRANSFORM(LAERROR(I, 5))+') '+STRTRAN(LAERROR(I, 3), LCSQLERROR, '')+CHR(13)
		*!*	ENDFOR
		*!*	MESSAGEBOX('SQL Error: '+LCERROR, 48, "Futura Software")
		*!*	ENDIF
		*!*	IF LNCONN=0
		*!*	SQLDISCONNECT(_HNDCONN)
		*!*	ENDIF
		*!*	IF  .NOT. EMPTY(_LCALIAS)
		*!*	SELECT (_LCALIAS)
		*!*	ENDIF
		*!*	RETURN _LNRESULTADO
	ENDPROC

	PROCEDURE save		&& Guarda la información del formulario en el alias actual.
		LOCAL LAERROR[7], LLERROR, LTABLA, HNDCONN
		HNDCONN = 0
		LLERROR =  .NOT. THISFORM.WRITEBUFFER()
		IF  .NOT. THIS.VALIDO
			RETURN .F.
		ENDIF
		IF  .NOT. THIS.VALIDARAUTO() .OR.  .NOT. THIS.VALIDAR()
			RETURN .F.
		ENDIF
		IF THIS.CAMPONROORDEN="S"
			IF  .NOT. EMPTY(THIS.CAMPONRO)
				IF AT(",", THIS.CAMPONRO, 1)>0
					LCAUX = SUBSTR(THIS.CAMPONRO, 1, AT(",", THIS.CAMPONRO, 1)-1)
				ELSE
					LCAUX = THIS.CAMPONRO
				ENDIF
				LTABLA = THIS.TABLA1
				SELECT (LTABLA)
				IF EMPTY(EVALUATE(LCAUX))
					REPLACE &LCAUX WITH THIS.ULTIMONRO
				ENDIF
			ENDIF
		ENDIF
		LTABLA = THIS.TABLA1
		SELECT (LTABLA)
		IF  .NOT. LLERROR
			BEGIN TRANSACTION
			POSICION = RECNO()
			LTABLA = THIS.TABLA1
			IF CURSORGETPROP('SourceType', LTABLA)=2
				HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
				THIS.HNDCONN = HNDCONN
			ENDIF
			IF  .NOT. EMPTY(THIS.AUDITUSUARIO)
				REPLACE (THIS.AUDITUSUARIO) WITH OAPP.GETEMPLOYEEID()IN &LTABLA
			ENDIF
			IF  .NOT. EMPTY(THIS.AUDITMARCAHORA)
				REPLACE (THIS.AUDITMARCAHORA) WITH GETDATE() IN &LTABLA
			ENDIF
			IF  .NOT. EMPTY(THIS.CAMPOEMPRESA)
				REPLACE (THIS.CAMPOEMPRESA) WITH OAPP.EMPRESA IN &LTABLA
			ENDIF
			LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
			IF .NOT. LLERROR 
				LLERROR =  .NOT. THIS.AFTERUPDATETABLA1()
			ENDIF
				
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA2)
				LTABLA = THIS.TABLA2
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
						THIS.HNDCONN = HNDCONN
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA2()
				ENDIF
					
			ENDIF
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA3)
				LTABLA = THIS.TABLA3
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
						THIS.HNDCONN = HNDCONN
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA3()
				ENDIF
				
					
			ENDIF
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA4)
				LTABLA = THIS.TABLA4
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
						THIS.HNDCONN = HNDCONN
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA4()
				ENDIF
					
			ENDIF
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA5)
				LTABLA = THIS.TABLA5
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
						THIS.HNDCONN = HNDCONN
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA5()
				ENDIF
					
			ENDIF
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA6)
				LTABLA = THIS.TABLA6
				THIS.HNDCONN = HNDCONN
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA6()
				ENDIF
					
			ENDIF
		
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA7)
				LTABLA = THIS.TABLA7
				THIS.HNDCONN = HNDCONN
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA7()
				ENDIF
					
			ENDIF	
			IF  .NOT. LLERROR .AND.  .NOT. EMPTY(THIS.TABLA8)
				LTABLA = THIS.TABLA8
				THIS.HNDCONN = HNDCONN
				IF CURSORGETPROP('SourceType', LTABLA)=2
					IF HNDCONN=0
						HNDCONN = CURSORGETPROP('ConnectHandle', LTABLA)
					ENDIF
					IF SQLGETPROP(HNDCONN, "ODBChdbc")<>SQLGETPROP(CURSORGETPROP('ConnectHandle', LTABLA), "ODBChdbc")
						MESSAGEBOX('La conexion debe ser compartida', 048, "Futura Software")
						RETURN .F.
					ENDIF
				ENDIF
				LLERROR =  .NOT. TABLEUPDATE(.T., .T., LTABLA, LAERROR)
				IF .NOT. LLERROR 
					LLERROR =  .NOT. THIS.AFTERUPDATETABLA8()
				ENDIF
					
			ENDIF	
			
			IF LLERROR
				LNELEMENTO = AERROR(LAERROR)
				IF TYPE('gaError(1)')<>"U"
					LAERROR(2) = GAERROR(2)
				ELSE
					IF LAERROR(1)=1539
						LAERROR[2] = THIS.AERRORMSG(LAERROR(5))
					ENDIF
				ENDIF
				ROLLBACK
				LCERROR = ''
				FOR I = 1 TO LNELEMENTO
					LCERROR = LCERROR+TRANSFORM(I)+') '+LAERROR(I, 3)+CHR(13)
				ENDFOR
				IF HNDCONN>0
					= SQLROLLBACK(HNDCONN)
				ENDIF
				=RegistrarError(LCERROR)
				MESSAGEBOX('No se pudo grabar.'+CHR(13)+LCERROR, 048, "Futura Software")
				RETURN .F.
			ELSE
				THIS.REGISTROBORRADO = .F.
				END TRANSACTION
				FLUSH
				IF HNDCONN>0
					= SQLCOMMIT(HNDCONN)
				ENDIF
				LTABLA = THIS.TABLA1
				SELECT &LTABLA
				WAIT WINDOW NOWAIT "Se ha guardado la información."
		
				IF  .NOT. THIS.AFTERUPDATE()
					RETURN .F.
				ENDIF
		
			ENDIF
			THIS.EDITAR()
		ENDIF
		
		**VG 11/03/2010
		**Se debe activar el menu si el form esta en _screen
		IF this.ShowWindow= 0
			ACTIVATE MENU _MSYSMENU NOWAIT
		ENDIF
		
		RETURN  .NOT. LLERROR
	ENDPROC

	PROCEDURE savewindowpos		&& Guarda la posición de la ventana en el archivo INI.
		LPARAMETERS TCENTRY
		LOCAL LCVALUE, LCENTRY
		IF PCOUNT()=0
		LCENTRY = THISFORM.CAPTION
		ELSE
		LCENTRY = TCENTRY
		ENDIF
		LCVALUE = ALLTRIM(STR(MAX(THISFORM.TOP, 0)))+','+ALLTRIM(STR(MAX(THISFORM.LEFT, 0)))
		= WRITEPRIVSTR("WindowPositions", LCENTRY, LCVALUE, CURDIR()+"FUTURA.INI")
	ENDPROC

	PROCEDURE seleccionargrid
		LPARAMETERS TAMENU, TCONSELECTION
		LOCAL LCONSELECTION, LNMENUCOUNT, LNCOUNT, LLDOUBLEARRAY
		LOCAL LCMENUITEM, LCMENUSELECTION
		EXTERNAL ARRAY TAMENU
		IF PARAMETERS()=0 .OR. TYPE("taMenu")<>"C"
		RETURN .F.
		ENDIF
		LNMENUCOUNT = 0
		LNMENUCOUNT = ALEN(TAMENU, 1)
		IF LNMENUCOUNT=0
		RETURN .F.
		ENDIF
		LLDOUBLEARRAY = (ALEN(TAMENU, 2)>0)
		ACTIVATE SCREEN
		DEACTIVATE POPUP _POPSHORTCUTMENU
		DEFINE POPUP _POPSHORTCUTMENU FROM MROW(), MCOL() MARGIN RELATIVE SHORTCUT
		FOR LNCOUNT = 1 TO LNMENUCOUNT
		LCMENUITEM = IIF(LLDOUBLEARRAY, TAMENU(LNCOUNT, 1), TAMENU(LNCOUNT))
		DEFINE BAR LNCOUNT OF _POPSHORTCUTMENU PROMPT (LCMENUITEM)
		ENDFOR
		ON SELECTION POPUP _POPSHORTCUTMENU DEACTIVATE POPUP _POPSHORTCUTMENU
		ACTIVATE POPUP _POPSHORTCUTMENU
		RELEASE POPUPS _POPSHORTCUTMENU
		IF BAR()=0
		RETURN .F.
		ENDIF
		IF LLDOUBLEARRAY
		LCMENUSELECTION = TAMENU(BAR(), 2)
		IF  .NOT. EMPTY(LCMENUSELECTION) .AND. TYPE("lcMenuSelection")=="C"
		LCONSELECTION = ALLTRIM(LCMENUSELECTION)
		ENDIF
		IF EMPTY(LCONSELECTION)
		LCONSELECTION = ALLTRIM(IIF(EMPTY(TCONSELECTION), "", TCONSELECTION))
		ENDIF
		ELSE
		LCONSELECTION = ALLTRIM(IIF(EMPTY(TCONSELECTION), "", TCONSELECTION))
		ENDIF
		IF EMPTY(LCONSELECTION)
		RETURN .F.
		ENDIF
		&LCONSELECTION
	ENDPROC

	HIDDEN PROCEDURE ultimonro_access
		Local LCXCAMPO, LCXTABLA, LCXCONDICION, LCALIAS, LCTIPO, LCDEVUELVE
		Do Case
		Case At(",", This.CAMPONRO, 2)>0
			LCXCAMPO = Substr(This.CAMPONRO, 1, At(",", This.CAMPONRO, 1)-1)
			LCXTABLA = Substr(This.CAMPONRO, At(",", This.CAMPONRO, 1)+1, At(",", This.CAMPONRO, 2)-At(",", This.CAMPONRO, 1)-1)
			LCXCONDICION = Substr(This.CAMPONRO, At(",", This.CAMPONRO, 2)+1)
		Case At(",", This.CAMPONRO, 1)>0
			LCXCAMPO = Substr(This.CAMPONRO, 1, At(",", This.CAMPONRO, 1)-1)
			LCXTABLA = Substr(This.CAMPONRO, At(",", This.CAMPONRO, 1)+1)
			LCXCONDICION = ''
		Otherwise
			LCXCAMPO = This.CAMPONRO
			LCXTABLA = ''
			LCXCONDICION = ''
		Endcase
		If Empty(LCXCONDICION)
			LCXCONDICION = " isnumeric("+LCXCAMPO+")=1  "
		Else
			LCXCONDICION = LCXCONDICION+" and isnumeric("+LCXCAMPO+")=1 "
		Endif
		LCXTABLA = Alltrim(LCXTABLA)
		LCALIAS = Alias()
		LCTIPO = Iif(Empty(This.CAMPOTAM), 'N', 'C')
		If LCTIPO="C"
			LCXCONDICION = LCXCONDICION+" and len(RTRIM(LTRIM("+LCXCAMPO+")))<="+Str(This.CAMPOTAM)
			LCXCAMPO = "CAST("+Alltrim(LCXCAMPO)+" AS INT )"
		Endif
		If Sql('SELECT DISTINCT TOP 1 '+LCXCAMPO+' as numero'+' FROM '+LCXTABLA+Iif(Empty(LCXCONDICION), '', ' WHERE  '+LCXCONDICION)+' ORDER BY 1 DESC', 'xDevuelveNro')>0
			If Reccount('xDevuelveNro')>0
				If LCTIPO="N"
					This.ULTIMONRO = XDEVUELVENRO.NUMERO+1
				Else
					LCDEVUELVE = Alltrim(Str(XDEVUELVENRO.NUMERO+1))
					If  .Not. Empty(This.CAMPOTAM) .And. Len(LCDEVUELVE)<This.CAMPOTAM
						LCDEVUELVE = Right(Replicate("0", This.CAMPOTAM)+LCDEVUELVE, This.CAMPOTAM)
					Endif
					This.ULTIMONRO = LCDEVUELVE
				Endif
			Else
				If LCTIPO="N"
					This.ULTIMONRO = 1
				Else
					LCDEVUELVE = "1"
					If  .Not. Empty(This.CAMPOTAM)
						LCDEVUELVE = Right(Replicate("0", This.CAMPOTAM)+LCDEVUELVE, This.CAMPOTAM)
					Endif
					This.ULTIMONRO = LCDEVUELVE
				Endif
			Endif
			Use In XDEVUELVENRO
			If  .Not. Empty(LCALIAS)
				Select (LCALIAS)
			Endif
		Endif
		Return This.ULTIMONRO
	ENDPROC

	PROCEDURE Unload
		SET MESSAGE TO
	ENDPROC

	PROCEDURE validar		&& Función para valiadar los datos del formularios
		THIS.LBLREQUERIDO.VISIBLE = .F.
		RETURN .T.
	ENDPROC

	PROCEDURE validarauto
		Local LLERROR
		LLERROR = .F.
		If Alen(This.VALIDARCONTROLES)=1
			Return .T.
		Endif
		Thisform.Cls()
		For I = 1 To Alen(This.VALIDARCONTROLES)-1
			If This.VALIDARCONTROLES(I).VALIDARAUTO()=.F.
				LLERROR = .T.
				If Empty(This.VALIDARCONTROLES(I).MENSAJEVALIDACION)
					This.MARCARREQUERIDO(This.VALIDARCONTROLES(I))
				Else
					Messagebox(This.VALIDARCONTROLES(I).MENSAJEVALIDACION, 64, "Futura Software")
					This.VALIDARCONTROLES(I).SetFocus()
					Return .F.
				Endif
			Endif
		Endfor
		If LLERROR
			Messagebox("Complete los datos requeridos.", 64, "Futura Software")
		Endif
		Return  .Not. LLERROR
	ENDPROC

	PROCEDURE versiones		&& En este lugar se describe el historico de versiones del objeto
	ENDPROC

	PROCEDURE waitmode		&& Activa y desactiva el cursor de espera para todos los controles de la pantalla.
		LPARAMETERS TLWAITMODE
		LNMOUSEPOINTER = IIF(TLWAITMODE, 11, 0)
		THISFORM.MOUSEPOINTER = LNMOUSEPOINTER
		THISFORM.SETALL('MousePointer', LNMOUSEPOINTER)
	ENDPROC

	PROCEDURE writebuffer		&& Se llama cuando necesitamos escribir el contenido del control actual desde el búfer a disco.
		LOCAL LLRETVAL
		LLRETVAL = .T.
		THIS.TOWRITEBUFFER.VISIBLE = .T.
		THIS.TOWRITEBUFFER.SETFOCUS()
		THIS.TOWRITEBUFFER.VISIBLE = .F.
		RETURN LLRETVAL
	ENDPROC

ENDDEFINE

DEFINE CLASS tscheckbox AS checkbox 		&& CheckBox de base
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\checkbx.bmp" ClassIcon="..\bitmaps\checkbx.bmp" />

	*<DefinedPropArrayMethod>
		*p: editable
	*</DefinedPropArrayMethod>

	Alignment = 0
	BackStyle = 0
	Caption = "Casilla1"
	editable = .T.
	FontSize = 8
	Height = 15
	Name = "tscheckbox"
	Width = 148
	
	PROCEDURE Refresh
		IF THIS.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		DODEFAULT()
	ENDPROC

ENDDEFINE

DEFINE CLASS tscombobox AS combobox 		&& ComboBox de base
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\combo.bmp" ClassIcon="..\bitmaps\combo.bmp" />

	*<DefinedPropArrayMethod>
		*m: *validarauto
		*p: cmdsql
		*p: condicionvalidacion
		*p: cursor
		*p: editable
		*p: mensajevalidacion
		*p: origen
		*p: requerido		&& Indica si es un campo requerido.
		*p: solonuevo		&& Indica si esta disponible solo cuando se agrega un nuevo registro.
	*</DefinedPropArrayMethod>

	BackColor = 255,255,254
	cmdsql = 
	condicionvalidacion = 
	cursor = 
	DisabledForeColor = 0,0,0
	editable = .T.
	FontBold = .F.
	FontSize = 8
	Height = 22
	mensajevalidacion = 
	Name = "tscombobox"
	origen = R
	Style = 2
	TabIndex = 1
	Width = 200
	
	PROCEDURE Init
		IF TYPE("BORDER_COLOR")="N"
		IF  .NOT. EMPTY("13875625")
		THIS.BORDERCOLOR = VAL("13875625")
		ELSE
		THIS.RESETTODEFAULT("BorderColor")
		ENDIF
		ENDIF
		IF  .NOT. EMPTY(THIS.CMDSQL)
		IF SQL(THIS.CMDSQL, THIS.CURSOR)>0
		this.RowSource=""
		THIS.ROWSOURCETYPE = 0
		THIS.ROWSOURCETYPE = 2
		THIS.ROWSOURCE = THIS.CURSOR
		ENDIF
		ENDIF
		IF THIS.REQUERIDO .AND. EMPTY(THIS.CONDICIONVALIDACION)
		THIS.CONDICIONVALIDACION = "!Empty("+THIS.CONTROLSOURCE+")"
		ENDIF
		IF  .NOT. EMPTY(THIS.CONDICIONVALIDACION)
		I = ALEN(THISFORM.VALIDARCONTROLES)
		DIMENSION THISFORM.VALIDARCONTROLES(I+1)
		THISFORM.VALIDARCONTROLES(I) = THIS
		ENDIF
		
	ENDPROC

	PROCEDURE Refresh
		IF THIS.EDITABLE
		IF THIS.SOLONUEVO
		THIS.ENABLED = THISFORM.EDITMODE .AND. IIF(ISNULL(GETFLDSTATE(-1, THISFORM.TABLA1)), .F., ("3"$GETFLDSTATE(-1, THISFORM.TABLA1) .OR. "4"$GETFLDSTATE(-1, THISFORM.TABLA1)))
		ELSE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		ENDIF
		DODEFAULT()
		
	ENDPROC

	PROCEDURE Requery
		THIS.INIT()
	ENDPROC

	PROCEDURE RightClick
		THIS.REQUERY()
	ENDPROC

	PROCEDURE validarauto
		RETURN EVALUATE(THIS.CONDICIONVALIDACION)
	ENDPROC

ENDDEFINE

DEFINE CLASS tscommandbutton AS commandbutton 		&& CommandButton de base
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\pushb.bmp" ClassIcon="..\bitmaps\pushb.bmp" />

	*<DefinedPropArrayMethod>
		*p: editable
	*</DefinedPropArrayMethod>

	Caption = "Comando1"
	FontBold = .T.
	FontSize = 8
	Height = 26
	Name = "tscommandbutton"
	TabIndex = 1
	Width = 76
	
	PROCEDURE Refresh
		IF THIS.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		DODEFAULT()
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tsdataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="Pixels" Uniqueid="" />

	DataSource = .NULL.
	Name = "tsdataenvironment"
	
	PROCEDURE BeforeOpenTables
		DO seteo
		oApp.SetDataBase(this)
	ENDPROC

ENDDEFINE

DEFINE CLASS tseditbox AS editbox 		&& EditBox de base
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\editbox.bmp" ClassIcon="..\bitmaps\editbox.bmp" />

	*<DefinedPropArrayMethod>
		*p: editable
	*</DefinedPropArrayMethod>

	BorderColor = 128,128,255
	ColorSource = 0
	FontBold = .F.
	FontSize = 8
	Name = "tseditbox"
	SpecialEffect = 1
	TabIndex = 1
	
	PROCEDURE Refresh
		IF THIS.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tsformretval AS form 		&& Formulario de base utilizado para crear formularios que devuelven un valor. Los formularios basados en esta clase deben crearse como una clase (es decir, deben almacenarse en un VCX, no en un SCX).
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\form.bmp" ClassIcon="..\bitmaps\form.bmp" />

	*<DefinedPropArrayMethod>
		*p: lallowdelete
		*p: uretval		&& Propiedad para almacenar el valor de retorno del formulario. Puede ser cualquier tipo de datos.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Formulario1"
	Comment = "(c) Microsoft Corporation 1995"
	ControlBox = .F.
	DoCreate = .T.
	FontSize = 8
	MaxButton = .F.
	MinButton = .F.
	Name = "tsformretval"
	uretval = .T.		&& Propiedad para almacenar el valor de retorno del formulario. Puede ser cualquier tipo de datos.
	WindowType = 1
	
	PROCEDURE Activate
		ACTIVATE MENU _MSYSMENU NOWAIT
		SET MESSAGE TO THISFORM.CAPTION
	ENDPROC

	PROCEDURE Init
		IF TYPE("m.gTTrade")<>'L' .OR.  .NOT. M.GTTRADE
		= MESSAGEBOX(CLASSBROWERR_LOC)
		RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE Unload
		SET MESSAGE TO
	ENDPROC

ENDDEFINE

DEFINE CLASS tsgrid AS grid 		&& Grid de base
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\datagrid.bmp" ClassIcon="..\bitmaps\datagrid.bmp" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *agregaritem		&& Agrega un nuevo Item en el Detalle.
		*m: *borraritem
		*m: *sumcolumn		&& Procedimiento para sumar la columna.
		*p: campo		&& Indica el campo que se actualiza cuando se agrega un nuevo registro en el detalle.
		*p: cfieldtosum		&& El nombre del campo que se va a sumar.
		*p: codigo
		*p: editable
		*p: repetirvalores		&& Indica los Campos que repiten su valor cuando se agrega un nuevo detalle.
		*p: teclaagregar		&& Indica si puede agregar un registro con la tecla Fecha Abajo.
		*p: titulo		&& Indica el Titulo de la grilla.
		*p: valor		&& Indica el origen del valor para actualizar los campos en el registro agregado.
		*p: valorvariable		&& Indica el origen de la variable para recuperar la vista.
		*p: valorvariable2		&& Indica el origen de la segunda variable para recuperar la  vista.
		*p: variablevista		&& Es la variable utilizada para recuperar la vista.
		*p: variablevista2		&& Es la segunda variable utilizada para recuperar la vista.
		*a: ^totales[4,0]		&& Almacena la suma de las columnas especificadas en la propiedad cFieldToSum.
	*</DefinedPropArrayMethod>

	AllowHeaderSizing = .F.
	AllowRowSizing = .F.
	cfieldtosum = 		&& El nombre del campo que se va a sumar.
	ColumnCount = -1
	DeleteMark = .F.
	FontBold = .F.
	FontSize = 8
	GridLineColor = 128,128,255
	Highlight = .F.
	HighlightForeColor = 0,0,0
	HighlightStyle = 2
	Name = "tsgrid"
	RecordMark = .F.
	RecordSource = ""
	RowHeight = 17
	SelectedItemBackColor = 247,223,187
	SelectedItemForeColor = 0,64,128
	TabIndex = 1
	titulo = Detalle		&& Indica el Titulo de la grilla.
	valorvariable = 		&& Indica el origen de la variable para recuperar la vista.
	valorvariable2 = 		&& Indica el origen de la segunda variable para recuperar la  vista.
	variablevista = 		&& Es la variable utilizada para recuperar la vista.
	variablevista2 = 		&& Es la segunda variable utilizada para recuperar la vista.
	Width = 319
	
	PROCEDURE agregaritem		&& Agrega un nuevo Item en el Detalle.
		Lparameters LLINSERTAR
		Local CTABLA, CVALOR, CCAMPO, CCODIGO, LNRECNO, LCREPETIRVALORES, LCALIAS
		= Thisform.WRITEBUFFER()
		LCALIAS = Alias()
		CCAMPO = This.CAMPO
		CTABLA = This.RecordSource
		CVALOR = This.VALOR
		CCODIGO = This.CODIGO
		LCREPETIRVALORES = This.REPETIRVALORES
		
		LNRECNO = Recno(CTABLA)
		*SET STEP ON
		
		Select (CTABLA)
		If LNRECNO<=0
			LNRECNO = 1
		Endif
		Goto Bottom
		If  .Not. Empty(LCREPETIRVALORES)
			Scatter Memvar Memo Fields &LCREPETIRVALORES
		Endif
		If  .Not. Empty(CCODIGO)
			CCODIGO = CTABLA+'.'+CCODIGO
			If Empty(&CCODIGO) And !Eof(CTABLA) And !LLINSERTAR
				Return
			Endif
			Delete All For Empty(&CCODIGO)In &CTABLA
		Endif
		If LLINSERTAR
			Goto LNRECNO
			Copy To Array LADETALLE Rest
		Endif
		Insert Into &CTABLA(&CCAMPO) Value(&CVALOR)
		If LLINSERTAR
			Scatter Memo Memvar
			Goto LNRECNO
			Gather Memo Memvar
			Skip
			Replace From Array LADETALLE Rest
			Goto LNRECNO
		Endif
		If  .Not. Empty(LCREPETIRVALORES)
			Gather Memvar Memo Fields &LCREPETIRVALORES
		ENDIF
		
		
		
		If  .Not. Empty(LCALIAS)
			Select (LCALIAS)
		Endif
		This.SetFocus()
		
		If LLINSERTAR
			This.ActivateCell(LNRECNO, 1)
		ELSE
			This.ActivateCell(This.ActiveRow, 1)
		
		ENDIF
		This.Refresh()
	ENDPROC

	PROCEDURE borraritem
		SELECT (THIS.RECORDSOURCE)
		IF  .NOT. EOF() .AND.  .NOT. BOF()
		DELETE
		THIS.TAG = 'B'
		SKIP
		IF EOF()
		SKIP -1
		ENDIF
		SELECT (THISFORM.TABLA1)
		GOTO RECNO()
		THISFORM.REGISTROBORRADO = .T.
		ENDIF
		THIS.REFRESH()
	ENDPROC

	PROCEDURE Init
		IF TYPE("BORDER_COLOR")="N"
		IF  .NOT. EMPTY("13875625")
		THIS.GRIDLINECOLOR = VAL("13875625")
		ELSE
		THIS.RESETTODEFAULT("GridLineColor")
		ENDIF
		ENDIF
		DODEFAULT()
		THIS.TOTALES = 0
		FOR I = 1 TO 4
		IF TYPE('thisform.grids(i)')<>'O' .AND.  .NOT. EMPTY(THIS.CAMPO)
		THISFORM.GRIDS(I) = THIS
		THISFORM.DETALLE = .T.
		EXIT
		ENDIF
		ENDFOR
		
	ENDPROC

	PROCEDURE Refresh
		If This.EDITABLE
			This.SetAll('enabled', Thisform.EDITMODE, 'Column')
		Endif
		If  .Not. Empty(This.VARIABLEVISTA) .And. Empty(This.Tag) .And. ( .Not. Thisform.EDITMODE)
			CVARIABLE = This.VARIABLEVISTA
			CVARIABLE2 = This.VARIABLEVISTA2
			Local &CVARIABLE,LCVALOR
			LCVALOR = This.VALORVARIABLE
			&CVARIABLE=&LCVALOR
			If  .Not. Empty(This.VALORVARIABLE2)
				Local &CVARIABLE2,LCVALOR2
				LCVALOR2 = This.VALORVARIABLE2
				&CVARIABLE2=&LCVALOR2
			Endif
			CVISTA = This.RecordSource
			= Requery(CVISTA)
		Endif
		This.Tag = ''
		DoDefault()
	ENDPROC

	PROCEDURE sumcolumn		&& Procedimiento para sumar la columna.
		IF EMPTY(THIS.CFIELDTOSUM)
			RETURN
		ENDIF
		LOCAL LNOLDAREA, LNOLDRECNO, LUKEY, LCFIELDTOSUM, LCORDER
		LNOLDAREA = SELECT()
		THIS.TOTALES = 0
		LCFIELDTOSUM = ""
		IF EMPTY(THIS.RECORDSOURCE)
			RETURN
		ENDIF
		SELECT (THIS.RECORDSOURCE)
		LCORDER = ORDER()
		LUKEY = IIF( .NOT. EMPTY(LCORDER), EVALUATE(LCORDER), "")
		LNOLDRECNO = IIF(EOF(), 0, RECNO())
		*LNOLDRECNO =this.ActiveRow
		*lnNroCol= this.ActiveColumn
		DEBUGOUT 'Inicial'
		DEBUGOUT ALIAS()
		DEBUGOUT LNOLDRECNO
		LCFIELDTOSUM = THIS.CFIELDTOSUM
		IF  .NOT. EMPTY(LCORDER) .AND. SEEK(LUKEY)
			SUM &LCFIELDTOSUM.  WHILE LUKEY = EVAL(LCORDER) TO ARRAY THIS.TOTALES
		ELSE
			IF CURSORGETPROP("SOURCETYPE")=1 .OR. CURSORGETPROP("SOURCETYPE")=2 OR CURSORGETPROP("SOURCETYPE")>100	&&VG CursorAdapters 18/07/07
				SUM &LCFIELDTOSUM.  TO ARRAY THIS.TOTALES
			ENDIF
		ENDIF
		IF LNOLDRECNO<>0 &&AND lnNroCol<>0
			*this.ActivateCell(LNOLDRECNO,lnNroCol)
			GO (LNOLDRECNO)
		ENDIF
		DEBUGOUT 'Final'
		DEBUGOUT ALIAS()
		DEBUGOUT LNOLDRECNO
		*DEBUGOUT lnNroCol
		
		SELECT (LNOLDAREA)
	ENDPROC

ENDDEFINE

DEFINE CLASS tshora AS tstextbox OF "tsbase.vcx" 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 21
	InputMask = "99:99"
	Name = "tshora"
	Width = 77
	
	PROCEDURE Valid
		IF  .NOT. EMPTY(THIS.VALUE)
			IF VAL(SUBSTR(THIS.VALUE, 1, 2))<0 .OR. VAL(SUBSTR(THIS.VALUE, 1, 2))>23
				MESSAGEBOX(" La hora deber ser entre 0 y 23")
				RETURN .F.
			ENDIF
			IF VAL(SUBSTR(THIS.VALUE, 4, 2))<0 .OR. VAL(SUBSTR(THIS.VALUE, 4, 2))>59
				MESSAGEBOX("El minuto deber ser entre 0 y 59")
				RETURN .F.
			ENDIF
			this.Value=RIGHT("00" +ALLTRIM(LEFT(this.Value,2)),2) +":" + RIGHT("00" +ALLTRIM(right(this.Value,2)),2)
		ENDIF
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS tsifcombo AS combobox 		&& Cuadro combinado especial para "búsquedas inteligentes". Realiza "búsquedas" incrementales a medida que el usuario escribe texto.  
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\..\tesoreria" ClassIcon="..\bitmaps\intell_s.bmp" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*p: archivo
		*p: calias		&& Contiene el alias donde hacer la búsqueda.
		*p: campos
		*p: cdestino
		*p: cfield		&& Campo al que aplicar EVAL() cuando se muestre la parte de cuadro de texto.
		*p: csearchstring		&& Contiene el texto que el usuario está escribiendo.
		*p: istag		&& Indica si existe o no la etiqueta de indice.
		*p: llimittolist		&& Es True si el usuario está limitado a agregar elementos que ya están en la lista.
		*p: orden
	*</DefinedPropArrayMethod>

	PROTECTED RowSourceType,Style
	calias = 		&& Contiene el alias donde hacer la búsqueda.
	cdestino = 
	cfield = 		&& Campo al que aplicar EVAL() cuando se muestre la parte de cuadro de texto.
	csearchstring = 		&& Contiene el texto que el usuario está escribiendo.
	DisabledBackColor = 192,192,192
	DisplayValue = tsifcombo
	FontSize = 8
	Height = 21
	IncrementalSearch = .F.
	llimittolist = .T.		&& Es True si el usuario está limitado a agregar elementos que ya están en la lista.
	Name = "tsifcombo"
	RowSourceType = 0
	Style = 0
	TabIndex = 1
	Width = 200
	
	PROCEDURE Init
		LOCAL LCROWSOURCE, LNPOSFROM, LCALIAS, LCTAGNAME, LCCONTROLSOURCE, LCSQL
		LCSQL = 'select '+THIS.CAMPOS+' from '+THIS.ARCHIVO+' order by '+THIS.ORDEN+' into cursor ccursor'
		&LCSQL
		THIS.ADDITEM('(TODOS)')
		IF _TALLY>0
		DO WHILE  .NOT. EOF('cCursor')
		THIS.ADDITEM(EVALUATE(THIS.CAMPOS))
		SKIP IN CCURSOR
		ENDDO
		ENDIF
		LCCONTROLSOURCE = THIS.CONTROLSOURCE
		LCROWSOURCE = LCSQL
		LNPOSFROM = ATC("FROM", LCROWSOURCE)
		LCALIAS = ALLTRIM(SUBSTR(LCROWSOURCE, LNPOSFROM+4))
		LCALIAS = TRIM(LEFT(LCALIAS, AT(" ", LCALIAS)))
		IF ","$LCALIAS
		LCALIAS = LEFT(LCALIAS, LEN(LCALIAS)-1)
		ENDIF
		THIS.CALIAS = LCALIAS
		IF  .NOT. EMPTY(THIS.CDESTINO)
		LCTAGNAME = ALLTRIM(THIS.CDESTINO)
		ELSE
		LCTAGNAME = ALLTRIM(SUBSTR(LCROWSOURCE, AT(" ", LCROWSOURCE)))
		LCTAGNAME = ALLTRIM(LEFT(LCTAGNAME, AT(" ", LCTAGNAME)))
		IF ","$LCTAGNAME
		LCTAGNAME = SUBSTR(LCTAGNAME, 1, AT(",", LCTAGNAME)-1)
		ENDIF
		ENDIF
		IF "."$LCTAGNAME
		LCTAGNAME = SUBSTR(LCTAGNAME, AT(".", LCTAGNAME)+1)
		ENDIF
		THIS.CFIELD = LCALIAS+"."+LCTAGNAME
		LCTAGNAME = LEFT(LCTAGNAME, 10)
		IF EMPTY(THIS.CDESTINO)
		THIS.CDESTINO = LCTAGNAME
		ENDIF
		THIS.ISTAG = ISTAG(LCTAGNAME, LCALIAS)
		IF  .NOT. THIS.ISTAG
		WAIT WINDOW NOWAIT "La etiqueta de índice no se ha encontrado."+CHR(13)+LCTAGNAME
		ENDIF
		THIS.CONTROLSOURCE = LCCONTROLSOURCE
		
		
	ENDPROC

	PROCEDURE InteractiveChange
		LOCAL LCFIELD
		THIS.CSEARCHSTRING = ""
		LCFIELD = THIS.CFIELD
		IF THIS.ISTAG
		=LOOKUP(&LCFIELD,  UPPER(THIS.DISPLAYVALUE), &LCFIELD,  THIS.CDESTINO)
		ELSE
		LOCATE FOR EVALUATE(THIS.ORDEN)=UPPER(THIS.DISPLAYVALUE)
		ENDIF
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS NKEYCODE, NSHIFTALTCTRL
		LOCAL LNRECNO, LCOLDALIAS
		LCOLDALIAS = ALIAS()
		SELECT (THIS.CALIAS)
		IF BITAND(4, NSHIFTALTCTRL)==4
		RETURN
		ENDIF
		IF INLIST(NKEYCODE, 4, 19) .OR. (INLIST(NKEYCODE, 52, 54) .AND. BITAND(1, NSHIFTALTCTRL)==1) .OR. (INLIST(2, 26) .AND. BITAND(2, NSHIFTALTCTRL)==2) .OR. NKEYCODE=127
		RETURN
		ENDIF
		LNRECNO = RECNO(THIS.CALIAS)
		DO CASE
		CASE NKEYCODE=24
		IF EMPTY(THIS.DISPLAYVALUE)
		GOTO TOP IN (THIS.CALIAS)
		ELSE
		IF  .NOT. EOF(THIS.CALIAS)
		SKIP IN (THIS.CALIAS)
		ENDIF
		IF EOF(THIS.CALIAS)
		GOTO BOTTOM IN (THIS.CALIAS)
		ENDIF
		ENDIF
		CASE NKEYCODE=5
		IF EMPTY(THIS.DISPLAYVALUE)
		GOTO TOP IN (THIS.CALIAS)
		ELSE
		IF  .NOT. BOF(THIS.CALIAS)
		SKIP -1 IN (THIS.CALIAS)
		ENDIF
		IF BOF(THIS.CALIAS)
		GOTO TOP IN (THIS.CALIAS)
		ENDIF
		ENDIF
		CASE BETWEEN(NKEYCODE, 32, 126)
		THIS.CSEARCHSTRING = THIS.CSEARCHSTRING+CHR(NKEYCODE)
		OTHERWISE
		RETURN
		ENDCASE
		NODEFAULT
		IF NKEYCODE<>5 .AND. NKEYCODE<>24 .AND.  .NOT. EMPTY(THIS.CSEARCHSTRING)
		IF THIS.ISTAG
		= SEEK(UPPER(THIS.CSEARCHSTRING), THIS.CALIAS, THIS.CDESTINO)
		ELSE
		LOCATE FOR EVALUATE(THIS.ORDEN)=UPPER(THIS.CSEARCHSTRING)
		ENDIF
		ENDIF
		IF (EMPTY(THIS.CSEARCHSTRING) .OR. EOF(THIS.CALIAS)) .AND. NKEYCODE<>5 .AND. NKEYCODE<>24
		IF LNRECNO>RECCOUNT(THIS.CALIAS)
		GOTO TOP IN (THIS.CALIAS)
		ELSE
		GOTO LNRECNO IN (THIS.CALIAS)
		ENDIF
		IF  .NOT. THIS.LLIMITTOLIST
		THIS.DISPLAYVALUE = THIS.CSEARCHSTRING
		THIS.SELLENGTH = 0
		ELSE
		THIS.CSEARCHSTRING = LEFT(THIS.CSEARCHSTRING, LEN(THIS.CSEARCHSTRING)-1)
		ENDIF
		ELSE
		THIS.DISPLAYVALUE = EVALUATE(THIS.ORDEN)
		THIS.SELLENGTH = LEN(THIS.DISPLAYVALUE)
		ENDIF
		THIS.SELSTART = LEN(THIS.CSEARCHSTRING)
		SELECT (LCOLDALIAS)
	ENDPROC

	PROCEDURE LostFocus
		THIS.CSEARCHSTRING = ""
		THIS.SELSTART = 0
	ENDPROC

	PROCEDURE Valid
		RETURN .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS tslabel AS label 		&& Label de base
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\label.bmp" ClassIcon="..\bitmaps\label.bmp" />

	Alignment = 1
	BackStyle = 0
	Caption = "Etiqueta1"
	Comment = ""
	FontBold = .T.
	FontSize = 8
	Height = 22
	Name = "tslabel"
	Style = 4
	TabIndex = 1
	Width = 77

ENDDEFINE

DEFINE CLASS tslistbox AS listbox 		&& ListBox de base
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\listbox.bmp" ClassIcon="..\bitmaps\listbox.bmp" />

	DisabledBackColor = 192,192,192
	FontBold = .F.
	FontSize = 8
	Height = 104
	Name = "tslistbox"
	Width = 125
	
	PROCEDURE Init
		**
		** ReFox - este procedimiento es vacío **
		**
	ENDPROC

ENDDEFINE

DEFINE CLASS tsmaintform AS tsbaseform OF "tsbase.vcx" 		&& El formulario de base en el que se basan todos los formularios de tipo mantenimiento.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\form.bmp" ClassIcon="..\bitmaps\form.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Pageframe1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pageframe1.Page2.grdList" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\tastrade.h"
	PROTECTED addtomenu,removefrommenu,restorewindowpos,savewindowpos
	DoCreate = .T.
	Height = 271
	MDIForm = .F.
	Name = "tsmaintform"
	ScaleMode = 3
	Width = 381
	lblRequerido.Name = "lblRequerido"

	ADD OBJECT 'Pageframe1' AS pageframe WITH ;
		Anchor = 15, ;
		ErasePage = .T., ;
		Height = 271, ;
		Left = 0, ;
		Name = "Pageframe1", ;
		PageCount = 2, ;
		Tabs = .T., ;
		Top = 0, ;
		Width = 382, ;
		Page1.Caption = "En\<trada de datos", ;
		Page1.FontSize = 8, ;
		Page1.Name = "Page1", ;
		Page2.Caption = "\<Lista", ;
		Page2.FontSize = 8, ;
		Page2.Name = "Page2", ;
		Page2.Tag = "Lista"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'Pageframe1.Page2.grdList' AS tsgrid WITH ;
		Left = 0, ;
		Name = "grdList", ;
		ReadOnly = .T., ;
		RecordSource = "", ;
		TabIndex = 1, ;
		Top = 0
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="grid" />
	
	PROCEDURE addnew
		THISFORM.PAGEFRAME1.ACTIVEPAGE = 1
		TSBASEFORM::ADDNEW()
	ENDPROC

	PROCEDURE AfterDock
		THIS.PAGEFRAME1.WIDTH = THIS.WIDTH
		THIS.PAGEFRAME1.HEIGHT = THIS.HEIGHT
	ENDPROC

	PROCEDURE editar
		DODEFAULT()
		*MESSAGEBOX(thisform.pageframe1.Pages(thisform.pageframe1.ActivePage).tag)
		IF thisform.pageframe1.Pages(thisform.pageframe1.ActivePage).tag="Lista"
			THISFORM.PAGEFRAME1.ACTIVEPAGE = 1
			THISFORM.PAGEFRAME1.PAGE1.SETFOCUS()
		ENDIF
			
		KEYBOARD CHR(9)
		
		
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		THISFORM.PAGEFRAME1.PAGE2.ENABLED = THISFORM.NAVEGADOR
		*THIS.HEIGHT = THIS.PAGEFRAME1.HEIGHT
		*THIS.WIDTH = THIS.PAGEFRAME1.WIDTH
	ENDPROC

	PROCEDURE Pageframe1.Page1.Activate
		THISFORM.REFRESHFORM()
		
	ENDPROC

	PROCEDURE Pageframe1.Page2.Activate
		LOCAL LCALIAS, IREC
		SET DATASESSION TO THISFORM.DATASESSIONID
		LCALIAS = THISFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS
		IF  .NOT. EMPTY(LCALIAS)
		SELECT (LCALIAS)
		ENDIF
		IF THISFORM.ISNEWANDEMPTY()
		THISFORM.RESTORE()
		IREC = RECNO()
		IF BOF()
		GOTO TOP
		ELSE
		IF IREC>RECCOUNT()
		GOTO BOTTOM
		ELSE
		GOTO IREC
		ENDIF
		ENDIF
		THIS.GRDLIST.REFRESH
		ELSE
		IF THISFORM.DATACHANGED() .AND. THISFORM.ASKTOSAVE()=2
		THISFORM.PAGEFRAME1.ACTIVEPAGE = 1
		RETURN
		ENDIF
		THIS.REFRESH()
		ENDIF
		THIS.GRDLIST.SETFOCUS()
	ENDPROC

	PROCEDURE Pageframe1.Page2.grdList.Init
		THIS.SETALL("ReadOnly", .T., "Column")
	ENDPROC

	PROCEDURE Pageframe1.Page2.Init
		THIS.GRDLIST.TOP = 0
		THIS.GRDLIST.LEFT = 0
		THIS.GRDLIST.WIDTH = THIS.PARENT.PAGEWIDTH
		THIS.GRDLIST.HEIGHT = THIS.PARENT.PAGEHEIGHT
		THIS.ENABLED = THISFORM.NAVEGADOR
	ENDPROC

ENDDEFINE

DEFINE CLASS tsmarco_pag AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: *filtrar		&& Filtro de integrantes por CAR
	*</DefinedPropArrayMethod>

	ErasePage = .T.
	Height = 169
	Name = "tsmarco_pag"
	PageCount = 15
	Width = 241
	Page1.Caption = "Page1"
	Page1.Name = "Page1"
	Page10.Caption = "Page10"
	Page10.Name = "Page10"
	Page11.Caption = "Page11"
	Page11.Name = "Page11"
	Page12.Caption = "Page12"
	Page12.Name = "Page12"
	Page13.Caption = "Page13"
	Page13.Name = "Page13"
	Page14.Caption = "Page14"
	Page14.Name = "Page14"
	Page15.Caption = "Page15"
	Page15.Name = "Page15"
	Page2.Caption = "Page2"
	Page2.Name = "Page2"
	Page3.Caption = "Page3"
	Page3.Name = "Page3"
	Page4.Caption = "Page4"
	Page4.Name = "Page4"
	Page5.Caption = "Page5"
	Page5.Name = "Page5"
	Page6.Caption = "Page6"
	Page6.Name = "Page6"
	Page7.Caption = "Page7"
	Page7.Name = "Page7"
	Page8.Caption = "Page8"
	Page8.Name = "Page8"
	Page9.Caption = "Page9"
	Page9.Name = "Page9"
	
	PROCEDURE filtrar		&& Filtro de integrantes por CAR
	ENDPROC

	PROCEDURE Page1.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
		
	ENDPROC

	PROCEDURE Page1.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page10.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page10.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page11.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page11.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page12.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page12.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page13.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page13.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page14.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page14.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page15.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page15.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page2.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page2.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page3.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page3.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page4.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page4.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page5.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page5.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page6.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page6.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page7.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page7.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page8.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page8.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

	PROCEDURE Page9.Activate
		THIS.PARENT.FILTRAR()
		THIS.FORECOLOR = RGB(19, 47, 236)
	ENDPROC

	PROCEDURE Page9.Deactivate
		THIS.FORECOLOR = RGB(0, 0, 0)
	ENDPROC

ENDDEFINE

DEFINE CLASS tsmovform AS tsmaintform OF "tsbase.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*p: asientorecordsource		&& Representa la columna del asiento para relacionar con Contabilidad
		*p: asientorecordsource2		&& Representa la columna del asiento para relacionar con Contabilidad, 2da. columna.
		*p: idasiento		&& Codigo del Generador de Asientos.
		*p: idasiento2		&& Codigo del Generador del 2do. asiento, si corresponde.
		*p: identidad		&& Indica en campo indentificador del registro.
		*p: proyecto
		*p: tablaconsulta		&& Indica el nombre del cursor donde devuelta la consulta.
	*</DefinedPropArrayMethod>

	areaprincipal = _xcConsulta
	asientorecordsource = 		&& Representa la columna del asiento para relacionar con Contabilidad
	asientorecordsource2 = 		&& Representa la columna del asiento para relacionar con Contabilidad, 2da. columna.
	DoCreate = .T.
	HalfHeightCaption = .T.
	idasiento = 		&& Codigo del Generador de Asientos.
	idasiento2 = 		&& Codigo del Generador del 2do. asiento, si corresponde.
	Name = "tsmovform"
	navegador = .F.
	proyecto = 
	lblRequerido.Name = "lblRequerido"
	Pageframe1.ErasePage = .T.
	Pageframe1.Name = "Pageframe1"
	Pageframe1.Page1.Name = "Page1"
	Pageframe1.Page2.Enabled = .F.
	Pageframe1.Page2.grdList.Name = "grdList"
	Pageframe1.Page2.Name = "Page2"
	
	PROCEDURE afteraddnew
		IF USED('_xcConsulta')
			USE IN _XCCONSULTA
			THIS.NAVEGADOR = .F.
			OAPP.OTOOLBAR.REFRESH()
			THISFORM.PAGEFRAME1.PAGE2.ENABLED = .F.
		ENDIF
		DODEFAULT()
	ENDPROC

	PROCEDURE afterupdate
		IF OAPP.ASENTAR .AND.  .NOT. EMPTY(THIS.IDASIENTO) .AND. EMPTY(NVL(EVALUATE(THIS.ASIENTORECORDSOURCE), 0))
			IF MESSAGEBOX('Desea asentar esta operación?', 0292, "Futura Software")=6
				THISFORM.PAGEFRAME1.PAGES(THISFORM.PAGEFRAME1.PAGECOUNT).ASIENTO.ASENTAR(THIS.IDASIENTO)
				RETURN .F.
			ENDIF
		ENDIF
	ENDPROC

	PROCEDURE afterupdatetabla1
		IF ! OAPP.ASENTAR 
			return
		ENDIF
		
		
		IF  .NOT. EMPTY(THIS.IDASIENTO) .AND.  .NOT. EMPTY(EVALUATE(THIS.ASIENTORECORDSOURCE))
			IF !THISFORM.PAGEFRAME1.PAGES(THISFORM.PAGEFRAME1.PAGECOUNT).ASIENTO.validar()
				RETURN .f.
			ENDIF
				
		
			IF EMPTY(VXASIENTOS1.NÚMERO)
				LCCAMPONRO = THISFORM.CAMPONRO
				LCCAMPOTAM = THISFORM.CAMPOTAM
				THISFORM.CAMPONRO = 'número,CN_Asientos,idempresa = ?oApp.Empresa and ejercicio = ' + STR(YEAR(VXASIENTOS1.fecha))
				THISFORM.CAMPOTAM = 0
				REPLACE VXASIENTOS1.NÚMERO WITH THIS.ULTIMONRO IN VXASIENTOS1
				THISFORM.CAMPONRO = LCCAMPONRO
				THISFORM.CAMPOTAM = LCCAMPOTAM
			ENDIF
		ENDIF
		
		IF  .NOT. EMPTY(THIS.IDASIENTO2) .AND.  .NOT. EMPTY(EVALUATE(THIS.ASIENTORECORDSOURCE2))
			IF EMPTY(VXASIENTOS2.NÚMERO)
		
				LCCAMPONRO = THISFORM.CAMPONRO
				LCCAMPOTAM = THISFORM.CAMPOTAM
				THISFORM.CAMPONRO = 'número,CN_Asientos,idempresa = ?oApp.Empresa and ejercicio = ' + STR(YEAR(VXASIENTOS2.fecha))
				THISFORM.CAMPOTAM = 0
				
				IF YEAR(VXASIENTOS1.fecha)=YEAR(VXASIENTOS2.fecha)
					REPLACE VXASIENTOS2.NÚMERO WITH THIS.ULTIMONRO+1 IN VXASIENTOS2
				ELSE
					REPLACE VXASIENTOS2.NÚMERO WITH THIS.ULTIMONRO IN VXASIENTOS2
				ENDIF
					
				THISFORM.CAMPONRO = LCCAMPONRO
				THISFORM.CAMPOTAM = LCCAMPOTAM
		
			ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE consultar
		Parameter LCSQL
		Local CSQL, LNRESULTADO, LCALIAS
		LCALIAS = Alias()
		If Pcount()=1
			CSQL = LCSQL
		Else
			Do Form sysconsultar To CSQL With This.TABLACONSULTA
		Endif
		If  .Not. Empty(CSQL)
			If Thisform.PAGEFRAME1.PAGE2.GRDLIST.RecordSource='_xcConsulta'
				Thisform.PAGEFRAME1.PAGE2.GRDLIST.RecordSource = ''
			Endif
			LNRESULTADO = Sql(CSQL, '_xcConsulta')
			If LNRESULTADO>0
				If Reccount('_xcConsulta')>0
					Thisform.PAGEFRAME1.PAGE2.GRDLIST.RecordSource = '_xcConsulta'
					This.NAVEGADOR = .T.
					Select _XCCONSULTA
					OAPP.OTOOLBAR.Refresh()
					Thisform.PAGEFRAME1.PAGE2.Enabled = .T.
				Else
					Messagebox('No se ha encontrado ninguna coincidencia', 64, "Futura Software")
				Endif
			Else
				= Aerror(LAERROR)
				Messagebox('El servidor devolvió un error en la ejecución de la sentencia.'+Chr(13)+LAERROR(2))
			Endif
		Endif
		If  .Not. Empty(LCALIAS)
			Select (LCALIAS)
		Endif
	ENDPROC

	PROCEDURE delete
		***07-03-2007
		* Elimina tambien el 2do. asiento 
		
		LOCAL M.IDASIENTO,M.IDASIENTO2
		m.IDASIENTO = ''
		m.IDASIENTO2 = ''
		
		IF EMPTY(THIS.ASIENTORECORDSOURCE)
			DODEFAULT()
			RETURN
		ENDIF
		
		
		IF  .NOT. EMPTY(NVL(EVALUATE(THIS.ASIENTORECORDSOURCE), 0))
			m.IDASIENTO = STR(EVALUATE(THIS.ASIENTORECORDSOURCE), 10, 0)
		ENDIF
		IF !EMPTY(THIS.ASIENTORECORDSOURCE2) AND  .NOT. EMPTY(NVL(EVALUATE(THIS.ASIENTORECORDSOURCE2), 0))
			m.IDASIENTO2 = STR(EVALUATE(THIS.ASIENTORECORDSOURCE2), 10, 0)
		ENDIF
		
		
		
		
		
		IF DODEFAULT()
				IF OAPP.ASENTAR .AND.  .NOT. EMPTY(THIS.IDASIENTO) .AND.  .NOT. EMPTY(M.IDASIENTO)
					IF oApp.LeerConstante("CN_NOTIFICARELIMINARASIENTO","Char(1)")="N" OR MESSAGEBOX('Desea eliminar tambien el asiento de esta operación?', 0292, "Futura Software")=6
		
							THIS.RUNSQL("Delete cn_Asientos where idAsiento = "+M.IDASIENTO, 'cn_Borrar')
			
							***Elimina 2do. asiento
							IF !EMPTY(M.IDASIENTO2) 
								THIS.RUNSQL("Delete cn_Asientos where idAsiento = "+M.IDASIENTO2, 'cn_Borrar')
							ENDIF 	
					ENDIF
				ENDIF
		ENDIF
	ENDPROC

	PROCEDURE Destroy
		DODEFAULT()
	ENDPROC

	PROCEDURE Init
		DODEFAULT()
		IF  .NOT. EMPTY(THIS.IDASIENTO) .AND. OAPP.ASENTAR
			LOCAL NPAGINA, OPAGE AS PAGE, LCSUFIJO
			LCSUFIJO = "1"
			THISFORM.PAGEFRAME1.PAGECOUNT = THISFORM.PAGEFRAME1.PAGECOUNT+1
			NPAGINA = THISFORM.PAGEFRAME1.PAGECOUNT
			THISFORM.PAGEFRAME1.PAGES(NPAGINA).ADDOBJECT('Asiento', 'Asiento', LCSUFIJO)
			OPAGE = THISFORM.PAGEFRAME1.PAGES(NPAGINA)
			OPAGE.ASIENTO.VISIBLE = .T.
			OPAGE.ASIENTO.LEFT = 10
			OPAGE.ASIENTO.TOP = 10
			OPAGE.ASIENTO.CONTROLSOURCE = THIS.ASIENTORECORDSOURCE
			OPAGE.CAPTION = 'Asiento '
			OPAGE.FONTSIZE = 8
		ENDIF
		IF  .NOT. EMPTY(THIS.IDASIENTO2) .AND. OAPP.ASENTAR
			LOCAL NPAGINA, OPAGE AS PAGE, LCSUFIJO
			LCSUFIJO = "2"
			THISFORM.PAGEFRAME1.PAGECOUNT = THISFORM.PAGEFRAME1.PAGECOUNT+1
			NPAGINA = THISFORM.PAGEFRAME1.PAGECOUNT
			THISFORM.PAGEFRAME1.PAGES(NPAGINA).ADDOBJECT('Asiento', 'Asiento', LCSUFIJO)
			OPAGE = THISFORM.PAGEFRAME1.PAGES(NPAGINA)
			OPAGE.ASIENTO.VISIBLE = .T.
			OPAGE.ASIENTO.LEFT = 10
			OPAGE.ASIENTO.TOP = 10
			OPAGE.ASIENTO.CONTROLSOURCE = THIS.ASIENTORECORDSOURCE2
			OPAGE.CAPTION = 'Asiento 2'
			OPAGE.FONTSIZE = 8
		ENDIF
		
		*!*	IF  .NOT. EMPTY(THIS.proyecto) .AND. OAPP.PROYECTO='S'
		*!*		THISFORM.PAGEFRAME1.PAGECOUNT = THISFORM.PAGEFRAME1.PAGECOUNT+1
		*!*		NPAGINA = THISFORM.PAGEFRAME1.PAGECOUNT
		*!*		OPAGE = THISFORM.PAGEFRAME1.PAGES(NPAGINA)
		*!*		OPAGE.CAPTION = 'Proyectos'
		*!*		OPAGE.FONTSIZE = 8
		
		*!*	ENDIF
		
		
		
		
	ENDPROC

	PROCEDURE refreshform
		Parameter _IDENTIDAD
		Local LCOLDID, LCNEWID, LCESTADO
		If  .Not. Thisform.EDITMODE .And.  .Not. This.ESNUEVO
			LCOLDID = Thisform.TABLA1
			LCOLDID = LCOLDID+'.'+Thisform.IDENTIDAD
			LCOLDID = &LCOLDID
			LCESTADO = 0
			If Pcount()>0
				LCNEWID = '_Identidad'
			Else
				LCNEWID = '_xcConsulta.'+Thisform.IDENTIDAD
			Endif
			If Type(LCNEWID)<>'U'
				LCNEWID = &LCNEWID
				If LCOLDID<>LCNEWID
					LCOLDID = 'm.'+Thisform.IDENTIDAD
					&LCOLDID = LCNEWID
					Requery(Thisform.TABLA1)
					LCESTADO = Reccount(Thisform.TABLA1)
				Endif
			ENDIF
			
		Endif
		DoDefault()
		Return LCESTADO
	ENDPROC

	PROCEDURE validarauto
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tsoptiongroup AS optiongroup 		&& OptionGroup de base
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	ButtonCount = 2
	Height = 48
	Name = "tsoptiongroup"
	Value = 1
	Width = 85
	Option1.BackStyle = 0
	Option1.Caption = "Opción1"
	Option1.FontSize = 8
	Option1.Height = 18
	Option1.Left = 5
	Option1.Name = "Option1"
	Option1.Top = 5
	Option1.Value = 1
	Option1.Width = 75
	Option2.BackStyle = 0
	Option2.Caption = "Opción2"
	Option2.FontSize = 8
	Option2.Height = 18
	Option2.Left = 5
	Option2.Name = "Option2"
	Option2.Top = 25
	Option2.Value = 0
	Option2.Width = 75

ENDDEFINE

DEFINE CLASS tsspinner AS spinner 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: editable
	*</DefinedPropArrayMethod>

	FontSize = 8
	Height = 24
	Name = "tsspinner"
	Width = 120
	
	PROCEDURE Refresh
		IF THIS.EDITABLE
		THIS.ENABLED = THISFORM.EDITMODE
		ENDIF
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tstextbox AS textbox 		&& TextBox de base
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\textbox.bmp" ClassIcon="..\bitmaps\textbox.bmp" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *ayuda		&& Programa de ayuda para este objeto.
		*m: *parametroayuda_access
		*m: *validarauto
		*p: aplicarretorno		&& Indica si se aplica el retorno CHR(13) despues de validar.
		*p: cambio		&& Indica si ha cambiado el valor del control.
		*p: camposec		&& campo secundaria que desee desplegar con el campo principal
		*p: condicionvalidacion
		*p: datoayuda		&& Nombre del archivo de datos al cual se mostrará la ayuda.
		*p: editable		&& Indica si se puede editar el control.
		*p: frmayuda
		*p: inputmaskdinamico		&& Indica si se vuelve a configurar el InputMask cada vez que cambia el valor del control.
		*p: mensajevalidacion
		*p: parametroayuda		&& Parametro que se envia a la ayuda.
		*p: requerido		&& Indica si es un campo requerido.
		*p: retayuda		&& Valor devuelto por la ayuda.
		*p: solonuevo		&& Indica si se puede editar solo cuando se agrega un nuevo registro.
		*p: validar		&& Indica si se puede o no validar el control
		*p: val_pos		&& valor despues de ejecutar la ayuda
		*p: val_pre		&& valor antes de ejecutar la ayuda
	*</DefinedPropArrayMethod>

	Anchor = 0
	aplicarretorno = .T.		&& Indica si se aplica el retorno CHR(13) despues de validar.
	cambio = .F.		&& Indica si ha cambiado el valor del control.
	camposec = 		&& campo secundaria que desee desplegar con el campo principal
	condicionvalidacion = 
	DateFormat = 11
	datoayuda = 		&& Nombre del archivo de datos al cual se mostrará la ayuda.
	DisabledForeColor = 0,0,0
	editable = .T.		&& Indica si se puede editar el control.
	Enabled = .T.
	FontSize = 8
	Format = "K"
	frmayuda = buscar
	Hours = 24
	InputMask = ""		&& Indica si se vuelve a configurar el InputMask cada vez que cambia el valor del control.
	inputmaskdinamico = 		&& Indica si se vuelve a configurar el InputMask cada vez que cambia el valor del control.
	mensajevalidacion = 
	Name = "tstextbox"
	NullDisplay = " "
	parametroayuda = 		&& Parametro que se envia a la ayuda.
	retayuda = 		&& Valor devuelto por la ayuda.
	TabIndex = 1
	validar = .F.		&& Indica si se puede o no validar el control
	Width = 100
	
	PROCEDURE ayuda		&& Programa de ayuda para este objeto.
		Local CTABLA
		VALORANT = This.Value
		This.VAL_PRE = This.Value
		This.VAL_POS = This.Value
		Use Shared datos!ayudaDat In 0
		If Seek(Upper(This.DATOAYUDA), 'AyudaDat', 'archivo')
			CTABLA = This.DATOAYUDA
			This.Value = ''
			This.VALIDAR = .F.
			If  .Not. Empty(This.PARAMETROAYUDA)
				Do Form (this.frmayuda) To This.RETAYUDA With Recno('AyudaDat'), This.PARAMETROAYUDA
			Else
				Do Form (this.frmayuda) To This.RETAYUDA With Recno('AyudaDat')
			Endif
			If  .Not. Empty(This.RETAYUDA)
				This.VALIDAR = .T.
				This.CAMBIO = .T.
				This.Value = This.RETAYUDA
				This.VAL_POS = This.RETAYUDA
				This.Valid()
				IF this.aplicarretorno
					Keyboard Chr(13)
				ENDIF 
			Else
				This.Value = VALORANT
			Endif
		Else
			Messagebox('No hay ayuda disponible sobre este tema.')
		Endif
		Use In ayudaDat
	ENDPROC

	PROCEDURE GotFocus
		DO CASE
		CASE TYPE('this.value')="C"
		THIS.TAG = IIF(ISNULL(THIS.VALUE), '', THIS.VALUE)
		CASE TYPE('this.value')="N" .OR. TYPE('this.value')="Y"
		THIS.TAG = STR(IIF(ISNULL(THIS.VALUE), 0, THIS.VALUE))
		CASE TYPE('this.value')="D"
		THIS.TAG = DTOC(IIF(ISNULL(THIS.VALUE), {}, THIS.VALUE))
		ENDCASE
	ENDPROC

	PROCEDURE Init
		If Type("BORDER_COLOR")="N"
			If  .Not. Empty("13875625")
				This.BorderColor = Val("13875625")
			Else
				This.ResetToDefault("BorderColor")
			Endif
		Endif
		If Type(This.ControlSource)="C" .And. Empty(This.InputMask)
			This.InputMask = Replicate("X", Fsize(Substr(This.ControlSource, At(".", This.ControlSource)+1)))
		Endif
		If Empty(This.StatusBarText)
			This.StatusBarText = Alltrim(This.Comment)+Iif(Empty(This.DATOAYUDA), "", " Presione F8 para ver una lista de "+This.DATOAYUDA+".")
		Endif
		If This.REQUERIDO .And. Empty(This.CONDICIONVALIDACION)
			This.CONDICIONVALIDACION = "!Empty("+This.ControlSource+")"
		Endif
		If  .Not. Empty(This.CONDICIONVALIDACION)
			I = Alen(Thisform.VALIDARCONTROLES)
			Dimension Thisform.VALIDARCONTROLES(I+1)
			Thisform.VALIDARCONTROLES(I) = This
		ENDIF
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS NKEYCODE, NSHIFTALTCTRL
		LOCAL VALORANT
		IF LASTKEY()=-7
		IF EMPTY(THIS.DATOAYUDA)
		MESSAGEBOX('No hay ayuda disponible sobre este tema.')
		ELSE
		= THIS.AYUDA()
		ENDIF
		ENDIF
	ENDPROC

	PROCEDURE parametroayuda_access
		LOCAL LCPARAMETRO
		IF  .NOT. EMPTY(THIS.PARAMETROAYUDA)
			LCPARAMETRO = EVALUATE(THIS.PARAMETROAYUDA)
		*!*		LCPARAMETRO = THIS.PARAMETROAYUDA
		*!*		IF LEFT(LCPARAMETRO,1)<>'?'
		*!*			LCPARAMETRO= '?' + LCPARAMETRO
		*!*		ENDIF
				
		ELSE
		LCPARAMETRO = ' '
		ENDIF
		RETURN LCPARAMETRO
	ENDPROC

	PROCEDURE Refresh
		If This.EDITABLE
			If This.SOLONUEVO
				This.Enabled = Thisform.EDITMODE .And. Iif(Isnull(Getfldstate(-1, Thisform.TABLA1)), .F., ("3"$Getfldstate(-1, Thisform.TABLA1) .Or. "4"$Getfldstate(-1, Thisform.TABLA1)))
			Else
				This.Enabled = Thisform.EDITMODE
			Endif
		Endif
		If  .Not. Empty(This.INPUTMASKDINAMICO)
			This.InputMask = Evaluate(This.INPUTMASKDINAMICO)
		Endif
	ENDPROC

	PROCEDURE validarauto
		RETURN EVALUATE(THIS.CONDICIONVALIDACION)
	ENDPROC

ENDDEFINE

DEFINE CLASS tstextform AS tsbaseform OF "tsbase.vcx" 		&& Clase de base para todos los formularios que ven campos memo o archivos de texto. 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="edtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tscommandbutton1" UniqueID="" Timestamp="" />

	PROTECTED addtomenu,removefrommenu,restorewindowpos,savewindowpos
	AutoCenter = .F.
	BorderStyle = 3
	BufferMode = 0
	Caption = "Formulario 1"
	ControlBox = .F.
	ctoolbar = 
	DataSession = 2
	DoCreate = .T.
	HalfHeightCaption = .T.
	Height = 341
	lallowdelete = .F.
	lallowedits = .F.
	lallownew = .F.
	Left = 25
	MaxButton = .T.
	MinHeight = 200
	MinWidth = 400
	Name = "tstextform"
	ScaleMode = 3
	Top = 54
	Width = 422
	WindowType = 1
	lblRequerido.Name = "lblRequerido"

	ADD OBJECT 'cmdClose' AS tscommandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Cancelar", ;
		Height = 23, ;
		Left = 300, ;
		Name = "cmdClose", ;
		TabIndex = 2, ;
		Top = 304, ;
		Width = 111
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS tscommandbutton WITH ;
		Caption = "\<Imprimir", ;
		Height = 31, ;
		Left = 24, ;
		Name = "cmdPrint", ;
		TabIndex = 3, ;
		Top = 300, ;
		Visible = .F., ;
		Width = 111
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtText' AS tseditbox WITH ;
		ControlSource = "", ;
		Height = 288, ;
		Left = 0, ;
		Name = "edtText", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 420
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="editbox" />

	ADD OBJECT 'Tscommandbutton1' AS tscommandbutton WITH ;
		Cancel = .F., ;
		Caption = "\<Aceptar", ;
		Height = 23, ;
		Left = 180, ;
		Name = "Tscommandbutton1", ;
		TabIndex = 2, ;
		Top = 304, ;
		Width = 111
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Resize
		THISFORM.LOCKSCREEN = .T.
		THISFORM.EDTTEXT.WIDTH = THISFORM.WIDTH
		THISFORM.EDTTEXT.HEIGHT = THISFORM.HEIGHT-54
		THISFORM.CMDCLOSE.LEFT = INT(THISFORM.WIDTH/4)
		THISFORM.CMDPRINT.LEFT = INT(THISFORM.WIDTH/1.75 )
		THISFORM.CMDCLOSE.TOP = THISFORM.HEIGHT-42
		THISFORM.CMDPRINT.TOP = THISFORM.CMDCLOSE.TOP
		THISFORM.LOCKSCREEN = .F.
		
	ENDPROC

	PROCEDURE cmdClose.Click
		THISFORM.COMMENT = "C"
		THISFORM.HIDE()
	ENDPROC

	PROCEDURE Tscommandbutton1.Click
		THISFORM.HIDE()
	ENDPROC

ENDDEFINE

DEFINE CLASS tstoolbar AS toolbar 		&& Clase estánda de barra de herramientas
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\..\backup\mainsamp\bitmaps\toolbar.bmp" ClassIcon="..\..\backup\mainsamp\bitmaps\toolbar.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdFirst" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLast" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRestore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdprint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBorrar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdbuscar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelItem" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQBFMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExecuteQBF" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClearFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAnular" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboEnlaces" UniqueID="" Timestamp="" />

	#INCLUDE "..\include\tastrade.h"
	*<DefinedPropArrayMethod>
		*m: *cargarenlace
		*m: *estadonav		&& Actualiza el estado del navegador.
		*m: *oktosend		&& Devuelve .T. si el formulario activo puede recibir mensajes de esta barra de herramientas.
		*m: *parsecondition
		*m: *restorewindowpos		&& Restaura la posición de la ventana del archivo INI.
		*m: *savewindowpos		&& Guarda la posición de la barra de herramientas en el archivo INI.
		*p: qbf_table
		*p: ultimoenlace
	*</DefinedPropArrayMethod>

	PROTECTED ultimoenlace
	Caption = "Herramientas de desplazamiento"
	ControlBox = .F.
	DataSession = 1
	Height = 47
	Left = 33
	Name = "tstoolbar"
	ScaleMode = 3
	Top = 8
	ultimoenlace = 
	Visible = .F.
	Width = 824

	ADD OBJECT 'cboEnlaces' AS combobox WITH ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 799, ;
		Name = "cboEnlaces", ;
		RowSourceType = 1, ;
		SpecialEffect = 1, ;
		ToolTipText = "Formularios relacionados", ;
		Top = 3, ;
		Width = 20
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdAddItem' AS tstoolbarbutton WITH ;
		Caption = "+ Item", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 499, ;
		Name = "cmdAddItem", ;
		Picture = ..\bitmaps\wzplus.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Agregar Detalle (CTRL+ Ins) ", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAnular' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Anular", ;
		ColorScheme = 1, ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 751, ;
		Name = "cmdAnular", ;
		SpecialEffect = 2, ;
		Style = 0, ;
		TabIndex = 23, ;
		ToolTipText = "Anular (CTRL+A)", ;
		Top = 3, ;
		Visible = .T., ;
		Width = 49
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdBorrar' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Eliminar", ;
		ColorScheme = 1, ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 345, ;
		Name = "cmdBorrar", ;
		Picture = ..\bitmaps\delete.bmp, ;
		SpecialEffect = 2, ;
		Style = 0, ;
		TabIndex = 23, ;
		ToolTipText = "Eliminar (CTRL+E)", ;
		Top = 3, ;
		Visible = .T., ;
		Width = 49
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdbuscar' AS tstoolbarbutton WITH ;
		Caption = "Consultar", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 450, ;
		Name = "cmdbuscar", ;
		Picture = ..\bitmaps\findhs.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Buscar (CTRL+B)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdClearFilter' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Sin Filtro", ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 695, ;
		Name = "cmdClearFilter", ;
		Picture = ..\bitmaps\textbox.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 25, ;
		ToolTipText = "Borrar Filtro", ;
		Top = 3, ;
		Visible = .F., ;
		Width = 49
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClose' AS tstoolbarbutton WITH ;
		Caption = "Cerrar", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 394, ;
		Name = "cmdClose", ;
		Picture = ..\bitmaps\close.bmp, ;
		SpecialEffect = 2, ;
		Style = 0, ;
		ToolTipText = "Cerrar (CTRL+F4)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelItem' AS tstoolbarbutton WITH ;
		Caption = "- Item", ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 548, ;
		Name = "cmdDelItem", ;
		Picture = ..\bitmaps\wzdelete.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Eliminar Detalle (CTRL+Supr)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS tstoolbarbutton WITH ;
		AutoSize = .F., ;
		Caption = "Modificar", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 247, ;
		Name = "cmdEdit", ;
		Picture = ..\bitmaps\wzedit.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 6, ;
		ToolTipText = "Modificar (CTRL+M)", ;
		Top = 3, ;
		Visible = .T., ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdExecuteQBF' AS commandbutton WITH ;
		Caption = "Aplicar", ;
		Enabled = .F., ;
		FontBold = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 646, ;
		Name = "cmdExecuteQBF", ;
		Picture = ..\bitmaps\locate.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 24, ;
		ToolTipText = "Aplicar Filtro (CTRL + A)", ;
		Top = 3, ;
		Visible = .F., ;
		Width = 49
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdFirst' AS tstoolbarbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 40, ;
		Left = 5, ;
		Name = "cmdFirst", ;
		Picture = ..\bitmaps\frsrec_s.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 1, ;
		ToolTipText = "Primero (CTRL+INICIO)", ;
		Top = 3, ;
		Width = 22
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdLast' AS tstoolbarbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 40, ;
		Left = 71, ;
		Name = "cmdLast", ;
		Picture = ..\bitmaps\lstrec_s.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 4, ;
		ToolTipText = "Último (CTRL+FIN)", ;
		Top = 3, ;
		Width = 22
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNew' AS tstoolbarbutton WITH ;
		AutoSize = .F., ;
		Caption = "Nuevo", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 100, ;
		Name = "cmdNew", ;
		Picture = ..\bitmaps\new.bmp, ;
		SpecialEffect = 2, ;
		Style = 0, ;
		TabIndex = 5, ;
		ToolTipText = "Nuevo (F9)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS tstoolbarbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 40, ;
		Left = 49, ;
		Name = "cmdNext", ;
		Picture = ..\bitmaps\nxtrec_s.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 3, ;
		ToolTipText = "Siguiente (CTRL+AV PÁG)", ;
		Top = 3, ;
		Width = 22
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdprint' AS tstoolbarbutton WITH ;
		Caption = "Imprimir", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 296, ;
		Name = "cmdprint", ;
		Picture = ..\bitmaps\wzprint.bmp, ;
		SpecialEffect = 2, ;
		ToolTipText = "Imprimir (CTRL+P)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrior' AS tstoolbarbutton WITH ;
		Caption = "", ;
		Enabled = .F., ;
		Height = 40, ;
		Left = 27, ;
		Name = "cmdPrior", ;
		Picture = ..\bitmaps\prvrec_s.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 2, ;
		ToolTipText = "Anterior (CTRL+RE PÁG)", ;
		Top = 3, ;
		Width = 22
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdQBFMode' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "Filtro", ;
		Enabled = .T., ;
		FontBold = .F., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 597, ;
		Name = "cmdQBFMode", ;
		Picture = ..\bitmaps\filter.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 23, ;
		ToolTipText = "Filtrar (CTRL + F)", ;
		Top = 3, ;
		Visible = .F., ;
		Width = 49
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdRestore' AS tstoolbarbutton WITH ;
		AutoSize = .F., ;
		Caption = "Restaurar", ;
		Enabled = .T., ;
		FontName = "Arial", ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 149, ;
		Name = "cmdRestore", ;
		Picture = ..\bitmaps\undo.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 7, ;
		ToolTipText = "Restaurar (CTRL+Z)", ;
		Top = 3, ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS tstoolbarbutton WITH ;
		Caption = "Grabar", ;
		Enabled = .T., ;
		FontSize = 8, ;
		Height = 40, ;
		Left = 198, ;
		Name = "cmdSave", ;
		Picture = ..\bitmaps\save.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 6, ;
		ToolTipText = "Grabar (F12)", ;
		Top = 3, ;
		Visible = .T., ;
		Width = 49
		*< END OBJECT: ClassLib="tsbase.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Separator3' AS separator WITH ;
		Height = 0, ;
		Left = 450, ;
		Name = "Separator3", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator5' AS separator WITH ;
		Height = 0, ;
		Left = 100, ;
		Name = "Separator5", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator6' AS separator WITH ;
		Height = 0, ;
		Left = 751, ;
		Name = "Separator6", ;
		Top = 3, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />
	
	PROCEDURE cargarenlace
		IF THIS.ULTIMOENLACE=_SCREEN.ACTIVEFORM.CAPTION
		RETURN
		ENDIF
		THIS.CBOENLACES.ROWSOURCETYPE = 0
		THIS.CBOENLACES.CLEAR()
		IF  .NOT. EMPTY(_SCREEN.ACTIVEFORM.ENLACES)
		NELEM = ALINES(AENLACES, _SCREEN.ACTIVEFORM.ENLACES, .T., ",")
		CELEMENTOS = ""
		FOR I = 1 TO NELEM
		IF  .NOT. EMPTY(CELEMENTOS)
		CELEMENTOS = CELEMENTOS+","
		ENDIF
		CELEMENTOS = CELEMENTOS+"'"+AENLACES(I)+"'"
		ENDFOR
		THIS.CBOENLACES.ROWSOURCETYPE = 3
		THIS.CBOENLACES.ROWSOURCE="Select Titulo,Comando from vinculos WHERE Titulo in(&cElementos) INTO CURSOR cEnlaces"
		IF USED('vinculo')
		USE IN VINCULO
		ENDIF
		ENDIF
		THIS.ULTIMOENLACE = _SCREEN.ACTIVEFORM.CAPTION
	ENDPROC

	PROCEDURE Destroy
		THIS.SAVEWINDOWPOS()
		THIS.VISIBLE = .F.
	ENDPROC

	PROCEDURE estadonav		&& Actualiza el estado del navegador.
	ENDPROC

	PROCEDURE Init
		IF  .NOT. THIS.RESTOREWINDOWPOS()
		THIS.DOCK(0)
		ENDIF
	ENDPROC

	PROCEDURE oktosend		&& Devuelve .T. si el formulario activo puede recibir mensajes de esta barra de herramientas.
		RETURN (FORMISOBJECT() .AND. TYPE("_screen.ActiveForm.cToolBar")<>"U" .AND.  .NOT. EMPTY(_SCREEN.ACTIVEFORM.CTOOLBAR))
	ENDPROC

	PROCEDURE parsecondition
		LPARAMETERS CCONDITION, CCONTROLSOURCE
		LOCAL LCRETCONDITION, LCFIELDNAME
		IF TYPE('cCondition')='C'
		CCONDITION = ALLTRIM(CCONDITION)
		ENDIF
		LCFIELDNAME = SUBSTRC(CCONTROLSOURCE, (RATC(".", CCONTROLSOURCE)+1))
		IF  .NOT. EMPTY(CCONDITION)
		IF TYPE('cCondition')$"CM"
		IF ("<"$CCONDITION .OR. "=="$CCONDITION .OR. "LIKE"$CCONDITION .OR. "<>"$CCONDITION .OR. "!="$CCONDITION .OR. "#"$CCONDITION .OR. "="$CCONDITION .OR. ">"$CCONDITION)
		LCRETCONDITION = LCFIELDNAME+CCONDITION
		ENDIF
		ENDIF
		IF EMPTY(LCRETCONDITION)
		DO CASE
		CASE TYPE(CCONTROLSOURCE)$"CM"
		LCRETCONDITION = LCFIELDNAME+" = "+CHR(34)+CCONDITION+CHR(34)
		CASE TYPE(CCONTROLSOURCE)$"DT"
		LCRETCONDITION = LCFIELDNAME+" = {"+DTOC(CCONDITION)+"}"
		OTHERWISE
		LCRETCONDITION = LCFIELDNAME+" = "+STR(CCONDITION)
		ENDCASE
		ENDIF
		ELSE
		LCRETCONDITION = ""
		ENDIF
		RETURN LCRETCONDITION
	ENDPROC

	PROCEDURE Refresh
		LPARAMETERS TCCONDITION
		LOCAL LLBOF, LLEOF, LLALLOWEDITS, LLALLOWNEW, LLSAVEANDRESTORE, LLEDITMODE, LLDETALLE, LLALLOWDELETE, LALLOWANULAR, LALLOWCONSULTAR
		IF PARAMETERS()=0
			TCCONDITION = ""
		ENDIF
		LLBOF = BOF() .OR. (TCCONDITION="BOF")
		LLEOF = EOF() .OR. (TCCONDITION="EOF")
		IF FORMISOBJECT()
			SINAVEG = _SCREEN.ACTIVEFORM.NAVEGADOR
			LLEDITMODE = _SCREEN.ACTIVEFORM.EDITMODE
			THIS.CARGARENLACE()
		ELSE
			SINAVEG = .F.
		ENDIF
		IF SINAVEG .AND.  .NOT. LLEDITMODE
			THIS.CMDFIRST.ENABLED =  .NOT. LLBOF
			THIS.CMDPRIOR.ENABLED =  .NOT. LLBOF
			THIS.CMDNEXT.ENABLED =  .NOT. LLEOF
			THIS.CMDLAST.ENABLED =  .NOT. LLEOF
		ELSE
			THIS.CMDFIRST.ENABLED = .F.
			THIS.CMDPRIOR.ENABLED = .F.
			THIS.CMDNEXT.ENABLED = .F.
			THIS.CMDLAST.ENABLED = .F.
		ENDIF
		IF FORMISOBJECT()
			IF TYPE("_screen.Activeform.lAllowEdits")<>"U"
				LLALLOWEDITS = _SCREEN.ACTIVEFORM.LALLOWEDITS
				LLALLOWNEW = _SCREEN.ACTIVEFORM.LALLOWNEW
				LLALLOWDELETE = _SCREEN.ACTIVEFORM.LALLOWDELETE
				LLEDITMODE = _SCREEN.ACTIVEFORM.EDITMODE
				LLDETALLE = _SCREEN.ACTIVEFORM.DETALLE
				LALLOWANULAR = _SCREEN.ACTIVEFORM.LALLOWANULAR
				LALLOWCONSULTAR = _SCREEN.ACTIVEFORM.LALLOWCONSULTAR
				THIS.CMDNEW.ENABLED = LLALLOWNEW .AND.  .NOT. LLEDITMODE
				THIS.CMDBORRAR.ENABLED = LLALLOWDELETE .AND.  .NOT. LLEDITMODE
				THIS.CMDSAVE.ENABLED = LLEDITMODE
				THIS.CMDRESTORE.ENABLED = LLEDITMODE
				THIS.CMDEDIT.ENABLED =  .NOT. LLEDITMODE .AND. LLALLOWEDITS
				THIS.CMDPRINT.ENABLED =  .NOT. LLEDITMODE
				THIS.CMDCLOSE.ENABLED = _SCREEN.ACTIVEFORM.CLOSABLE
				THIS.CMDBUSCAR.ENABLED =  .NOT. LLEDITMODE .AND. LALLOWCONSULTAR
				THIS.CMDQBFMODE.ENABLED =  .NOT. LLEDITMODE
				THIS.CMDADDITEM.ENABLED = LLEDITMODE
				THIS.CMDDELITEM.ENABLED = LLEDITMODE
				THIS.CMDADDITEM.VISIBLE = LLDETALLE
				THIS.CMDDELITEM.VISIBLE = LLDETALLE
				THIS.CMDANULAR.VISIBLE = LALLOWANULAR
			ENDIF
		ENDIF
		RETURN
	ENDPROC

	PROTECTED PROCEDURE restorewindowpos		&& Restaura la posición de la ventana del archivo INI.
		LOCAL LCBUFFER, LCOLDERROR, LNTOP, LNLEFT, LLERROR, LNCOMMAPOS, LNDOCKPOSITION
		LCBUFFER = SPACE(10)+CHR(0)
		LCOLDERROR = ON('ERROR')
		LNDOCKPOSITION = 0
		IF GETPRIVSTR("WindowPositions", THIS.CAPTION, "", @LCBUFFER, LEN(LCBUFFER), CURDIR()+"FUTURA.INI")>0
		ON ERROR LLERROR = .T.
		LNCOMMAPOS = AT(",", LCBUFFER)
		IF LNCOMMAPOS>0
		LNTOP = VAL(LEFT(LCBUFFER, LNCOMMAPOS-1))
		LNLEFT = VAL(SUBSTR(LCBUFFER, LNCOMMAPOS+1))
		ELSE
		LNDOCKPOSITION = VAL(LCBUFFER)
		ENDIF
		ON ERROR &LCOLDERROR
		IF  .NOT. LLERROR
		IF LNCOMMAPOS>0
		THIS.TOP = LNTOP
		THIS.LEFT = LNLEFT
		ELSE
		THIS.DOCK(LNDOCKPOSITION)
		ENDIF
		ENDIF
		ELSE
		RETURN .F.
		ENDIF
	ENDPROC

	PROTECTED PROCEDURE savewindowpos		&& Guarda la posición de la barra de herramientas en el archivo INI.
		LOCAL LCVALUE
		IF THIS.DOCKED
		LCVALUE = ALLTRIM(STR(THIS.DOCKPOSITION))
		ELSE
		LCVALUE = ALLTRIM(STR(THISFORM.TOP))+','+ALLTRIM(STR(THISFORM.LEFT))
		ENDIF
		= WRITEPRIVSTR("WindowPositions", THIS.CAPTION, LCVALUE, CURDIR()+"FUTURA.INI")
	ENDPROC

	PROCEDURE cboEnlaces.InteractiveChange
		CCOMANDO = CENLACES.COMANDO
		THIS.VALUE = ""
		= EXECSCRIPT(CCOMANDO)
	ENDPROC

	PROCEDURE cmdAddItem.Click
		_SCREEN.ACTIVEFORM.AGREGARITEM()
		
	ENDPROC

	PROCEDURE cmdAddItem.RightClick
		_SCREEN.ACTIVEFORM.AGREGARITEM(.T.)
		
	ENDPROC

	PROCEDURE cmdAnular.Click
		_SCREEN.ACTIVEFORM.ANULAR()
		
	ENDPROC

	PROCEDURE cmdBorrar.Click
		_SCREEN.ACTIVEFORM.DELETE()
		
		
	ENDPROC

	PROCEDURE cmdbuscar.Click
		_SCREEN.ACTIVEFORM.CONSULTAR()
		
	ENDPROC

	PROCEDURE cmdClearFilter.Click
		SET FILTER TO
		GOTO TOP
		THIS.ENABLED = .F.
		_SCREEN.ACTIVEFORM.REFRESH
		
	ENDPROC

	PROCEDURE cmdClose.Click
		IF _SCREEN.ACTIVEFORM.QUERYUNLOAD()
		IF FORMISOBJECT()
		_SCREEN.ACTIVEFORM.RELEASE()
		ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdDelItem.Click
		_SCREEN.ACTIVEFORM.BORRARITEM()
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		_SCREEN.ACTIVEFORM.EDITAR()
		
	ENDPROC

	PROCEDURE cmdExecuteQBF.Click
		LOCAL CFILTER
		CFILTER = ""
		FOR NCNT = 1 TO _SCREEN.ACTIVEFORM.PAGEFRAME1.PAGE1.CONTROLCOUNT
		IF TYPE('_screen.ActiveForm.PageFrame1.Page1.Controls(nCnt).controlSource')<>"U"
		IF  .NOT. EMPTY(_SCREEN.ACTIVEFORM.PAGEFRAME1.PAGE1.CONTROLS(NCNT).CONTROLSOURCE) .AND. TYPE('_screen.ActiveForm.PageFrame1.Page1.Controls(nCnt).value')<>"U"
		CCONDITION = THIS.PARENT.PARSECONDITION(_SCREEN.ACTIVEFORM.PAGEFRAME1.PAGE1.CONTROLS(NCNT).VALUE, _SCREEN.ACTIVEFORM.PAGEFRAME1.PAGE1.CONTROLS(NCNT).CONTROLSOURCE)
		IF  .NOT. EMPTY(CCONDITION)
		CFILTER = CFILTER+" AND "+CCONDITION
		ENDIF
		ENDIF
		ENDIF
		ENDFOR
		ROLLBACK
		THIS.ENABLED = .F.
		THIS.PARENT.CMDQBFMODE.ENABLED = .T.
		IF  .NOT. EMPTY(CFILTER)
		CFILTER = ALLTRIM(SUBSTRC(CFILTER, 5))
		ENDIF
		SET FILTER TO &CFILTER
		THIS.PARENT.CMDCLEARFILTER.ENABLED = .T.
		GOTO TOP
		_SCREEN.ACTIVEFORM.REFRESH
		
	ENDPROC

	PROCEDURE cmdFirst.Click
		LOCAL LNRESULT
		LNRESULT = _SCREEN.ACTIVEFORM.FIRST()
		DO CASE
		CASE LNRESULT=1
		THIS.PARENT.REFRESH("BOF")
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdLast.Click
		LOCAL LNRESULT
		LNRESULT = _SCREEN.ACTIVEFORM.LAST()
		DO CASE
		CASE LNRESULT=2
		THIS.PARENT.REFRESH("EOF")
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdNew.Click
		_SCREEN.ACTIVEFORM.ADDNEW()
		
	ENDPROC

	PROCEDURE cmdNext.Click
		LOCAL LNRESULT
		LNRESULT = _SCREEN.ACTIVEFORM.NEXT()
		DO CASE
		CASE LNRESULT=2
		THIS.PARENT.REFRESH("EOF")
		CASE LNRESULT=0
		THIS.PARENT.REFRESH()
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdprint.Click
		_SCREEN.ACTIVEFORM.IMPRIMIR()
		
	ENDPROC

	PROCEDURE cmdPrior.Click
		LOCAL LNRESULT
		LNRESULT = _SCREEN.ACTIVEFORM.PRIOR()
		DO CASE
		CASE LNRESULT=1
		THIS.PARENT.REFRESH("BOF")
		CASE LNRESULT=0
		THIS.PARENT.REFRESH()
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdQBFMode.Click
		SET DATASESSION TO _SCREEN.ACTIVEFORM.DATASESSIONID
		IF EMPTY(THIS.PARENT.QBF_TABLE)
		THIS.PARENT.QBF_TABLE = _SCREEN.ACTIVEFORM.DATAENVIRONMENT.INITIALSELECTEDALIAS
		ENDIF
		SELECT (THIS.PARENT.QBF_TABLE)
		BEGIN TRANSACTION
		APPEND BLANK
		THIS.ENABLED = .F.
		THIS.PARENT.CMDEXECUTEQBF.ENABLED = .T.
		THIS.PARENT.CMDCLEARFILTER.ENABLED = .F.
		_SCREEN.ACTIVEFORM.REFRESH
		
	ENDPROC

	PROCEDURE cmdRestore.Click
		_SCREEN.ACTIVEFORM.RESTORE()
		
	ENDPROC

	PROCEDURE cmdSave.Click
		_SCREEN.ACTIVEFORM.SAVE()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tstoolbarbutton AS commandbutton 		&& Clase de base CommandButton para todos los botones de barra de herramientas
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="..\bitmaps\pushb.bmp" ClassIcon="..\bitmaps\pushb.bmp" />

	*<DefinedPropArrayMethod>
		*p: lcancelclick		&& Es True si el código de MouseDown() desea cancelar el clic.
	*</DefinedPropArrayMethod>

	PROTECTED lcancelclick
	Caption = " "
	Height = 34
	Name = "tstoolbarbutton"
	SpecialEffect = 0
	TabIndex = 1
	Width = 37
	
	PROCEDURE MouseDown
		LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
		THIS.LCANCELCLICK = .F.
		IF  .NOT. THIS.PARENT.OKTOSEND()
		THIS.LCANCELCLICK = .T.
		?? CHR(7)
		NODEFAULT
		ENDIF
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
		IF THIS.LCANCELCLICK
		THIS.LCANCELCLICK = .F.
		NODEFAULT
		ENDIF
	ENDPROC

ENDDEFINE
