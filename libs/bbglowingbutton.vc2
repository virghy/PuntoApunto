*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="bbglowingbutton.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS glowbuilder AS form 		&& Builder for the glass button
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdApply" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtButtonCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpFontColour" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFontname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFontSize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpGlowColour" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Glowingbutton1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: *loadclassprops
		*m: *savechanges
		*p: osource
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	Caption = "Glowing Button Builder"
	DoCreate = .T.
	Height = 215
	Left = 0
	Name = "glowbuilder"
	osource = .NULL.
	ShowTips = .T.
	Top = 0
	Visible = .T.
	Width = 422
	_memberdata = <VFPData>
		<memberdata name="_memberdata" type="property" display="_MemberData"/>
		<memberdata name="loadclassprops" type="method" display="LoadClassProps"/>
		<memberdata name="savechanges" type="method" display="SaveChanges"/>
		<memberdata name="osource" type="property" display="oSource"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cmdApply' AS commandbutton WITH ;
		Caption = "Apply", ;
		Height = 27, ;
		Left = 360, ;
		Name = "cmdApply", ;
		ToolTipText = "Save & apply changes", ;
		Top = 100, ;
		Width = 54
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Caption = "Exit", ;
		Height = 27, ;
		Left = 360, ;
		Name = "cmdCancel", ;
		ToolTipText = "Exit builder", ;
		Top = 180, ;
		Width = 54
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetFont' AS commandbutton WITH ;
		Caption = "Button Font", ;
		Height = 27, ;
		Left = 5, ;
		Name = "cmdGetFont", ;
		ToolTipText = "Select the font for the caption", ;
		Top = 137, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Glowingbutton1' AS glowingbutton WITH ;
		Left = 12, ;
		Name = "Glowingbutton1", ;
		Top = 24
		*< END OBJECT: ClassLib="bbglowingbutton.vcx" BaseClass="image" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Glow", ;
		Height = 17, ;
		Left = 299, ;
		Name = "Label4", ;
		Top = 17, ;
		Width = 30
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Button Text", ;
		Height = 17, ;
		Left = 92, ;
		Name = "Label5", ;
		Top = 142, ;
		Width = 62
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Font Colour", ;
		Height = 17, ;
		Left = 222, ;
		Name = "Label6", ;
		Top = 17, ;
		Width = 66
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Font Size", ;
		Height = 17, ;
		Left = 184, ;
		Name = "Label7", ;
		Top = 161, ;
		Width = 52
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Preview", ;
		Height = 17, ;
		Left = 5, ;
		Name = "Label8", ;
		Top = 0, ;
		Width = 45
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'shpFontColour' AS shape WITH ;
		Height = 24, ;
		Left = 240, ;
		Name = "shpFontColour", ;
		ToolTipText = "Select the colour of the caption font", ;
		Top = 36, ;
		Width = 24
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpGlowColour' AS shape WITH ;
		Height = 24, ;
		Left = 300, ;
		Name = "shpGlowColour", ;
		ToolTipText = "Colour of button glow.", ;
		Top = 36, ;
		Width = 24
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtButtonCaption' AS textbox WITH ;
		Height = 25, ;
		Left = 160, ;
		Name = "txtButtonCaption", ;
		ToolTipText = "Caption of button", ;
		Top = 138, ;
		Width = 199
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtFontname' AS textbox WITH ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 25, ;
		Left = 5, ;
		Name = "txtFontname", ;
		ToolTipText = "Displays the font selected", ;
		Top = 180, ;
		Width = 169
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtFontSize' AS textbox WITH ;
		DisabledBackColor = 255,255,255, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 25, ;
		Left = 189, ;
		Name = "txtFontSize", ;
		ToolTipText = "Displays the font size selected", ;
		Top = 180, ;
		Width = 37
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		Parameters oSource
		If Vartype(oSource) = "O"
			This.oSource = oSource
			This.LoadClassProps()
		Endif
		
	ENDPROC

	PROCEDURE loadclassprops
		With This As Form
			.shpFontColour.BackColor = .oSource.nFontColour
			.shpGlowColour.BackColor = .oSource.nGlowColour
			.txtButtonCaption.Value = .oSource.cButtonCaption
			.txtFontname.Value = .oSource.cFontName
			.txtFontSize.Value = .oSource.nFontSize
		Endwith
		* update preview
		With This.glowingbutton1
			.nFontColour = Thisform.shpFontColour.BackColor
			.nGlowColour = Thisform.shpGlowColour.BackColor
			.cButtonCaption = Thisform.txtButtonCaption.Value
			.cFontName = Thisform.txtFontname.Value
			.nFontSize = Thisform.txtFontSize.Value
			.Width  = This.oSource.Width
			.Height = This.oSource.Height
			.Draw()
		Endwith
		
		
	ENDPROC

	PROCEDURE savechanges
		With This As Form
			.oSource.nFontColour = .shpFontColour.BackColor
			.oSource.nGlowColour= .shpGlowColour.BackColor
			.oSource.cButtonCaption = .txtButtonCaption.Value
			.oSource.cFontName = .txtFontname.Value
			.oSource.nFontSize = .txtFontSize.Value
			* update preview
			With This.glowingbutton1
				.nFontColour = Thisform.shpFontColour.BackColor
				.nGlowColour = Thisform.shpGlowColour.BackColor
				.cButtonCaption = Thisform.txtButtonCaption.Value
				.cFontName = Thisform.txtFontname.Value
				.nFontSize = Thisform.txtFontSize.Value
				.Width  = Thisform.oSource.Width
				.Height = ThisForm.oSource.Height
				.Draw()
			Endwith
			* live preview courtesy Paco Satue
			Local loCaptureBmp As xfcBitmap, lcShowPicture
			lcShowPicture = Thisform.oSource.Picture
			If Empty(lcShowPicture) Or Not File(lcShowPicture)
				lcShowPicture = Forceext(Addbs(Sys(2023)) + Sys(3),'BMP')
			Endif
			Inkey(0.1) && Delay to paint the button
			loCaptureBmp = _Screen.System.Drawing.Bitmap.FromScreen(Thisform.glowingbutton1)
			loCaptureBmp.Save(lcShowPicture, _Screen.System.Drawing.Imaging.ImageFormat.Bmp)
		
			If File(lcShowPicture)
				Thisform.oSource.Picture = lcShowPicture
			Else
				Thisform.oSource.Picture = ''
			Endif
		Endwith
		
		
		
	ENDPROC

	PROCEDURE cmdApply.Click
		With ThisForm
		     .SaveChanges()
		EndWith
	ENDPROC

	PROCEDURE cmdCancel.Click
		ThisForm.Release
	ENDPROC

	PROCEDURE cmdGetFont.Click
		lcFont = GETFONT(ThisForm.txtFontname.Value,ThisForm.txtFontSize.Value,"B")
		ThisForm.txtFontname.Value = GETWORDNUM(lcFont,1,',')
		ThisForm.txtFontSize.Value = VAL(GETWORDNUM(lcFont,2,','))
	ENDPROC

	PROCEDURE shpFontColour.Click
		LOCAL nCol
		nCol = GETCOLOR(This.BackColor)
		IF nCol > -1
			This.BackColor = nCol
		ENDIF
	ENDPROC

	PROCEDURE shpGlowColour.Click
		LOCAL nCol
		nCol = GETCOLOR(This.BackColor)
		IF nCol > -1
			This.BackColor = nCol
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS glowingbutton AS imgcanvas OF "..\gdi+x\gdiplusx.vcx" 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: *drawhalotext
		*m: *enabled_assign
		*m: *getpath
		*p: aglowbuilder		&& Use this builder for setting props
		*p: cbuttoncaption
		*p: cfontname
		*p: mouseisdown
		*p: mouseover
		*p: nfontcolour
		*p: nfontsize
		*p: nglowcolour
	*</DefinedPropArrayMethod>

	aglowbuilder = 0		&& Use this builder for setting props
	cbuttoncaption = Click Me
	cfontname = Arial
	Height = 57
	mouseisdown = .F.
	mouseover = .F.
	Name = "glowingbutton"
	nfontcolour = 16760576
	nfontsize = 24
	nglowcolour = 16680760
	rendermode = 4
	Width = 164
	_memberdata = <VFPData>
		<memberdata name="beforedraw" type="method" display="BeforeDraw"/>
		<memberdata name="hdc" type="property" display="HDC"/>
		<memberdata name="ogfx" type="property" display="oGfx"/>
		<memberdata name="refresh" type="method" display="Refresh"/>
		<memberdata name="clear" type="method" display="Clear"/>
		<memberdata name="draw" type="method" display="Draw"/>
		<memberdata name="controls" type="property" display="Controls"/>
		<memberdata name="setup" type="method" display="SetUp"/>
		<memberdata name="save" type="method" display="Save"/>
		<memberdata name="afterdraw" type="method" display="AfterDraw"/>
		<memberdata name="interpolationmode" type="property" display="InterpolationMode"/>
		<memberdata name="rectangle" type="property" display="Rectangle"/>
		<memberdata name="rendermode" type="property" display="RenderMode"/>
		<memberdata name="smoothingmode" type="property" display="SmoothingMode"/>
		<memberdata name="textrenderinghint" type="property" display="TextRenderingHint"/>
		<memberdata name="obmp" type="property" display="oBmp"/>
		<memberdata name="drawwheninvisible" type="property" display="DrawWhenInvisible"/>
		<memberdata name="lredrawnow" type="property" display="lRedrawNow"/>
		<memberdata name="nfontcolour" type="property" display="nFontColour" script="nControls = ASelObj(aObjects)&#xA;If nControls # 0&#xA;   oObject = aObjects(1)&#xA;   bb = GETCOLOR(oObject.nFontColour)&#xA;   IF bb &gt; -1&#xA;       oObject.nFontColour = bb&#xA;   ENDIF&#xA;EndIf" favorites="True"/>
		<memberdata name="nglowcolour" type="property" display="nGlowColour" script="nControls = ASelObj(aObjects)&#xA;If nControls # 0&#xA;   oObject = aObjects(1)&#xA;   bb = GETCOLOR(oObject.nGlowColour)&#xA;   IF bb &gt; -1&#xA;       oObject.nGlowColour = bb&#xA;   ENDIF&#xA;EndIf" favorites="True"/>
		<memberdata name="aglowbuilder" type="property" display="aGlowBuilder" favorites="True" script="nControls = ASelObj(aObjects)&#xA;If nControls # 0&#xA;   oObject = aObjects(1)&#xA;   Set Classlib To (oObject.ClassLibrary)&#xA;    IF VARTYPE(_screen.oWiz) = &quot;U&quot;&#xA;       _screen.addproperty(&quot;oWiz&quot;,&quot;&quot;)&#xA;    ENDIF&#xA;   _screen.oWiz = Createobject(&quot;GlowBuilder&quot;, oObject)&#xA;   _screen.oWiz.Show()&#xA;EndIf"/>
		<memberdata name="cfontname" type="property" display="cFontName" favorites="True"/>
		<memberdata name="nfontsize" type="property" display="nFontSize" favorites="True"/>
		<memberdata name="cbuttoncaption" type="property" favorites="True" display="cButtonCaption"/>
		<memberdata name="picture" type="Property" favorites="True"/>
		<memberdata name="enabled" type="property" display="Enabled"/>
		<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
		</VFPData>
	
	PROCEDURE beforedraw
		LOCAL logfx as xfcGraphics
		logfx = This.oGfx
		WITH _SCREEN.system.Drawing
			logfx.Clear(.Color.Transparent)
			loGfx.SmoothingMode = .Drawing2D.SmoothingMode.AntiAlias
			* gray outer
			loRect1 = .Rectangle.new(3,3,This.Width-6,This.Height-6)
			path1 = This.GetPath(loRect1, 20)
			loPen1 = .Pen.new(IIF(This.MouseisDown,.Color.black,.Color.Gray),6)
			loGfx.DrawPath(loPen1,path1)
			* black inner
			loRect2 = lorect1
			lorect2.inflate(-1,-1)
			path2 = This.GetPath(loRect2, 20)
			loBrush1 = .SolidBrush.New(.Color.Black)
			loGfx.FillPath(loBrush1,Path2)
			* highlight
			loRect3 = .RectangleF.New(6,4,This.Width - 12, This.Height/2 - 2)
			path3 = This.getpath(lorect3,20)
			loBrush2 = .Drawing2D.LinearGradientBrush.new(loRect3,.Color.FromRGB(165,165,165),.Color.FromRGB(33,33,33),1)
			loGfx.FillPath(loBrush2,Path3)
			* text
			loHalocolour = .Color.FromRGB(This.nGlowColour) 
			lcFont = This.cFontName
			lnFontsize = This.nFontSize
			loFontColour = 	IIF(This.Enabled,.Color.FromRGB(This.nFontColour),.Color.Gray)
			lcText = This.cButtonCaption
			lnLeft = this.width/2
			lnTop = This.Height/2 
			This.drawhalotext(loHalocolour,lcFont,lnFontsize,loFontColour,lcText,lnLeft,lnTop,This.mouseover)
		ENDWITH
	ENDPROC

	PROCEDURE drawhalotext
		Lparameters toHalocolour,tcFont,tnFontsize,toFontColour,tcText,tnLeft,tnTop,tlHalo
		With _Screen.System.Drawing
			* Create a GraphicsPath object.
			Local loPath As xfcGraphicsPath
			loPath = .Drawing2D.GraphicsPath.New()
			
			* Get a basic string format object, then set properties
			loStringFormat = .StringFormat.new()
			loStringFormat.Alignment = .StringAlignment.Center
			loStringFormat.LineAlignment =.StringAlignment.Center
			
			* Add the string in the chosen style.
				loPath.AddString(tcText, ;
					.FontFamily.New(tcFont), ;
					.FontStyle.Bold, ;
					tnFontsize, ;
					.Point.New(tnLeft,tnTop),;
					loStringFormat)
			
			IF tlHalo
				* Create a bitmap in a fixed ratio to the original drawing area.
				Local loBmp As xfcBitmap
				toRect = This.Rectangle
				loBmp = .Bitmap.New(toRect.Width / 5, toRect.Height / 5)
		
				*.Point.New(0,0),
				* Get the graphics object for the image.
				Local logfx1 As xfcGraphics
				logfx1 = .Graphics.FromImage(loBmp)
		
				* Create a matrix that shrinks the drawing output by the fixed ratio.
				Local loMatrix As xfcMatrix
				loMatrix = .Drawing2D.Matrix.New(1/5, 0, 0, 1/5, -1/5, -1/5)
		
				* Choose an appropriate smoothing mode for the halo.
				logfx1.SmoothingMode = .Drawing2D.SmoothingMode.AntiAlias
		
				* Transform the graphics object so that the same half may be used for both halo and text output.
				logfx1.Transform = loMatrix
		
				* Using a suitable pen...
				Local loPen As xfcPen
				loPen = .Pen.New(toHalocolour)
		
				* Draw around the outline of the path
				logfx1.DrawPath(loPen, loPath)
		
				* and then fill in for good measure.
				logfx1.FillPath( .SolidBrush.New(toHalocolour), loPath)
		
				* setup the smoothing mode for path drawing
				This.oGfx.SmoothingMode = .Drawing2D.SmoothingMode.AntiAlias
		
				* and the interpolation mode for the expansion of the halo bitmap
				This.oGfx.InterpolationMode = .Drawing2D.InterpolationMode.HighQualityBicubic
		
				* expand the halo making the edges nice and fuzzy.
				This.oGfx.DrawImage(loBmp, toRect,0,0,loBmp.Width,loBmp.Height,.GraphicsUnit.Pixel)
			ENDIF
		
			* Redraw the original text
			This.oGfx.FillPath(.SolidBrush.New(toFontColour), loPath)
		Endwith
		
		
		
	ENDPROC

	PROCEDURE enabled_assign
		lparameters tuNewValue
		This.Enabled = tuNewValue
		This.Draw()
		
	ENDPROC

	PROCEDURE getpath
		LPARAMETERS rc,r,nCurvetype
		IF EMPTY(nCurvetype)
			nCurvetype = 0
		ENDIF
		* nCurvetype - 0 full curve, 1 top only, 2 bottom only
		LOCAL x,y,w,h,xpath,rx
		x = rc.X
		y = rc.Y
		w = rc.Width
		h = rc.Height
		rx = r
		ry=r
		DO case
		CASE nCurvetype = 1
			* top only
			rx = 1
		CASE nCurvetype = 2
			* bottom only
			ry = 1
		ENDCASE
		
		WITH _screen.system.Drawing
			xpath = .Drawing2D.GraphicsPath.New()
			xpath.AddArc(x, y, ry, ry, 180, 90)			&& Upper left corner
			xpath.AddArc(x+w - ry, y, ry, ry, 270, 90)		&&Upper right corner
			xpath.AddArc(x+w - rx, y+h - rx, rx, rx, 0, 90)	&&Lower right corner
			xpath.AddArc(x, y+h - rx, rx, rx, 90, 90)		&&Lower left corner
			xpath.CloseFigure()
		ENDWITH
		return xpath
	ENDPROC

	PROCEDURE MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF This.Enabled 
			This.mouseisdown  = .T.
			This.Draw
		ENDIF   
	ENDPROC

	PROCEDURE MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF This.Enabled 
			This.mouseover = .T.
			This.Draw
		ENDIF
	ENDPROC

	PROCEDURE MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF This.Enabled 
			This.mouseover = .F.
			This.Draw
		ENDIF
	ENDPROC

	PROCEDURE MouseUp
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF This.Enabled 
			This.mouseisdown  = .F.
			This.Draw
		ENDIF
	ENDPROC

ENDDEFINE
